; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\downloads\tgl-master\tgl-master\zlib\uncompr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_uncompress@16
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\uncompr.c
;	COMDAT _uncompress@16
_TEXT	SEGMENT
_stream$ = -56						; size = 56
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_uncompress@16 PROC					; COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 38	 sub	 esp, 56			; 00000038H

; 30   :     z_stream stream;
; 31   :     int err;
; 32   : 
; 33   :     stream.next_in = (z_const Bytef *)source;

  00009	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi

; 34   :     stream.avail_in = (uInt)sourceLen;
; 35   :     /* Check for source > 64K on 16-bit machine: */
; 36   :     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
; 37   : 
; 38   :     stream.next_out = dest;
; 39   :     stream.avail_out = (uInt)*destLen;

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _destLen$[ebp]
  00011	89 44 24 08	 mov	 DWORD PTR _stream$[esp+64], eax
  00015	8b 45 14	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00018	89 44 24 0c	 mov	 DWORD PTR _stream$[esp+68], eax
  0001c	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  0001f	89 44 24 14	 mov	 DWORD PTR _stream$[esp+76], eax
  00023	8b 07		 mov	 eax, DWORD PTR [edi]

; 40   :     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
; 41   : 
; 42   :     stream.zalloc = (alloc_func)0;
; 43   :     stream.zfree = (free_func)0;
; 44   : 
; 45   :     err = inflateInit(&stream);

  00025	6a 38		 push	 56			; 00000038H
  00027	89 44 24 1c	 mov	 DWORD PTR _stream$[esp+84], eax
  0002b	8d 44 24 0c	 lea	 eax, DWORD PTR _stream$[esp+68]
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_05IAIEPMAK@1?42?48?$AA@
  00034	50		 push	 eax
  00035	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+108], 0
  0003d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+112], 0
  00045	e8 00 00 00 00	 call	 _inflateInit_@12

; 46   :     if (err != Z_OK) return err;

  0004a	85 c0		 test	 eax, eax
  0004c	75 55		 jne	 SHORT $LN1@uncompress

; 47   : 
; 48   :     err = inflate(&stream, Z_FINISH);

  0004e	6a 04		 push	 4
  00050	8d 44 24 0c	 lea	 eax, DWORD PTR _stream$[esp+68]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _inflate@8
  0005a	8b f0		 mov	 esi, eax

; 49   :     if (err != Z_STREAM_END) {

  0005c	83 fe 01	 cmp	 esi, 1
  0005f	74 32		 je	 SHORT $LN5@uncompress

; 50   :         inflateEnd(&stream);

  00061	8d 44 24 08	 lea	 eax, DWORD PTR _stream$[esp+64]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _inflateEnd@4

; 51   :         if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))

  0006b	83 fe 02	 cmp	 esi, 2
  0006e	74 16		 je	 SHORT $LN7@uncompress
  00070	83 fe fb	 cmp	 esi, -5			; fffffffbH
  00073	75 07		 jne	 SHORT $LN6@uncompress
  00075	83 7c 24 0c 00	 cmp	 DWORD PTR _stream$[esp+68], 0
  0007a	74 0a		 je	 SHORT $LN7@uncompress
$LN6@uncompress:

; 53   :         return err;

  0007c	8b c6		 mov	 eax, esi

; 58   :     return err;
; 59   : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 10 00	 ret	 16			; 00000010H
$LN7@uncompress:

; 52   :             return Z_DATA_ERROR;

  00086	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 58   :     return err;
; 59   : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 10 00	 ret	 16			; 00000010H
$LN5@uncompress:

; 54   :     }
; 55   :     *destLen = stream.total_out;

  00093	8b 44 24 1c	 mov	 eax, DWORD PTR _stream$[esp+84]
  00097	89 07		 mov	 DWORD PTR [edi], eax

; 56   : 
; 57   :     err = inflateEnd(&stream);

  00099	8d 44 24 08	 lea	 eax, DWORD PTR _stream$[esp+64]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _inflateEnd@4
$LN1@uncompress:

; 58   :     return err;
; 59   : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 10 00	 ret	 16			; 00000010H
_uncompress@16 ENDP
_TEXT	ENDS
END
