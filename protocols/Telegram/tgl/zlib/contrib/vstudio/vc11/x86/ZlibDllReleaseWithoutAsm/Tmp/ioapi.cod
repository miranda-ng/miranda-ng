; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	__imp___fseeki64:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp___ftelli64:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__ferror:PROC
EXTRN	__imp__ftell:PROC
_DATA	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb?$AA@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb?$AA@ DB 'r+b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
PUBLIC	_fill_fopen64_filefunc
PUBLIC	_fill_zlib_filefunc64_32_def_from_filefunc32
PUBLIC	_call_ztell64
PUBLIC	_call_zseek64
PUBLIC	_call_zopen64
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _call_zopen64
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_call_zopen64 PROC					; COMDAT
; _pfilefunc$ = ecx
; _filename$ = edx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   :     if (pfilefunc->zfile_func64.zopen64_file != NULL)
; 34   :         return (*(pfilefunc->zfile_func64.zopen64_file)) (pfilefunc->zfile_func64.opaque,filename,mode);

  00003	ff 75 08	 push	 DWORD PTR _mode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	52		 push	 edx
  00009	ff 71 1c	 push	 DWORD PTR [ecx+28]
  0000c	85 c0		 test	 eax, eax
  0000e	75 03		 jne	 SHORT $LN5@call_zopen

; 35   :     else
; 36   :     {
; 37   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  00010	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
$LN5@call_zopen:
  00013	ff d0		 call	 eax
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 38   :     }
; 39   : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_call_zopen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _call_zseek64
_TEXT	SEGMENT
_offset$ = 8						; size = 8
_origin$ = 16						; size = 4
_call_zseek64 PROC					; COMDAT
; _pfilefunc$ = ecx
; _filestream$ = edx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 43   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00007	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000a	56		 push	 esi
  0000b	85 c0		 test	 eax, eax
  0000d	74 17		 je	 SHORT $LN2@call_zseek

; 44   :         return (*(pfilefunc->zfile_func64.zseek64_file)) (pfilefunc->zfile_func64.opaque,filestream,offset,origin);

  0000f	ff 75 10	 push	 DWORD PTR _origin$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR _offset$[ebp+4]
  00015	ff 75 08	 push	 DWORD PTR _offset$[ebp]
  00018	52		 push	 edx
  00019	ff 71 1c	 push	 DWORD PTR [ecx+28]
  0001c	ff d0		 call	 eax
  0001e	83 c4 14	 add	 esp, 20			; 00000014H

; 52   :     }
; 53   : }

  00021	5e		 pop	 esi
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@call_zseek:

; 45   :     else
; 46   :     {
; 47   :         uLong offsetTruncated = (uLong)offset;
; 48   :         if (offsetTruncated != offset)

  00026	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  00029	33 f6		 xor	 esi, esi
  0002b	3b c0		 cmp	 eax, eax
  0002d	75 1a		 jne	 SHORT $LN7@call_zseek
  0002f	3b 75 0c	 cmp	 esi, DWORD PTR _offset$[ebp+4]
  00032	75 15		 jne	 SHORT $LN7@call_zseek

; 50   :         else
; 51   :             return (*(pfilefunc->zseek32_file))(pfilefunc->zfile_func64.opaque,filestream,offsetTruncated,origin);

  00034	ff 75 10	 push	 DWORD PTR _origin$[ebp]
  00037	50		 push	 eax
  00038	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0003b	52		 push	 edx
  0003c	ff 71 1c	 push	 DWORD PTR [ecx+28]
  0003f	ff d0		 call	 eax
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 52   :     }
; 53   : }

  00044	5e		 pop	 esi
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN7@call_zseek:

; 49   :             return -1;

  00049	83 c8 ff	 or	 eax, -1

; 52   :     }
; 53   : }

  0004c	5e		 pop	 esi
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_call_zseek64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _call_ztell64
_TEXT	SEGMENT
_call_ztell64 PROC					; COMDAT
; _pfilefunc$ = ecx
; _filestream$ = edx

; 57   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00000	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0

; 58   :         return (*(pfilefunc->zfile_func64.ztell64_file)) (pfilefunc->zfile_func64.opaque,filestream);

  00004	52		 push	 edx
  00005	ff 71 1c	 push	 DWORD PTR [ecx+28]
  00008	74 09		 je	 SHORT $LN2@call_ztell
  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	ff d0		 call	 eax
  0000f	83 c4 08	 add	 esp, 8

; 66   :     }
; 67   : }

  00012	c3		 ret	 0
$LN2@call_ztell:

; 59   :     else
; 60   :     {
; 61   :         uLong tell_uLong = (*(pfilefunc->ztell32_file))(pfilefunc->zfile_func64.opaque,filestream);

  00013	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00016	ff d0		 call	 eax
  00018	83 c4 08	 add	 esp, 8

; 62   :         if ((tell_uLong) == MAXU32)

  0001b	83 f8 ff	 cmp	 eax, -1
  0001e	75 06		 jne	 SHORT $LN4@call_ztell

; 63   :             return (ZPOS64_T)-1;

  00020	0b c0		 or	 eax, eax
  00022	83 ca ff	 or	 edx, -1

; 66   :     }
; 67   : }

  00025	c3		 ret	 0
$LN4@call_ztell:

; 64   :         else
; 65   :             return tell_uLong;

  00026	33 d2		 xor	 edx, edx

; 66   :     }
; 67   : }

  00028	c3		 ret	 0
_call_ztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fill_zlib_filefunc64_32_def_from_filefunc32
_TEXT	SEGMENT
_fill_zlib_filefunc64_32_def_from_filefunc32 PROC	; COMDAT
; _p_filefunc64_32$ = ecx
; _p_filefunc32$ = edx

; 71   :     p_filefunc64_32->zfile_func64.zopen64_file = NULL;
; 72   :     p_filefunc64_32->zopen32_file = p_filefunc32->zopen_file;

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 73   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;
; 74   :     p_filefunc64_32->zfile_func64.zread_file = p_filefunc32->zread_file;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 75   :     p_filefunc64_32->zfile_func64.zwrite_file = p_filefunc32->zwrite_file;

  0000b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 76   :     p_filefunc64_32->zfile_func64.ztell64_file = NULL;
; 77   :     p_filefunc64_32->zfile_func64.zseek64_file = NULL;
; 78   :     p_filefunc64_32->zfile_func64.zclose_file = p_filefunc32->zclose_file;

  00011	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00014	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 79   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00017	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 80   :     p_filefunc64_32->zfile_func64.opaque = p_filefunc32->opaque;

  0001d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00020	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 81   :     p_filefunc64_32->zseek32_file = p_filefunc32->zseek_file;

  00023	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00026	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 82   :     p_filefunc64_32->ztell32_file = p_filefunc32->ztell_file;

  00029	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00032	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00039	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00040	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 83   : }

  00043	c3		 ret	 0
_fill_zlib_filefunc64_32_def_from_filefunc32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fopen_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen_file_func PROC					; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 97   :     FILE* file = NULL;
; 98   :     const char* mode_fopen = NULL;
; 99   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	8b c1		 mov	 eax, ecx
  0000a	24 03		 and	 al, 3
  0000c	3c 01		 cmp	 al, 1
  0000e	75 07		 jne	 SHORT $LN2@fopen_file

; 100  :         mode_fopen = "rb";

  00010	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02JDPG@rb?$AA@
  00015	eb 17		 jmp	 SHORT $LN6@fopen_file
$LN2@fopen_file:

; 101  :     else
; 102  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00017	f6 c1 04	 test	 cl, 4
  0001a	74 07		 je	 SHORT $LN4@fopen_file

; 103  :         mode_fopen = "r+b";

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03HMFOOINA@r?$CLb?$AA@
  00021	eb 0b		 jmp	 SHORT $LN6@fopen_file
$LN4@fopen_file:

; 104  :     else
; 105  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00023	f6 c1 08	 test	 cl, 8
  00026	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02GMLFBBN@wb?$AA@
  0002b	0f 44 c2	 cmove	 eax, edx
$LN6@fopen_file:

; 106  :         mode_fopen = "wb";
; 107  : 
; 108  :     if ((filename!=NULL) && (mode_fopen != NULL))

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00031	85 c9		 test	 ecx, ecx
  00033	74 11		 je	 SHORT $LN9@fopen_file
  00035	85 c0		 test	 eax, eax
  00037	74 0d		 je	 SHORT $LN9@fopen_file

; 109  :         file = fopen(filename, mode_fopen);

  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00041	83 c4 08	 add	 esp, 8

; 111  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN9@fopen_file:

; 110  :     return file;

  00046	33 c0		 xor	 eax, eax

; 111  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_fopen_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fopen64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen64_file_func PROC					; COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     FILE* file = NULL;
; 116  :     const char* mode_fopen = NULL;
; 117  :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	8b c1		 mov	 eax, ecx
  0000a	24 03		 and	 al, 3
  0000c	3c 01		 cmp	 al, 1
  0000e	75 07		 jne	 SHORT $LN2@fopen64_fi

; 118  :         mode_fopen = "rb";

  00010	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02JDPG@rb?$AA@
  00015	eb 17		 jmp	 SHORT $LN6@fopen64_fi
$LN2@fopen64_fi:

; 119  :     else
; 120  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00017	f6 c1 04	 test	 cl, 4
  0001a	74 07		 je	 SHORT $LN4@fopen64_fi

; 121  :         mode_fopen = "r+b";

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03HMFOOINA@r?$CLb?$AA@
  00021	eb 0b		 jmp	 SHORT $LN6@fopen64_fi
$LN4@fopen64_fi:

; 122  :     else
; 123  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00023	f6 c1 08	 test	 cl, 8
  00026	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02GMLFBBN@wb?$AA@
  0002b	0f 44 c2	 cmove	 eax, edx
$LN6@fopen64_fi:

; 124  :         mode_fopen = "wb";
; 125  : 
; 126  :     if ((filename!=NULL) && (mode_fopen != NULL))

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00031	85 c9		 test	 ecx, ecx
  00033	74 11		 je	 SHORT $LN9@fopen64_fi
  00035	85 c0		 test	 eax, eax
  00037	74 0d		 je	 SHORT $LN9@fopen64_fi

; 127  :         file = FOPEN_FUNC((const char*)filename, mode_fopen);

  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00041	83 c4 08	 add	 esp, 8

; 129  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN9@fopen64_fi:

; 128  :     return file;

  00046	33 c0		 xor	 eax, eax

; 129  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_fopen64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fread_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fread_file_func PROC					; COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  :     uLong ret;
; 135  :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00003	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00006	ff 75 14	 push	 DWORD PTR _size$[ebp]
  00009	6a 01		 push	 1
  0000b	ff 75 10	 push	 DWORD PTR _buf$[ebp]
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00014	83 c4 10	 add	 esp, 16			; 00000010H

; 136  :     return ret;
; 137  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_fread_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fwrite_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fwrite_file_func PROC					; COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  :     uLong ret;
; 142  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00003	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00006	ff 75 14	 push	 DWORD PTR _size$[ebp]
  00009	6a 01		 push	 1
  0000b	ff 75 10	 push	 DWORD PTR _buf$[ebp]
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00014	83 c4 10	 add	 esp, 16			; 00000010H

; 143  :     return ret;
; 144  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_fwrite_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _ftell_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell_file_func PROC					; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 148  :     long ret;
; 149  :     ret = ftell((FILE *)stream);

  00003	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  0000c	83 c4 04	 add	 esp, 4

; 150  :     return ret;
; 151  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_ftell_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _ftell64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell64_file_func PROC					; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     ZPOS64_T ret;
; 157  :     ret = FTELLO_FUNC((FILE *)stream);

  00003	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___ftelli64
  0000c	83 c4 04	 add	 esp, 4

; 158  :     return ret;
; 159  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_ftell64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fseek_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_fseek_file_func PROC					; COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  :     int fseek_origin=0;
; 164  :     long ret;
; 165  :     switch (origin)

  00003	8b 45 14	 mov	 eax, DWORD PTR _origin$[ebp]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 1d		 je	 SHORT $LN6@fseek_file
  0000b	83 e8 01	 sub	 eax, 1
  0000e	74 11		 je	 SHORT $LN4@fseek_file
  00010	83 e8 01	 sub	 eax, 1
  00013	74 05		 je	 SHORT $LN5@fseek_file

; 175  :         break;
; 176  :     default: return -1;

  00015	83 c8 ff	 or	 eax, -1

; 182  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN5@fseek_file:

; 170  :     case ZLIB_FILEFUNC_SEEK_END :
; 171  :         fseek_origin = SEEK_END;

  0001a	b8 02 00 00 00	 mov	 eax, 2

; 172  :         break;

  0001f	eb 09		 jmp	 SHORT $LN2@fseek_file
$LN4@fseek_file:

; 166  :     {
; 167  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 168  :         fseek_origin = SEEK_CUR;

  00021	b8 01 00 00 00	 mov	 eax, 1

; 169  :         break;

  00026	eb 02		 jmp	 SHORT $LN2@fseek_file
$LN6@fseek_file:

; 173  :     case ZLIB_FILEFUNC_SEEK_SET :
; 174  :         fseek_origin = SEEK_SET;

  00028	33 c0		 xor	 eax, eax
$LN2@fseek_file:
  0002a	56		 push	 esi

; 177  :     }
; 178  :     ret = 0;
; 179  :     if (fseek((FILE *)stream, offset, fseek_origin) != 0)

  0002b	50		 push	 eax
  0002c	ff 75 10	 push	 DWORD PTR _offset$[ebp]
  0002f	33 f6		 xor	 esi, esi
  00031	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	83 c9 ff	 or	 ecx, -1
  00040	85 c0		 test	 eax, eax
  00042	0f 45 f1	 cmovne	 esi, ecx

; 180  :         ret = -1;
; 181  :     return ret;

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi

; 182  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_fseek_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fseek64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_fseek64_file_func PROC					; COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  :     int fseek_origin=0;
; 187  :     long ret;
; 188  :     switch (origin)

  00003	8b 45 18	 mov	 eax, DWORD PTR _origin$[ebp]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 1d		 je	 SHORT $LN6@fseek64_fi
  0000b	83 e8 01	 sub	 eax, 1
  0000e	74 11		 je	 SHORT $LN4@fseek64_fi
  00010	83 e8 01	 sub	 eax, 1
  00013	74 05		 je	 SHORT $LN5@fseek64_fi

; 198  :         break;
; 199  :     default: return -1;

  00015	83 c8 ff	 or	 eax, -1

; 207  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN5@fseek64_fi:

; 193  :     case ZLIB_FILEFUNC_SEEK_END :
; 194  :         fseek_origin = SEEK_END;

  0001a	b8 02 00 00 00	 mov	 eax, 2

; 195  :         break;

  0001f	eb 09		 jmp	 SHORT $LN2@fseek64_fi
$LN4@fseek64_fi:

; 189  :     {
; 190  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 191  :         fseek_origin = SEEK_CUR;

  00021	b8 01 00 00 00	 mov	 eax, 1

; 192  :         break;

  00026	eb 02		 jmp	 SHORT $LN2@fseek64_fi
$LN6@fseek64_fi:

; 196  :     case ZLIB_FILEFUNC_SEEK_SET :
; 197  :         fseek_origin = SEEK_SET;

  00028	33 c0		 xor	 eax, eax
$LN2@fseek64_fi:
  0002a	56		 push	 esi

; 200  :     }
; 201  :     ret = 0;
; 202  : 
; 203  :     if(FSEEKO_FUNC((FILE *)stream, offset, fseek_origin) != 0)

  0002b	50		 push	 eax
  0002c	ff 75 14	 push	 DWORD PTR _offset$[ebp+4]
  0002f	33 f6		 xor	 esi, esi
  00031	ff 75 10	 push	 DWORD PTR _offset$[ebp]
  00034	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	83 c9 ff	 or	 ecx, -1
  00043	85 c0		 test	 eax, eax
  00045	0f 45 f1	 cmovne	 esi, ecx

; 204  :                         ret = -1;
; 205  : 
; 206  :     return ret;

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 207  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_fseek64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fclose_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_fclose_file_func PROC					; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 212  :     int ret;
; 213  :     ret = fclose((FILE *)stream);

  00003	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0000c	83 c4 04	 add	 esp, 4

; 214  :     return ret;
; 215  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_fclose_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _ferror_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ferror_file_func PROC					; COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  :     int ret;
; 220  :     ret = ferror((FILE *)stream);

  00003	ff 75 0c	 push	 DWORD PTR _stream$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ferror
  0000c	83 c4 04	 add	 esp, 4

; 221  :     return ret;
; 222  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_ferror_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\ioapi.c
;	COMDAT _fill_fopen64_filefunc
_TEXT	SEGMENT
_fill_fopen64_filefunc PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx

; 239  :     pzlib_filefunc_def->zopen64_file = fopen64_file_func;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET _fopen64_file_func

; 240  :     pzlib_filefunc_def->zread_file = fread_file_func;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _fread_file_func

; 241  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET _fwrite_file_func

; 242  :     pzlib_filefunc_def->ztell64_file = ftell64_file_func;

  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], OFFSET _ftell64_file_func

; 243  :     pzlib_filefunc_def->zseek64_file = fseek64_file_func;

  0001b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _fseek64_file_func

; 244  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  00022	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], OFFSET _fclose_file_func

; 245  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  00029	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET _ferror_file_func

; 246  :     pzlib_filefunc_def->opaque = NULL;

  00030	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 247  : }

  00037	c3		 ret	 0
_fill_fopen64_filefunc ENDP
_TEXT	ENDS
END
