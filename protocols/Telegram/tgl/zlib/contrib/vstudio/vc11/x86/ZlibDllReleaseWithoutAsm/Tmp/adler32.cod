; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\downloads\tgl-master\tgl-master\zlib\adler32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_adler32_combine@12
PUBLIC	_adler32@12
EXTRN	__alldiv:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\adler32.c
;	COMDAT _adler32@12
_TEXT	SEGMENT
_adler$ = 8						; size = 4
tv1591 = 12						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32@12 PROC					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 70   :     unsigned long sum2;
; 71   :     unsigned n;
; 72   : 
; 73   :     /* split Adler-32 into component sums */
; 74   :     sum2 = (adler >> 16) & 0xffff;

  00003	8b 45 08	 mov	 eax, DWORD PTR _adler$[ebp]
  00006	53		 push	 ebx

; 75   :     adler &= 0xffff;
; 76   : 
; 77   :     /* in case user likes doing a byte at a time, keep it fast */
; 78   :     if (len == 1) {

  00007	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0000a	56		 push	 esi
  0000b	8b f0		 mov	 esi, eax
  0000d	0f b7 c8	 movzx	 ecx, ax
  00010	c1 ee 10	 shr	 esi, 16			; 00000010H
  00013	83 fb 01	 cmp	 ebx, 1
  00016	75 33		 jne	 SHORT $LN13@adler32

; 79   :         adler += buf[0];

  00018	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0001b	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0001e	03 c8		 add	 ecx, eax

; 80   :         if (adler >= BASE)

  00020	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00026	72 06		 jb	 SHORT $LN14@adler32

; 81   :             adler -= BASE;

  00028	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN14@adler32:

; 82   :         sum2 += adler;

  0002e	03 f1		 add	 esi, ecx

; 83   :         if (sum2 >= BASE)

  00030	81 fe f1 ff 00
	00		 cmp	 esi, 65521		; 0000fff1H
  00036	72 06		 jb	 SHORT $LN15@adler32

; 84   :             sum2 -= BASE;

  00038	81 ee f1 ff 00
	00		 sub	 esi, 65521		; 0000fff1H
$LN15@adler32:

; 85   :         return adler | (sum2 << 16);

  0003e	c1 e6 10	 shl	 esi, 16			; 00000010H
  00041	0b f1		 or	 esi, ecx
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 133  : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
$LN13@adler32:
  0004b	57		 push	 edi

; 86   :     }
; 87   : 
; 88   :     /* initial Adler-32 value (deferred check for len == 1 speed) */
; 89   :     if (buf == Z_NULL)

  0004c	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  0004f	85 ff		 test	 edi, edi
  00051	75 0a		 jne	 SHORT $LN16@adler32

; 90   :         return 1L;

  00053	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 133  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
$LN16@adler32:

; 91   : 
; 92   :     /* in case short lengths are provided, keep it somewhat fast */
; 93   :     if (len < 16) {

  0005d	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00060	73 40		 jae	 SHORT $LN22@adler32

; 94   :         while (len--) {

  00062	85 db		 test	 ebx, ebx
  00064	74 0f		 je	 SHORT $LN26@adler32
$LL2@adler32:

; 95   :             adler += *buf++;

  00066	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00069	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  0006c	03 c8		 add	 ecx, eax

; 96   :             sum2 += adler;

  0006e	03 f1		 add	 esi, ecx
  00070	83 eb 01	 sub	 ebx, 1
  00073	75 f1		 jne	 SHORT $LL2@adler32
$LN26@adler32:

; 97   :         }
; 98   :         if (adler >= BASE)

  00075	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  0007b	72 06		 jb	 SHORT $LN18@adler32

; 99   :             adler -= BASE;

  0007d	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN18@adler32:

; 100  :         MOD28(sum2);            /* only added so many BASE's */

  00083	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00088	f7 e6		 mul	 esi
  0008a	5f		 pop	 edi
  0008b	c1 ea 0f	 shr	 edx, 15			; 0000000fH

; 101  :         return adler | (sum2 << 16);

  0008e	8b c2		 mov	 eax, edx
  00090	c1 e0 04	 shl	 eax, 4
  00093	2b c2		 sub	 eax, edx
  00095	03 c6		 add	 eax, esi
  00097	c1 e0 10	 shl	 eax, 16			; 00000010H
  0009a	5e		 pop	 esi
  0009b	0b c1		 or	 eax, ecx
  0009d	5b		 pop	 ebx

; 133  : }

  0009e	5d		 pop	 ebp
  0009f	c2 0c 00	 ret	 12			; 0000000cH
$LN22@adler32:

; 102  :     }
; 103  : 
; 104  :     /* do length NMAX blocks -- requires just one modulo operation */
; 105  :     while (len >= NMAX) {

  000a2	81 fb b0 15 00
	00		 cmp	 ebx, 5552		; 000015b0H
  000a8	0f 82 db 00 00
	00		 jb	 $LN5@adler32
  000ae	b8 af a9 6e 5e	 mov	 eax, 1584310703		; 5e6ea9afH
  000b3	f7 e3		 mul	 ebx
  000b5	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  000b8	89 55 0c	 mov	 DWORD PTR tv1591[ebp], edx
  000bb	0f 1f 44 00 00	 npad	 5
$LL4@adler32:

; 106  :         len -= NMAX;

  000c0	81 eb b0 15 00
	00		 sub	 ebx, 5552		; 000015b0H

; 107  :         n = NMAX / 16;          /* NMAX is divisible by 16 */

  000c6	ba 5b 01 00 00	 mov	 edx, 347		; 0000015bH
  000cb	0f 1f 44 00 00	 npad	 5
$LL8@adler32:

; 108  :         do {
; 109  :             DO16(buf);          /* 16 sums unrolled */

  000d0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  000d3	03 c8		 add	 ecx, eax
  000d5	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  000d9	03 f1		 add	 esi, ecx
  000db	03 c8		 add	 ecx, eax
  000dd	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  000e1	03 f1		 add	 esi, ecx
  000e3	03 c8		 add	 ecx, eax
  000e5	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  000e9	03 f1		 add	 esi, ecx
  000eb	03 c8		 add	 ecx, eax
  000ed	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  000f1	03 f1		 add	 esi, ecx
  000f3	03 c8		 add	 ecx, eax
  000f5	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  000f9	03 f1		 add	 esi, ecx
  000fb	03 c8		 add	 ecx, eax
  000fd	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00101	03 f1		 add	 esi, ecx
  00103	03 c8		 add	 ecx, eax
  00105	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  00109	03 f1		 add	 esi, ecx
  0010b	03 c8		 add	 ecx, eax
  0010d	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00111	03 f1		 add	 esi, ecx
  00113	03 c8		 add	 ecx, eax
  00115	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  00119	03 f1		 add	 esi, ecx
  0011b	03 c8		 add	 ecx, eax
  0011d	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00121	03 f1		 add	 esi, ecx
  00123	03 c8		 add	 ecx, eax
  00125	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  00129	03 f1		 add	 esi, ecx
  0012b	03 c8		 add	 ecx, eax
  0012d	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00131	03 f1		 add	 esi, ecx
  00133	03 c8		 add	 ecx, eax
  00135	0f b6 47 0d	 movzx	 eax, BYTE PTR [edi+13]
  00139	03 f1		 add	 esi, ecx
  0013b	03 c8		 add	 ecx, eax
  0013d	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00141	03 f1		 add	 esi, ecx
  00143	03 c8		 add	 ecx, eax
  00145	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  00149	03 f1		 add	 esi, ecx

; 110  :             buf += 16;

  0014b	83 c7 10	 add	 edi, 16			; 00000010H
  0014e	03 c8		 add	 ecx, eax
  00150	03 f1		 add	 esi, ecx

; 111  :         } while (--n);

  00152	83 ea 01	 sub	 edx, 1
  00155	0f 85 75 ff ff
	ff		 jne	 $LL8@adler32

; 112  :         MOD(adler);

  0015b	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00160	f7 e1		 mul	 ecx
  00162	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00165	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  0016b	03 c8		 add	 ecx, eax

; 113  :         MOD(sum2);

  0016d	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00172	f7 e6		 mul	 esi
  00174	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00177	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  0017d	03 f0		 add	 esi, eax
  0017f	83 6d 0c 01	 sub	 DWORD PTR tv1591[ebp], 1
  00183	0f 85 37 ff ff
	ff		 jne	 $LL4@adler32
$LN5@adler32:

; 114  :     }
; 115  : 
; 116  :     /* do remaining bytes (less than NMAX, still just one modulo) */
; 117  :     if (len) {                  /* avoid modulos if none remaining */

  00189	85 db		 test	 ebx, ebx
  0018b	0f 84 d4 00 00
	00		 je	 $LN19@adler32

; 118  :         while (len >= 16) {

  00191	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00194	0f 82 94 00 00
	00		 jb	 $LN25@adler32
  0019a	8b d3		 mov	 edx, ebx
  0019c	c1 ea 04	 shr	 edx, 4
  0019f	90		 npad	 1
$LL9@adler32:

; 119  :             len -= 16;
; 120  :             DO16(buf);

  001a0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  001a3	83 eb 10	 sub	 ebx, 16			; 00000010H
  001a6	03 c8		 add	 ecx, eax
  001a8	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  001ac	03 f1		 add	 esi, ecx
  001ae	03 c8		 add	 ecx, eax
  001b0	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  001b4	03 f1		 add	 esi, ecx
  001b6	03 c8		 add	 ecx, eax
  001b8	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  001bc	03 f1		 add	 esi, ecx
  001be	03 c8		 add	 ecx, eax
  001c0	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  001c4	03 f1		 add	 esi, ecx
  001c6	03 c8		 add	 ecx, eax
  001c8	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  001cc	03 f1		 add	 esi, ecx
  001ce	03 c8		 add	 ecx, eax
  001d0	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  001d4	03 f1		 add	 esi, ecx
  001d6	03 c8		 add	 ecx, eax
  001d8	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  001dc	03 f1		 add	 esi, ecx
  001de	03 c8		 add	 ecx, eax
  001e0	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  001e4	03 f1		 add	 esi, ecx
  001e6	03 c8		 add	 ecx, eax
  001e8	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  001ec	03 f1		 add	 esi, ecx
  001ee	03 c8		 add	 ecx, eax
  001f0	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  001f4	03 f1		 add	 esi, ecx
  001f6	03 c8		 add	 ecx, eax
  001f8	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  001fc	03 f1		 add	 esi, ecx
  001fe	03 c8		 add	 ecx, eax
  00200	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00204	03 f1		 add	 esi, ecx
  00206	03 c8		 add	 ecx, eax
  00208	0f b6 47 0d	 movzx	 eax, BYTE PTR [edi+13]
  0020c	03 f1		 add	 esi, ecx
  0020e	03 c8		 add	 ecx, eax
  00210	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00214	03 f1		 add	 esi, ecx
  00216	03 c8		 add	 ecx, eax
  00218	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  0021c	03 f1		 add	 esi, ecx

; 121  :             buf += 16;

  0021e	83 c7 10	 add	 edi, 16			; 00000010H
  00221	03 c8		 add	 ecx, eax
  00223	03 f1		 add	 esi, ecx
  00225	83 ea 01	 sub	 edx, 1
  00228	0f 85 72 ff ff
	ff		 jne	 $LL9@adler32
$LN25@adler32:

; 122  :         }
; 123  :         while (len--) {

  0022e	85 db		 test	 ebx, ebx
  00230	74 0f		 je	 SHORT $LN30@adler32
$LL11@adler32:

; 124  :             adler += *buf++;

  00232	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00235	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00238	03 c8		 add	 ecx, eax

; 125  :             sum2 += adler;

  0023a	03 f1		 add	 esi, ecx
  0023c	83 eb 01	 sub	 ebx, 1
  0023f	75 f1		 jne	 SHORT $LL11@adler32
$LN30@adler32:

; 126  :         }
; 127  :         MOD(adler);

  00241	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00246	f7 e1		 mul	 ecx

; 128  :         MOD(sum2);

  00248	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  0024d	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00250	69 d2 0f 00 ff
	ff		 imul	 edx, edx, -65521
  00256	03 ca		 add	 ecx, edx
  00258	f7 e6		 mul	 esi
  0025a	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0025d	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  00263	03 f0		 add	 esi, eax
$LN19@adler32:

; 129  :     }
; 130  : 
; 131  :     /* return recombined sums */
; 132  :     return adler | (sum2 << 16);

  00265	c1 e6 10	 shl	 esi, 16			; 00000010H
  00268	0b f1		 or	 esi, ecx
  0026a	5f		 pop	 edi
  0026b	8b c6		 mov	 eax, esi
  0026d	5e		 pop	 esi
  0026e	5b		 pop	 ebx

; 133  : }

  0026f	5d		 pop	 ebp
  00270	c2 0c 00	 ret	 12			; 0000000cH
_adler32@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\adler32.c
;	COMDAT _adler32_combine_
_TEXT	SEGMENT
_adler2$1$ = -4						; size = 4
_len2$ = 8						; size = 8
_adler32_combine_ PROC					; COMDAT
; _adler1$ = ecx
; _adler2$ = edx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 141  :     unsigned long sum1;
; 142  :     unsigned long sum2;
; 143  :     unsigned rem;
; 144  : 
; 145  :     /* for negative len, return invalid adler32 as a clue for debugging */
; 146  :     if (len2 < 0)

  00004	8b 45 0c	 mov	 eax, DWORD PTR _len2$[ebp+4]
  00007	89 55 fc	 mov	 DWORD PTR _adler2$1$[ebp], edx
  0000a	53		 push	 ebx
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _len2$[ebp]
  00011	85 c0		 test	 eax, eax
  00013	7f 0f		 jg	 SHORT $LN2@adler32_co
  00015	7c 04		 jl	 SHORT $LN8@adler32_co
  00017	85 ff		 test	 edi, edi
  00019	73 09		 jae	 SHORT $LN2@adler32_co
$LN8@adler32_co:
  0001b	5f		 pop	 edi

; 147  :         return 0xffffffffUL;

  0001c	83 c8 ff	 or	 eax, -1
  0001f	5b		 pop	 ebx

; 162  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@adler32_co:
  00024	56		 push	 esi

; 148  : 
; 149  :     /* the derivation of this formula is left as an exercise for the reader */
; 150  :     MOD63(len2);                /* assumes len2 >= 0 */

  00025	6a 00		 push	 0
  00027	68 f1 ff 00 00	 push	 65521			; 0000fff1H
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 __alldiv
  00033	69 c0 f1 ff 00
	00		 imul	 eax, eax, 65521

; 151  :     rem = (unsigned)len2;
; 152  :     sum1 = adler1 & 0xffff;

  00039	0f b7 cb	 movzx	 ecx, bx

; 153  :     sum2 = rem * sum1;

  0003c	8b f1		 mov	 esi, ecx

; 154  :     MOD(sum2);
; 155  :     sum1 += (adler2 & 0xffff) + BASE - 1;
; 156  :     sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;

  0003e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00041	2b f8		 sub	 edi, eax
  00043	8b 45 fc	 mov	 eax, DWORD PTR _adler2$1$[ebp]
  00046	0f b7 c0	 movzx	 eax, ax
  00049	05 f0 ff 00 00	 add	 eax, 65520		; 0000fff0H
  0004e	0f af f7	 imul	 esi, edi
  00051	03 c8		 add	 ecx, eax
  00053	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00058	f7 e6		 mul	 esi
  0005a	81 c6 f1 ff 00
	00		 add	 esi, 65521		; 0000fff1H
  00060	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00063	69 c2 f1 ff 00
	00		 imul	 eax, edx, 65521
  00069	2b d8		 sub	 ebx, eax
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _adler2$1$[ebp]
  0006e	c1 e8 10	 shr	 eax, 16			; 00000010H
  00071	03 c3		 add	 eax, ebx
  00073	2b c7		 sub	 eax, edi
  00075	03 c6		 add	 eax, esi
  00077	5e		 pop	 esi

; 157  :     if (sum1 >= BASE) sum1 -= BASE;

  00078	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  0007e	72 14		 jb	 SHORT $LN4@adler32_co
  00080	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H

; 158  :     if (sum1 >= BASE) sum1 -= BASE;

  00086	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  0008c	72 06		 jb	 SHORT $LN4@adler32_co
  0008e	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN4@adler32_co:

; 159  :     if (sum2 >= (BASE << 1)) sum2 -= (BASE << 1);

  00094	3d e2 ff 01 00	 cmp	 eax, 131042		; 0001ffe2H
  00099	72 05		 jb	 SHORT $LN5@adler32_co
  0009b	2d e2 ff 01 00	 sub	 eax, 131042		; 0001ffe2H
$LN5@adler32_co:

; 160  :     if (sum2 >= BASE) sum2 -= BASE;

  000a0	3d f1 ff 00 00	 cmp	 eax, 65521		; 0000fff1H
  000a5	72 05		 jb	 SHORT $LN6@adler32_co
  000a7	2d f1 ff 00 00	 sub	 eax, 65521		; 0000fff1H
$LN6@adler32_co:

; 161  :     return sum1 | (sum2 << 16);

  000ac	c1 e0 10	 shl	 eax, 16			; 00000010H
  000af	5f		 pop	 edi
  000b0	0b c1		 or	 eax, ecx
  000b2	5b		 pop	 ebx

; 162  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_adler32_combine_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\adler32.c
;	COMDAT _adler32_combine@12
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine@12 PROC				; COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  :     return adler32_combine_(adler1, adler2, len2);

  00003	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _adler1$[ebp]
  00009	99		 cdq
  0000a	52		 push	 edx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _adler2$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _adler32_combine_
  00014	83 c4 08	 add	 esp, 8

; 171  : }

  00017	5d		 pop	 ebp
  00018	c2 0c 00	 ret	 12			; 0000000cH
_adler32_combine@12 ENDP
_TEXT	ENDS
END
