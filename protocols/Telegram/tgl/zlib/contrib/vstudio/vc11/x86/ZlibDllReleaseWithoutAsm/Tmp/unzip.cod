; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_unz_copyright
	ORG $+5
_unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:'
	DB	'//www.winimage.com/zLibDll', 00H
PUBLIC	_unzGetGlobalComment@12
PUBLIC	_unzCloseCurrentFile@4
PUBLIC	_unzGetLocalExtrafield@12
PUBLIC	_unzeof@4
PUBLIC	_unztell64@4
PUBLIC	_unztell@4
PUBLIC	_unzReadCurrentFile@12
PUBLIC	_unzGetCurrentFileZStreamPos64@4
PUBLIC	_unzOpenCurrentFile2@16
PUBLIC	_unzOpenCurrentFilePassword@8
PUBLIC	_unzOpenCurrentFile@4
PUBLIC	_unzOpenCurrentFile3@20
PUBLIC	_unzGoToFilePos@8
PUBLIC	_unzGoToFilePos64@8
PUBLIC	_unzGetFilePos@8
PUBLIC	_unzGetFilePos64@8
PUBLIC	_unzLocateFile@12
PUBLIC	_unzGoToNextFile@4
PUBLIC	_unzGoToFirstFile@4
PUBLIC	_unzGetCurrentFileInfo@32
PUBLIC	_unzGetCurrentFileInfo64@32
PUBLIC	_unzGetGlobalInfo@8
PUBLIC	_unzGetGlobalInfo64@8
PUBLIC	_unzClose@4
PUBLIC	_unzOpen64@4
PUBLIC	_unzOpen@4
PUBLIC	_unzOpen2_64@8
PUBLIC	_unzOpen2@8
PUBLIC	_unzStringFileNameCompare@12
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getByte
_TEXT	SEGMENT
_c$ = -1						; size = 1
_pi$ = 8						; size = 4
_unz64local_getByte PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 214  :     unsigned char c;
; 215  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	8d 45 ff	 lea	 eax, DWORD PTR _c$[ebp]
  0000d	50		 push	 eax
  0000e	8b fa		 mov	 edi, edx
  00010	57		 push	 edi
  00011	ff 76 1c	 push	 DWORD PTR [esi+28]
  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	ff d0		 call	 eax
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 216  :     if (err==1)

  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 11		 jne	 SHORT $LN2@unz64local

; 217  :     {
; 218  :         *pi = (int)c;

  00021	8b 45 08	 mov	 eax, DWORD PTR _pi$[ebp]
  00024	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 219  :         return UNZ_OK;

  0002c	33 c0		 xor	 eax, eax

; 224  :             return UNZ_ERRNO;
; 225  :         else
; 226  :             return UNZ_EOF;
; 227  :     }
; 228  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN2@unz64local:

; 220  :     }
; 221  :     else
; 222  :     {
; 223  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00032	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00035	57		 push	 edi
  00036	ff 76 1c	 push	 DWORD PTR [esi+28]
  00039	ff d0		 call	 eax
  0003b	83 c4 08	 add	 esp, 8
  0003e	f7 d8		 neg	 eax
  00040	1b c0		 sbb	 eax, eax
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 224  :             return UNZ_ERRNO;
; 225  :         else
; 226  :             return UNZ_EOF;
; 227  :     }
; 228  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_unz64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getShort
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pX$ = 8						; size = 4
_unz64local_getShort PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 243  :     uLong x ;
; 244  :     int i = 0;
; 245  :     int err;
; 246  : 
; 247  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00011	50		 push	 eax
  00012	8b f2		 mov	 esi, edx
  00014	8b f9		 mov	 edi, ecx
  00016	e8 00 00 00 00	 call	 _unz64local_getByte

; 248  :     x = (uLong)i;

  0001b	8b 5d fc	 mov	 ebx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 04	 add	 esp, 4

; 249  : 
; 250  :     if (err==UNZ_OK)

  00023	85 d2		 test	 edx, edx
  00025	75 2c		 jne	 SHORT $LN3@unz64local

; 251  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00027	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002a	8b d6		 mov	 edx, esi
  0002c	50		 push	 eax
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 _unz64local_getByte
  00034	8b d0		 mov	 edx, eax
  00036	83 c4 04	 add	 esp, 4

; 252  :     x |= ((uLong)i)<<8;
; 253  : 
; 254  :     if (err==UNZ_OK)

  00039	85 d2		 test	 edx, edx
  0003b	75 16		 jne	 SHORT $LN3@unz64local

; 255  :         *pX = x;

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	5f		 pop	 edi
  00047	0b cb		 or	 ecx, ebx
  00049	5e		 pop	 esi
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 258  :     return err;

  0004c	8b c2		 mov	 eax, edx
  0004e	5b		 pop	 ebx

; 259  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN3@unz64local:

; 256  :     else
; 257  :         *pX = 0;

  00053	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 258  :     return err;

  0005f	8b c2		 mov	 eax, edx

; 259  : }

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_unz64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getLong
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pX$ = 8						; size = 4
_unz64local_getLong PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 270  :     uLong x ;
; 271  :     int i = 0;
; 272  :     int err;
; 273  : 
; 274  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00011	50		 push	 eax
  00012	8b fa		 mov	 edi, edx
  00014	8b d9		 mov	 ebx, ecx
  00016	e8 00 00 00 00	 call	 _unz64local_getByte

; 275  :     x = (uLong)i;

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 04	 add	 esp, 4
  00023	8b f1		 mov	 esi, ecx

; 276  : 
; 277  :     if (err==UNZ_OK)

  00025	85 d2		 test	 edx, edx
  00027	75 15		 jne	 SHORT $LN2@unz64local

; 278  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00029	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002c	8b d7		 mov	 edx, edi
  0002e	50		 push	 eax
  0002f	8b cb		 mov	 ecx, ebx
  00031	e8 00 00 00 00	 call	 _unz64local_getByte
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00039	83 c4 04	 add	 esp, 4
  0003c	8b d0		 mov	 edx, eax
$LN2@unz64local:

; 279  :     x |= ((uLong)i)<<8;

  0003e	8b c1		 mov	 eax, ecx
  00040	c1 e0 08	 shl	 eax, 8
  00043	0b f0		 or	 esi, eax

; 280  : 
; 281  :     if (err==UNZ_OK)

  00045	85 d2		 test	 edx, edx
  00047	75 15		 jne	 SHORT $LN3@unz64local

; 282  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00049	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0004c	8b d7		 mov	 edx, edi
  0004e	50		 push	 eax
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 _unz64local_getByte
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00059	83 c4 04	 add	 esp, 4
  0005c	8b d0		 mov	 edx, eax
$LN3@unz64local:

; 283  :     x |= ((uLong)i)<<16;

  0005e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00061	0b f1		 or	 esi, ecx

; 284  : 
; 285  :     if (err==UNZ_OK)

  00063	85 d2		 test	 edx, edx
  00065	75 2c		 jne	 SHORT $LN5@unz64local

; 286  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00067	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0006a	8b d7		 mov	 edx, edi
  0006c	50		 push	 eax
  0006d	8b cb		 mov	 ecx, ebx
  0006f	e8 00 00 00 00	 call	 _unz64local_getByte
  00074	8b d0		 mov	 edx, eax
  00076	83 c4 04	 add	 esp, 4

; 287  :     x += ((uLong)i)<<24;
; 288  : 
; 289  :     if (err==UNZ_OK)

  00079	85 d2		 test	 edx, edx
  0007b	75 16		 jne	 SHORT $LN5@unz64local

; 290  :         *pX = x;

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00080	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00083	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00086	5f		 pop	 edi
  00087	03 ce		 add	 ecx, esi
  00089	5e		 pop	 esi
  0008a	89 08		 mov	 DWORD PTR [eax], ecx

; 293  :     return err;

  0008c	8b c2		 mov	 eax, edx
  0008e	5b		 pop	 ebx

; 294  : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN5@unz64local:

; 291  :     else
; 292  :         *pX = 0;

  00093	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  :     return err;

  0009f	8b c2		 mov	 eax, edx

; 294  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_unz64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getLong64
_TEXT	SEGMENT
_pzlib_filefunc_def$1$ = -12				; size = 4
_filestream$1$ = -8					; size = 4
_i$ = -4						; size = 4
_pX$ = 8						; size = 4
_unz64local_getLong64 PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b c2		 mov	 eax, edx
  00009	89 4d f4	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], ecx
  0000c	56		 push	 esi

; 306  :     ZPOS64_T x ;
; 307  :     int i = 0;
; 308  :     int err;
; 309  : 
; 310  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 55 fc	 lea	 edx, DWORD PTR _i$[ebp]
  00010	89 45 f8	 mov	 DWORD PTR _filestream$1$[ebp], eax
  00013	57		 push	 edi
  00014	52		 push	 edx
  00015	8b d0		 mov	 edx, eax
  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	e8 00 00 00 00	 call	 _unz64local_getByte

; 311  :     x = (ZPOS64_T)i;

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00026	8b f0		 mov	 esi, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	83 c4 04	 add	 esp, 4
  0002d	99		 cdq
  0002e	8b f8		 mov	 edi, eax
  00030	8b da		 mov	 ebx, edx

; 312  : 
; 313  :     if (err==UNZ_OK)

  00032	85 f6		 test	 esi, esi
  00034	75 17		 jne	 SHORT $LN2@unz64local

; 314  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00036	8b 55 f8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00039	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0003c	8b 4d f4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _unz64local_getByte
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f0		 mov	 esi, eax
$LN2@unz64local:

; 315  :     x |= ((ZPOS64_T)i)<<8;

  0004d	8b c1		 mov	 eax, ecx
  0004f	99		 cdq
  00050	0f a4 c2 08	 shld	 edx, eax, 8
  00054	c1 e0 08	 shl	 eax, 8
  00057	0b da		 or	 ebx, edx
  00059	0b f8		 or	 edi, eax

; 316  : 
; 317  :     if (err==UNZ_OK)

  0005b	85 f6		 test	 esi, esi
  0005d	75 17		 jne	 SHORT $LN3@unz64local

; 318  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0005f	8b 55 f8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00062	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _unz64local_getByte
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00071	83 c4 04	 add	 esp, 4
  00074	8b f0		 mov	 esi, eax
$LN3@unz64local:

; 319  :     x |= ((ZPOS64_T)i)<<16;

  00076	8b c1		 mov	 eax, ecx
  00078	99		 cdq
  00079	0f a4 c2 10	 shld	 edx, eax, 16
  0007d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00080	0b da		 or	 ebx, edx
  00082	0b f8		 or	 edi, eax

; 320  : 
; 321  :     if (err==UNZ_OK)

  00084	85 f6		 test	 esi, esi
  00086	75 17		 jne	 SHORT $LN4@unz64local

; 322  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00088	8b 55 f8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  0008b	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _unz64local_getByte
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0009a	83 c4 04	 add	 esp, 4
  0009d	8b f0		 mov	 esi, eax
$LN4@unz64local:

; 323  :     x |= ((ZPOS64_T)i)<<24;

  0009f	8b c1		 mov	 eax, ecx
  000a1	99		 cdq
  000a2	0f a4 c2 18	 shld	 edx, eax, 24
  000a6	c1 e0 18	 shl	 eax, 24			; 00000018H
  000a9	0b da		 or	 ebx, edx
  000ab	0b f8		 or	 edi, eax

; 324  : 
; 325  :     if (err==UNZ_OK)

  000ad	85 f6		 test	 esi, esi
  000af	75 17		 jne	 SHORT $LN5@unz64local

; 326  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000b1	8b 55 f8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000b4	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000b7	8b 4d f4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _unz64local_getByte
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c3	83 c4 04	 add	 esp, 4
  000c6	8b f0		 mov	 esi, eax
$LN5@unz64local:

; 327  :     x |= ((ZPOS64_T)i)<<32;

  000c8	8b c1		 mov	 eax, ecx
  000ca	99		 cdq
  000cb	0b d8		 or	 ebx, eax

; 328  : 
; 329  :     if (err==UNZ_OK)

  000cd	85 f6		 test	 esi, esi
  000cf	75 17		 jne	 SHORT $LN6@unz64local

; 330  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000d1	8b 55 f8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000d4	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000d7	8b 4d f4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _unz64local_getByte
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000e3	83 c4 04	 add	 esp, 4
  000e6	8b f0		 mov	 esi, eax
$LN6@unz64local:

; 331  :     x |= ((ZPOS64_T)i)<<40;

  000e8	8b c1		 mov	 eax, ecx
  000ea	99		 cdq
  000eb	c1 e0 08	 shl	 eax, 8
  000ee	0b d8		 or	 ebx, eax

; 332  : 
; 333  :     if (err==UNZ_OK)

  000f0	85 f6		 test	 esi, esi
  000f2	75 17		 jne	 SHORT $LN7@unz64local

; 334  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000f4	8b 55 f8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000f7	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000fa	8b 4d f4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 _unz64local_getByte
  00103	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00106	83 c4 04	 add	 esp, 4
  00109	8b f0		 mov	 esi, eax
$LN7@unz64local:

; 335  :     x |= ((ZPOS64_T)i)<<48;

  0010b	8b c1		 mov	 eax, ecx
  0010d	99		 cdq
  0010e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00111	0b d8		 or	 ebx, eax

; 336  : 
; 337  :     if (err==UNZ_OK)

  00113	85 f6		 test	 esi, esi
  00115	75 36		 jne	 SHORT $LN9@unz64local

; 338  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00117	8b 55 f8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  0011a	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0011d	8b 4d f4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 _unz64local_getByte
  00126	8b f0		 mov	 esi, eax
  00128	83 c4 04	 add	 esp, 4

; 339  :     x |= ((ZPOS64_T)i)<<56;
; 340  : 
; 341  :     if (err==UNZ_OK)

  0012b	85 f6		 test	 esi, esi
  0012d	75 1e		 jne	 SHORT $LN9@unz64local

; 342  :         *pX = x;

  0012f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _pX$[ebp]
  00135	99		 cdq
  00136	33 d2		 xor	 edx, edx
  00138	c1 e0 18	 shl	 eax, 24			; 00000018H
  0013b	0b d7		 or	 edx, edi
  0013d	0b c3		 or	 eax, ebx
  0013f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 345  :     return err;

  00142	8b c6		 mov	 eax, esi
  00144	89 11		 mov	 DWORD PTR [ecx], edx

; 346  : }

  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
$LN9@unz64local:

; 343  :     else
; 344  :         *pX = 0;

  0014d	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]

; 346  : }

  00150	5f		 pop	 edi
  00151	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00157	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0015e	8b c6		 mov	 eax, esi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c3		 ret	 0
_unz64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _strcmpcasenosensitive_internal
_TEXT	SEGMENT
_strcmpcasenosensitive_internal PROC			; COMDAT
; _fileName1$ = ecx
; _fileName2$ = edx

; 367  :     }

  00000	2b ca		 sub	 ecx, edx
  00002	53		 push	 ebx
$LL2@strcmpcase:

; 351  :     for (;;)
; 352  :     {
; 353  :         char c1=*(fileName1++);
; 354  :         char c2=*(fileName2++);

  00003	8a 24 11	 mov	 ah, BYTE PTR [ecx+edx]
  00006	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00009	8a 5a ff	 mov	 bl, BYTE PTR [edx-1]

; 355  :         if ((c1>='a') && (c1<='z'))

  0000c	8a c4		 mov	 al, ah
  0000e	2c 61		 sub	 al, 97			; 00000061H
  00010	3c 19		 cmp	 al, 25			; 00000019H
  00012	77 03		 ja	 SHORT $LN5@strcmpcase

; 356  :             c1 -= 0x20;

  00014	80 c4 e0	 add	 ah, -32			; ffffffe0H
$LN5@strcmpcase:

; 357  :         if ((c2>='a') && (c2<='z'))

  00017	8a c3		 mov	 al, bl
  00019	2c 61		 sub	 al, 97			; 00000061H
  0001b	3c 19		 cmp	 al, 25			; 00000019H
  0001d	77 03		 ja	 SHORT $LN6@strcmpcase

; 358  :             c2 -= 0x20;

  0001f	80 c3 e0	 add	 bl, -32			; ffffffe0H
$LN6@strcmpcase:

; 359  :         if (c1=='\0')

  00022	84 e4		 test	 ah, ah
  00024	74 16		 je	 SHORT $LN14@strcmpcase

; 361  :         if (c2=='\0')

  00026	84 db		 test	 bl, bl
  00028	74 06		 je	 SHORT $LN15@strcmpcase

; 362  :             return 1;
; 363  :         if (c1<c2)

  0002a	3a e3		 cmp	 ah, bl
  0002c	7c 09		 jl	 SHORT $LN16@strcmpcase

; 365  :         if (c1>c2)

  0002e	7e d3		 jle	 SHORT $LL2@strcmpcase
$LN15@strcmpcase:

; 366  :             return 1;

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	5b		 pop	 ebx

; 368  : }

  00036	c3		 ret	 0
$LN16@strcmpcase:

; 364  :             return -1;

  00037	83 c8 ff	 or	 eax, -1
  0003a	5b		 pop	 ebx

; 368  : }

  0003b	c3		 ret	 0
$LN14@strcmpcase:

; 360  :             return ((c2=='\0') ? 0 : -1);

  0003c	0f be c3	 movsx	 eax, bl
  0003f	f7 d8		 neg	 eax
  00041	5b		 pop	 ebx
  00042	1b c0		 sbb	 eax, eax

; 368  : }

  00044	c3		 ret	 0
_strcmpcasenosensitive_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzStringFileNameCompare@12
_TEXT	SEGMENT
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzStringFileNameCompare@12 PROC			; COMDAT

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  :     if (iCaseSensitivity==0)

  00003	8b 45 10	 mov	 eax, DWORD PTR _iCaseSensitivity$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 36		 je	 SHORT $LN3@unzStringF

; 396  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;
; 397  : 
; 398  :     if (iCaseSensitivity==1)

  0000a	83 f8 01	 cmp	 eax, 1
  0000d	75 31		 jne	 SHORT $LN3@unzStringF

; 399  :         return strcmp(fileName1,fileName2);

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _fileName2$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _fileName1$[ebp]
$LL5@unzStringF:
  00015	8a 11		 mov	 dl, BYTE PTR [ecx]
  00017	3a 10		 cmp	 dl, BYTE PTR [eax]
  00019	75 1c		 jne	 SHORT $LN6@unzStringF
  0001b	84 d2		 test	 dl, dl
  0001d	74 12		 je	 SHORT $LN7@unzStringF
  0001f	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00022	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00025	75 10		 jne	 SHORT $LN6@unzStringF
  00027	83 c1 02	 add	 ecx, 2
  0002a	83 c0 02	 add	 eax, 2
  0002d	84 d2		 test	 dl, dl
  0002f	75 e4		 jne	 SHORT $LL5@unzStringF
$LN7@unzStringF:
  00031	33 c0		 xor	 eax, eax

; 402  : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
$LN6@unzStringF:

; 399  :         return strcmp(fileName1,fileName2);

  00037	1b c0		 sbb	 eax, eax
  00039	83 c8 01	 or	 eax, 1

; 402  : }

  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
$LN3@unzStringF:

; 400  : 
; 401  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  00040	8b 55 0c	 mov	 edx, DWORD PTR _fileName2$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _fileName1$[ebp]
  00046	e8 00 00 00 00	 call	 _strcmpcasenosensitive_internal

; 402  : }

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
_unzStringFileNameCompare@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_SearchCentralDir
_TEXT	SEGMENT
_uPosFound$ = -48					; size = 8
_uReadPos$1$ = -44					; size = 4
_uBackRead$2$ = -40					; size = 4
_uReadPos$2$ = -36					; size = 4
_pzlib_filefunc_def$1$ = -32				; size = 4
_filestream$1$ = -28					; size = 4
_uSizeFile$1$ = -24					; size = 4
_uSizeFile$2$ = -20					; size = 4
_uPosFound$1$ = -16					; size = 4
_uPosFound$2$ = -12					; size = 4
_uMaxBack$1$ = -8					; size = 4
_uMaxBack$2$ = -4					; size = 4
_unz64local_SearchCentralDir PROC			; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 415  :     unsigned char* buf;
; 416  :     ZPOS64_T uSizeFile;
; 417  :     ZPOS64_T uBackRead;
; 418  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00009	33 c0		 xor	 eax, eax
  0000b	8b f2		 mov	 esi, edx

; 419  :     ZPOS64_T uPosFound=0;
; 420  : 
; 421  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0000d	6a 02		 push	 2
  0000f	50		 push	 eax
  00010	8b d9		 mov	 ebx, ecx
  00012	89 75 e4	 mov	 DWORD PTR _filestream$1$[ebp], esi
  00015	0f 57 c0	 xorps	 xmm0, xmm0
  00018	89 5d e0	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], ebx
  0001b	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  00020	89 45 fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00023	50		 push	 eax
  00024	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
  00027	66 0f 13 45 d0	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  0002c	e8 00 00 00 00	 call	 _call_zseek64
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	74 0b		 je	 SHORT $LN7@unz64local

; 422  :         return 0;

  00038	33 c0		 xor	 eax, eax
$LN43@unz64local:
  0003a	33 d2		 xor	 edx, edx

; 467  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN7@unz64local:

; 423  : 
; 424  : 
; 425  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00043	8b d6		 mov	 edx, esi
  00045	8b cb		 mov	 ecx, ebx
  00047	e8 00 00 00 00	 call	 _call_ztell64
  0004c	8b ca		 mov	 ecx, edx
  0004e	89 45 e8	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  00051	89 4d ec	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 426  : 
; 427  :     if (uMaxBack>uSizeFile)

  00054	85 c9		 test	 ecx, ecx
  00056	77 11		 ja	 SHORT $LN8@unz64local
  00058	72 07		 jb	 SHORT $LN33@unz64local
  0005a	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005f	73 08		 jae	 SHORT $LN8@unz64local
$LN33@unz64local:

; 428  :         uMaxBack = uSizeFile;

  00061	8b f8		 mov	 edi, eax
  00063	89 4d fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
  00066	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
$LN8@unz64local:

; 429  : 
; 430  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00069	68 04 04 00 00	 push	 1028			; 00000404H
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00074	8b f0		 mov	 esi, eax
  00076	83 c4 04	 add	 esp, 4

; 431  :     if (buf==NULL)
; 432  :         return 0;

  00079	33 c0		 xor	 eax, eax
  0007b	85 f6		 test	 esi, esi
  0007d	74 bb		 je	 SHORT $LN43@unz64local

; 433  : 
; 434  :     uBackRead = 4;
; 435  :     while (uBackRead<uMaxBack)

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00082	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00085	3b c1		 cmp	 eax, ecx
  00087	0f 87 f3 00 00
	00		 ja	 $LN42@unz64local
  0008d	72 08		 jb	 SHORT $LN40@unz64local
  0008f	3b df		 cmp	 ebx, edi
  00091	0f 83 e9 00 00
	00		 jae	 $LN42@unz64local
$LN40@unz64local:
  00097	8b 55 d4	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
  0009a	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  0009d	8b 55 d0	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  000a0	89 55 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], edx
$LL2@unz64local:

; 436  :     {
; 437  :         uLong uReadSize;
; 438  :         ZPOS64_T uReadPos ;
; 439  :         int i;
; 440  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a3	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000a9	83 d0 00	 adc	 eax, 0
  000ac	89 45 d8	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000af	3b c1		 cmp	 eax, ecx
  000b1	72 0d		 jb	 SHORT $LN11@unz64local
  000b3	77 04		 ja	 SHORT $LN35@unz64local
  000b5	3b df		 cmp	 ebx, edi
  000b7	76 07		 jbe	 SHORT $LN11@unz64local
$LN35@unz64local:

; 441  :             uBackRead = uMaxBack;

  000b9	8b df		 mov	 ebx, edi
  000bb	89 4d d8	 mov	 DWORD PTR _uBackRead$2$[ebp], ecx
  000be	8b c1		 mov	 eax, ecx
$LN11@unz64local:

; 442  :         else
; 443  :             uBackRead+=BUFREADCOMMENT;
; 444  :         uReadPos = uSizeFile-uBackRead ;

  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _uSizeFile$1$[ebp]
  000c3	8b d1		 mov	 edx, ecx
  000c5	8b 7d ec	 mov	 edi, DWORD PTR _uSizeFile$2$[ebp]
  000c8	2b d3		 sub	 edx, ebx
  000ca	89 55 d4	 mov	 DWORD PTR _uReadPos$1$[ebp], edx
  000cd	1b f8		 sbb	 edi, eax

; 445  : 
; 446  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  000cf	8b 45 ec	 mov	 eax, DWORD PTR _uSizeFile$2$[ebp]
  000d2	2b ca		 sub	 ecx, edx
  000d4	89 7d dc	 mov	 DWORD PTR _uReadPos$2$[ebp], edi
  000d7	1b c7		 sbb	 eax, edi
  000d9	85 c0		 test	 eax, eax
  000db	72 11		 jb	 SHORT $LN18@unz64local
  000dd	77 08		 ja	 SHORT $LN36@unz64local
  000df	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  000e5	76 07		 jbe	 SHORT $LN18@unz64local
$LN36@unz64local:
  000e7	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000ec	eb 05		 jmp	 SHORT $LN19@unz64local
$LN18@unz64local:
  000ee	8b 7d e8	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000f1	2b fa		 sub	 edi, edx
$LN19@unz64local:

; 447  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 448  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f3	8b 4d e0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000f6	6a 00		 push	 0
  000f8	ff 75 dc	 push	 DWORD PTR _uReadPos$2$[ebp]
  000fb	52		 push	 edx
  000fc	8b 55 e4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000ff	e8 00 00 00 00	 call	 _call_zseek64
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	85 c0		 test	 eax, eax
  00109	0f 85 7d 00 00
	00		 jne	 $LN37@unz64local

; 449  :             break;
; 450  : 
; 451  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0010f	8b 45 e0	 mov	 eax, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00112	57		 push	 edi
  00113	56		 push	 esi
  00114	ff 75 e4	 push	 DWORD PTR _filestream$1$[ebp]
  00117	ff 70 1c	 push	 DWORD PTR [eax+28]
  0011a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0011d	ff d0		 call	 eax
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
  00122	3b c7		 cmp	 eax, edi
  00124	75 66		 jne	 SHORT $LN37@unz64local

; 452  :             break;
; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  00126	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  00129	85 c0		 test	 eax, eax
  0012b	7e 36		 jle	 SHORT $LN32@unz64local
  0012d	0f 1f 00	 npad	 3
$LL4@unz64local:
  00130	48		 dec	 eax

; 455  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 456  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00131	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  00135	75 15		 jne	 SHORT $LN14@unz64local
  00137	80 7c 30 01 4b	 cmp	 BYTE PTR [eax+esi+1], 75 ; 0000004bH
  0013c	75 0e		 jne	 SHORT $LN14@unz64local
  0013e	80 7c 30 02 05	 cmp	 BYTE PTR [eax+esi+2], 5
  00143	75 07		 jne	 SHORT $LN14@unz64local
  00145	80 7c 30 03 06	 cmp	 BYTE PTR [eax+esi+3], 6
  0014a	74 06		 je	 SHORT $LN22@unz64local
$LN14@unz64local:

; 452  :             break;
; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  0014c	85 c0		 test	 eax, eax
  0014e	7f e0		 jg	 SHORT $LL4@unz64local
  00150	eb 11		 jmp	 SHORT $LN32@unz64local
$LN22@unz64local:

; 457  :             {
; 458  :                 uPosFound = uReadPos+i;

  00152	99		 cdq
  00153	03 45 d4	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  00156	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  00159	13 55 dc	 adc	 edx, DWORD PTR _uReadPos$2$[ebp]

; 459  :                 break;
; 460  :             }
; 461  : 
; 462  :         if (uPosFound!=0)

  0015c	0b c2		 or	 eax, edx
  0015e	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  00161	75 29		 jne	 SHORT $LN37@unz64local
$LN32@unz64local:

; 433  : 
; 434  :     uBackRead = 4;
; 435  :     while (uBackRead<uMaxBack)

  00163	8b 45 d8	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  00166	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00169	8b 7d f8	 mov	 edi, DWORD PTR _uMaxBack$1$[ebp]
  0016c	3b c1		 cmp	 eax, ecx
  0016e	0f 82 2f ff ff
	ff		 jb	 $LL2@unz64local
  00174	77 16		 ja	 SHORT $LN37@unz64local
  00176	3b df		 cmp	 ebx, edi
  00178	0f 82 25 ff ff
	ff		 jb	 $LL2@unz64local
  0017e	eb 0c		 jmp	 SHORT $LN37@unz64local
$LN42@unz64local:
  00180	8b 45 d4	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  00183	89 45 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  00186	8b 45 d0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00189	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
$LN37@unz64local:

; 463  :             break;
; 464  :     }
; 465  :     TRYFREE(buf);

  0018c	56		 push	 esi
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free

; 466  :     return uPosFound;

  00193	8b 45 f4	 mov	 eax, DWORD PTR _uPosFound$2$[ebp]
  00196	83 c4 04	 add	 esp, 4
  00199	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$1$[ebp]

; 467  : }

  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	5b		 pop	 ebx
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c3		 ret	 0
_unz64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_SearchCentralDir64
_TEXT	SEGMENT
_relativeOffset$ = -48					; size = 8
_uPosFound$ = -48					; size = 8
_uReadPos$1$ = -44					; size = 4
_uBackRead$2$ = -40					; size = 4
_uReadPos$2$ = -36					; size = 4
_uSizeFile$1$ = -32					; size = 4
_uSizeFile$2$ = -28					; size = 4
_uPosFound$1$ = -24					; size = 4
_uPosFound$2$ = -20					; size = 4
_uMaxBack$2$ = -16					; size = 4
_filestream$1$ = -12					; size = 4
_uMaxBack$1$ = -8					; size = 4
_uL$ = -8						; size = 4
_pzlib_filefunc_def$1$ = -4				; size = 4
_unz64local_SearchCentralDir64 PROC			; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 481  :     unsigned char* buf;
; 482  :     ZPOS64_T uSizeFile;
; 483  :     ZPOS64_T uBackRead;
; 484  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00009	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000e	8b da		 mov	 ebx, edx
  00010	89 45 f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00013	8b f9		 mov	 edi, ecx
  00015	33 c0		 xor	 eax, eax
  00017	89 5d f4	 mov	 DWORD PTR _filestream$1$[ebp], ebx

; 485  :     ZPOS64_T uPosFound=0;
; 486  :     uLong uL;
; 487  :                 ZPOS64_T relativeOffset;
; 488  : 
; 489  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0001a	6a 02		 push	 2
  0001c	50		 push	 eax
  0001d	0f 57 c0	 xorps	 xmm0, xmm0
  00020	89 7d fc	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], edi
  00023	50		 push	 eax
  00024	89 45 f0	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00027	66 0f 13 45 d0	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  0002c	e8 00 00 00 00	 call	 _call_zseek64
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	74 0b		 je	 SHORT $LN7@unz64local
$LN61@unz64local:

; 490  :         return 0;

  00038	33 c0		 xor	 eax, eax
$LN60@unz64local:
  0003a	33 d2		 xor	 edx, edx

; 573  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN7@unz64local:

; 491  : 
; 492  : 
; 493  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00043	8b d3		 mov	 edx, ebx
  00045	8b cf		 mov	 ecx, edi
  00047	e8 00 00 00 00	 call	 _call_ztell64
  0004c	8b ca		 mov	 ecx, edx
  0004e	89 45 e0	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  00051	89 4d e4	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 494  : 
; 495  :     if (uMaxBack>uSizeFile)

  00054	85 c9		 test	 ecx, ecx
  00056	77 0f		 ja	 SHORT $LN8@unz64local
  00058	72 07		 jb	 SHORT $LN44@unz64local
  0005a	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005f	73 06		 jae	 SHORT $LN8@unz64local
$LN44@unz64local:

; 496  :         uMaxBack = uSizeFile;

  00061	89 45 f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00064	89 4d f0	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN8@unz64local:

; 497  : 
; 498  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00067	68 04 04 00 00	 push	 1028			; 00000404H
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00072	8b f0		 mov	 esi, eax
  00074	83 c4 04	 add	 esp, 4

; 499  :     if (buf==NULL)
; 500  :         return 0;

  00077	33 c0		 xor	 eax, eax
  00079	85 f6		 test	 esi, esi
  0007b	74 bd		 je	 SHORT $LN60@unz64local

; 501  : 
; 502  :     uBackRead = 4;
; 503  :     while (uBackRead<uMaxBack)

  0007d	8b 55 f0	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  00080	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00083	3b c2		 cmp	 eax, edx
  00085	0f 87 f3 01 00
	00		 ja	 $LN53@unz64local
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  0008e	72 08		 jb	 SHORT $LN51@unz64local
  00090	3b d9		 cmp	 ebx, ecx
  00092	0f 83 e6 01 00
	00		 jae	 $LN53@unz64local
$LN51@unz64local:
  00098	8b 7d d4	 mov	 edi, DWORD PTR _uPosFound$[ebp+4]
  0009b	89 7d e8	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  0009e	8b 7d d0	 mov	 edi, DWORD PTR _uPosFound$[ebp]
  000a1	89 7d ec	 mov	 DWORD PTR _uPosFound$2$[ebp], edi
$LL2@unz64local:

; 504  :     {
; 505  :         uLong uReadSize;
; 506  :         ZPOS64_T uReadPos;
; 507  :         int i;
; 508  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a4	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000aa	83 d0 00	 adc	 eax, 0
  000ad	89 45 d8	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000b0	3b c2		 cmp	 eax, edx
  000b2	72 0d		 jb	 SHORT $LN11@unz64local
  000b4	77 04		 ja	 SHORT $LN46@unz64local
  000b6	3b d9		 cmp	 ebx, ecx
  000b8	76 07		 jbe	 SHORT $LN11@unz64local
$LN46@unz64local:

; 509  :             uBackRead = uMaxBack;

  000ba	8b d9		 mov	 ebx, ecx
  000bc	89 55 d8	 mov	 DWORD PTR _uBackRead$2$[ebp], edx
  000bf	8b c2		 mov	 eax, edx
$LN11@unz64local:

; 510  :         else
; 511  :             uBackRead+=BUFREADCOMMENT;
; 512  :         uReadPos = uSizeFile-uBackRead ;

  000c1	8b 4d e0	 mov	 ecx, DWORD PTR _uSizeFile$1$[ebp]
  000c4	8b d1		 mov	 edx, ecx
  000c6	8b 7d e4	 mov	 edi, DWORD PTR _uSizeFile$2$[ebp]
  000c9	2b d3		 sub	 edx, ebx
  000cb	89 55 d4	 mov	 DWORD PTR _uReadPos$1$[ebp], edx
  000ce	1b f8		 sbb	 edi, eax

; 513  : 
; 514  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  000d0	8b 45 e4	 mov	 eax, DWORD PTR _uSizeFile$2$[ebp]
  000d3	2b ca		 sub	 ecx, edx
  000d5	89 7d dc	 mov	 DWORD PTR _uReadPos$2$[ebp], edi
  000d8	1b c7		 sbb	 eax, edi
  000da	85 c0		 test	 eax, eax
  000dc	72 11		 jb	 SHORT $LN29@unz64local
  000de	77 08		 ja	 SHORT $LN47@unz64local
  000e0	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  000e6	76 07		 jbe	 SHORT $LN29@unz64local
$LN47@unz64local:
  000e8	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000ed	eb 05		 jmp	 SHORT $LN30@unz64local
$LN29@unz64local:
  000ef	8b 7d e0	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000f2	2b fa		 sub	 edi, edx
$LN30@unz64local:

; 515  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 516  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000f7	6a 00		 push	 0
  000f9	ff 75 dc	 push	 DWORD PTR _uReadPos$2$[ebp]
  000fc	52		 push	 edx
  000fd	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00100	e8 00 00 00 00	 call	 _call_zseek64
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
  00108	85 c0		 test	 eax, eax
  0010a	75 76		 jne	 SHORT $LN57@unz64local

; 517  :             break;
; 518  : 
; 519  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0010f	57		 push	 edi
  00110	56		 push	 esi
  00111	ff 75 f4	 push	 DWORD PTR _filestream$1$[ebp]
  00114	ff 70 1c	 push	 DWORD PTR [eax+28]
  00117	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0011a	ff d0		 call	 eax
  0011c	83 c4 10	 add	 esp, 16			; 00000010H
  0011f	3b c7		 cmp	 eax, edi
  00121	75 5f		 jne	 SHORT $LN57@unz64local

; 520  :             break;
; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  00123	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  00126	85 c0		 test	 eax, eax
  00128	7e 3d		 jle	 SHORT $LN43@unz64local
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL4@unz64local:
  00130	48		 dec	 eax

; 523  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 524  :                 ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  00131	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  00135	75 15		 jne	 SHORT $LN14@unz64local
  00137	80 7c 30 01 4b	 cmp	 BYTE PTR [eax+esi+1], 75 ; 0000004bH
  0013c	75 0e		 jne	 SHORT $LN14@unz64local
  0013e	80 7c 30 02 06	 cmp	 BYTE PTR [eax+esi+2], 6
  00143	75 07		 jne	 SHORT $LN14@unz64local
  00145	80 7c 30 03 07	 cmp	 BYTE PTR [eax+esi+3], 7
  0014a	74 06		 je	 SHORT $LN33@unz64local
$LN14@unz64local:

; 520  :             break;
; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  0014c	85 c0		 test	 eax, eax
  0014e	7f e0		 jg	 SHORT $LL4@unz64local
  00150	eb 15		 jmp	 SHORT $LN43@unz64local
$LN33@unz64local:

; 525  :             {
; 526  :                 uPosFound = uReadPos+i;

  00152	99		 cdq
  00153	03 45 d4	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  00156	8b fa		 mov	 edi, edx

; 527  :                 break;
; 528  :             }
; 529  : 
; 530  :         if (uPosFound!=0)

  00158	8b c8		 mov	 ecx, eax
  0015a	89 45 ec	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  0015d	13 7d dc	 adc	 edi, DWORD PTR _uReadPos$2$[ebp]
  00160	0b cf		 or	 ecx, edi
  00162	89 7d e8	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  00165	75 1b		 jne	 SHORT $LN57@unz64local
$LN43@unz64local:

; 501  : 
; 502  :     uBackRead = 4;
; 503  :     while (uBackRead<uMaxBack)

  00167	8b 45 d8	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  0016a	8b 55 f0	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  0016d	8b 4d f8	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  00170	3b c2		 cmp	 eax, edx
  00172	0f 82 2c ff ff
	ff		 jb	 $LL2@unz64local
  00178	77 08		 ja	 SHORT $LN57@unz64local
  0017a	3b d9		 cmp	 ebx, ecx
  0017c	0f 82 22 ff ff
	ff		 jb	 $LL2@unz64local
$LN57@unz64local:
  00182	8b 7d fc	 mov	 edi, DWORD PTR _pzlib_filefunc_def$1$[ebp]
$LN48@unz64local:

; 531  :             break;
; 532  :     }
; 533  :     TRYFREE(buf);

  00185	56		 push	 esi
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free

; 534  :     if (uPosFound == 0)

  0018c	8b 55 ec	 mov	 edx, DWORD PTR _uPosFound$2$[ebp]
  0018f	83 c4 04	 add	 esp, 4
  00192	8b 4d e8	 mov	 ecx, DWORD PTR _uPosFound$1$[ebp]
  00195	8b c2		 mov	 eax, edx
  00197	0b c1		 or	 eax, ecx
  00199	0f 84 99 fe ff
	ff		 je	 $LN61@unz64local

; 535  :         return 0;
; 536  : 
; 537  :     /* Zip64 end of central directory locator */
; 538  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0019f	8b 5d f4	 mov	 ebx, DWORD PTR _filestream$1$[ebp]
  001a2	6a 00		 push	 0
  001a4	51		 push	 ecx
  001a5	52		 push	 edx
  001a6	8b d3		 mov	 edx, ebx
  001a8	8b cf		 mov	 ecx, edi
  001aa	e8 00 00 00 00	 call	 _call_zseek64
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b2	85 c0		 test	 eax, eax
  001b4	0f 85 7e fe ff
	ff		 jne	 $LN61@unz64local

; 539  :         return 0;
; 540  : 
; 541  :     /* the signature, already checked */
; 542  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001ba	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  001bd	8b d3		 mov	 edx, ebx
  001bf	50		 push	 eax
  001c0	8b cf		 mov	 ecx, edi
  001c2	e8 00 00 00 00	 call	 _unz64local_getLong
  001c7	83 c4 04	 add	 esp, 4
  001ca	85 c0		 test	 eax, eax
  001cc	0f 85 66 fe ff
	ff		 jne	 $LN61@unz64local

; 543  :         return 0;
; 544  : 
; 545  :     /* number of the disk with the start of the zip64 end of  central directory */
; 546  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001d2	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  001d5	8b d3		 mov	 edx, ebx
  001d7	50		 push	 eax
  001d8	8b cf		 mov	 ecx, edi
  001da	e8 00 00 00 00	 call	 _unz64local_getLong
  001df	83 c4 04	 add	 esp, 4
  001e2	85 c0		 test	 eax, eax
  001e4	0f 85 4e fe ff
	ff		 jne	 $LN61@unz64local

; 547  :         return 0;
; 548  :     if (uL != 0)

  001ea	39 45 f8	 cmp	 DWORD PTR _uL$[ebp], eax
  001ed	0f 85 45 fe ff
	ff		 jne	 $LN61@unz64local

; 549  :         return 0;
; 550  : 
; 551  :     /* relative offset of the zip64 end of central directory record */
; 552  :     if (unz64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=UNZ_OK)

  001f3	8d 45 d0	 lea	 eax, DWORD PTR _relativeOffset$[ebp]
  001f6	8b d3		 mov	 edx, ebx
  001f8	50		 push	 eax
  001f9	8b cf		 mov	 ecx, edi
  001fb	e8 00 00 00 00	 call	 _unz64local_getLong64
  00200	83 c4 04	 add	 esp, 4
  00203	85 c0		 test	 eax, eax
  00205	0f 85 2d fe ff
	ff		 jne	 $LN61@unz64local

; 553  :         return 0;
; 554  : 
; 555  :     /* total number of disks */
; 556  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  0020b	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  0020e	8b d3		 mov	 edx, ebx
  00210	50		 push	 eax
  00211	8b cf		 mov	 ecx, edi
  00213	e8 00 00 00 00	 call	 _unz64local_getLong
  00218	83 c4 04	 add	 esp, 4
  0021b	85 c0		 test	 eax, eax
  0021d	0f 85 15 fe ff
	ff		 jne	 $LN61@unz64local

; 557  :         return 0;
; 558  :     if (uL != 1)

  00223	83 7d f8 01	 cmp	 DWORD PTR _uL$[ebp], 1
  00227	0f 85 0b fe ff
	ff		 jne	 $LN61@unz64local

; 559  :         return 0;
; 560  : 
; 561  :     /* Goto end of central directory record */
; 562  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0022d	8b 75 d4	 mov	 esi, DWORD PTR _relativeOffset$[ebp+4]
  00230	8b d3		 mov	 edx, ebx
  00232	8b 7d d0	 mov	 edi, DWORD PTR _relativeOffset$[ebp]
  00235	8b 5d fc	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00238	8b cb		 mov	 ecx, ebx
  0023a	50		 push	 eax
  0023b	56		 push	 esi
  0023c	57		 push	 edi
  0023d	e8 00 00 00 00	 call	 _call_zseek64
  00242	83 c4 0c	 add	 esp, 12			; 0000000cH
  00245	85 c0		 test	 eax, eax
  00247	0f 85 eb fd ff
	ff		 jne	 $LN61@unz64local

; 563  :         return 0;
; 564  : 
; 565  :      /* the signature */
; 566  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  0024d	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00250	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  00253	50		 push	 eax
  00254	8b cb		 mov	 ecx, ebx
  00256	e8 00 00 00 00	 call	 _unz64local_getLong
  0025b	83 c4 04	 add	 esp, 4
  0025e	85 c0		 test	 eax, eax
  00260	0f 85 d2 fd ff
	ff		 jne	 $LN61@unz64local

; 567  :         return 0;
; 568  : 
; 569  :     if (uL != 0x06064b50)

  00266	81 7d f8 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  0026d	0f 85 c5 fd ff
	ff		 jne	 $LN61@unz64local

; 570  :         return 0;
; 571  : 
; 572  :     return relativeOffset;

  00273	8b c7		 mov	 eax, edi
  00275	8b d6		 mov	 edx, esi

; 573  : }

  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
  00279	5b		 pop	 ebx
  0027a	8b e5		 mov	 esp, ebp
  0027c	5d		 pop	 ebp
  0027d	c3		 ret	 0
$LN53@unz64local:

; 501  : 
; 502  :     uBackRead = 4;
; 503  :     while (uBackRead<uMaxBack)

  0027e	8b 45 d4	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  00281	89 45 e8	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  00284	8b 45 d0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00287	89 45 ec	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  0028a	e9 f6 fe ff ff	 jmp	 $LN48@unz64local
_unz64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenInternal
_TEXT	SEGMENT
_uL$ = -264						; size = 4
_number_disk$ = -260					; size = 4
_uS$1 = -260						; size = 4
_number_disk_with_CD$ = -256				; size = 4
_central_pos$1$ = -252					; size = 4
_central_pos$2$ = -248					; size = 4
_number_entry_CD$ = -248				; size = 8
_uL64$2 = -248						; size = 8
_us$ = -240						; size = 240
_is64bitOpenFunction$ = 8				; size = 4
_unzOpenInternal PROC					; COMDAT
; _path$ = ecx
; _pzlib_filefunc64_32_def$ = edx

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi

; 588  :     unz64_s us;
; 589  :     unz64_s *s;
; 590  :     ZPOS64_T central_pos;
; 591  :     uLong   uL;
; 592  : 
; 593  :     uLong number_disk;          /* number of the current dist, used for
; 594  :                                    spaning ZIP, unsupported, always 0*/
; 595  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 596  :                                    for spaning ZIP, unsupported, always 0*/
; 597  :     ZPOS64_T number_entry_CD;      /* total number of entries in
; 598  :                                    the central dir
; 599  :                                    (same than number_entry on nospan) */
; 600  : 
; 601  :     int err=UNZ_OK;

  0000f	33 ff		 xor	 edi, edi
  00011	8b f1		 mov	 esi, ecx

; 602  : 
; 603  :     if (unz_copyright[0]!=' ')
; 604  :         return NULL;
; 605  : 
; 606  :     us.z_filefunc.zseek32_file = NULL;

  00013	89 7c 24 50	 mov	 DWORD PTR _us$[esp+320], edi

; 607  :     us.z_filefunc.ztell32_file = NULL;

  00017	89 7c 24 4c	 mov	 DWORD PTR _us$[esp+316], edi

; 608  :     if (pzlib_filefunc64_32_def==NULL)

  0001b	85 d2		 test	 edx, edx
  0001d	75 0b		 jne	 SHORT $LN3@unzOpenInt

; 609  :         fill_fopen64_filefunc(&us.z_filefunc.zfile_func64);

  0001f	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00023	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  00028	eb 23		 jmp	 SHORT $LN4@unzOpenInt
$LN3@unzOpenInt:

; 610  :     else
; 611  :         us.z_filefunc = *pzlib_filefunc64_32_def;

  0002a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0002d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00030	89 44 24 50	 mov	 DWORD PTR _us$[esp+320], eax
  00034	0f 11 44 24 28	 movups	 XMMWORD PTR _us$[esp+280], xmm0
  00039	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  0003d	0f 11 44 24 38	 movups	 XMMWORD PTR _us$[esp+296], xmm0
  00042	f3 0f 7e 42 20	 movq	 xmm0, QWORD PTR [edx+32]
  00047	66 0f d6 44 24
	48		 movq	 QWORD PTR _us$[esp+312], xmm0
$LN4@unzOpenInt:

; 612  :     us.is64bitOpenFunction = is64bitOpenFunction;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _is64bitOpenFunction$[ebp]

; 613  : 
; 614  : 
; 615  : 
; 616  :     us.filestream = ZOPEN64(us.z_filefunc,

  00050	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00054	6a 05		 push	 5
  00056	8b d6		 mov	 edx, esi
  00058	89 44 24 58	 mov	 DWORD PTR _us$[esp+328], eax
  0005c	e8 00 00 00 00	 call	 _call_zopen64
  00061	8b d8		 mov	 ebx, eax
  00063	83 c4 04	 add	 esp, 4
  00066	89 5c 24 58	 mov	 DWORD PTR _us$[esp+328], ebx

; 617  :                                                  path,
; 618  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 619  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);
; 620  :     if (us.filestream==NULL)

  0006a	85 db		 test	 ebx, ebx
  0006c	0f 84 a5 03 00
	00		 je	 $LN39@unzOpenInt

; 621  :         return NULL;
; 622  : 
; 623  :     central_pos = unz64local_SearchCentralDir64(&us.z_filefunc,us.filestream);

  00072	8b d3		 mov	 edx, ebx
  00074	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00078	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir64
  0007d	8b f0		 mov	 esi, eax
  0007f	8b c2		 mov	 eax, edx

; 624  :     if (central_pos)

  00081	8b ce		 mov	 ecx, esi
  00083	89 44 24 1c	 mov	 DWORD PTR _central_pos$1$[esp+280], eax
  00087	0b c8		 or	 ecx, eax

; 625  :     {
; 626  :         uLong uS;
; 627  :         ZPOS64_T uL64;
; 628  : 
; 629  :         us.isZip64 = 1;
; 630  : 
; 631  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 632  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00089	8b d3		 mov	 edx, ebx
  0008b	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  0008f	0f 84 72 01 00
	00		 je	 $LN6@unzOpenInt
  00095	6a 00		 push	 0
  00097	50		 push	 eax
  00098	56		 push	 esi
  00099	c7 84 24 1c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR _us$[esp+524], 1
  000a4	e8 00 00 00 00	 call	 _call_zseek64
  000a9	83 c9 ff	 or	 ecx, -1
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  000af	85 c0		 test	 eax, eax

; 633  :         err=UNZ_ERRNO;
; 634  : 
; 635  :         /* the signature, already checked */
; 636  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  000b1	8b d3		 mov	 edx, ebx
  000b3	8d 44 24 10	 lea	 eax, DWORD PTR _uL$[esp+280]
  000b7	0f 45 f9	 cmovne	 edi, ecx
  000ba	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _unz64local_getLong
  000c4	83 c4 04	 add	 esp, 4

; 637  :             err=UNZ_ERRNO;
; 638  : 
; 639  :         /* size of zip64 end of central directory record */
; 640  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&uL64)!=UNZ_OK)

  000c7	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  000cb	85 c0		 test	 eax, eax
  000cd	8b d3		 mov	 edx, ebx
  000cf	b8 ff ff ff ff	 mov	 eax, -1
  000d4	0f 45 f8	 cmovne	 edi, eax
  000d7	8d 44 24 20	 lea	 eax, DWORD PTR _uL64$2[esp+280]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _unz64local_getLong64
  000e1	83 c4 04	 add	 esp, 4

; 641  :             err=UNZ_ERRNO;
; 642  : 
; 643  :         /* version made by */
; 644  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  000e4	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  000e8	85 c0		 test	 eax, eax
  000ea	8b d3		 mov	 edx, ebx
  000ec	b8 ff ff ff ff	 mov	 eax, -1
  000f1	0f 45 f8	 cmovne	 edi, eax
  000f4	8d 44 24 14	 lea	 eax, DWORD PTR _uS$1[esp+280]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _unz64local_getShort
  000fe	83 c4 04	 add	 esp, 4

; 645  :             err=UNZ_ERRNO;
; 646  : 
; 647  :         /* version needed to extract */
; 648  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  00101	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00105	85 c0		 test	 eax, eax
  00107	8b d3		 mov	 edx, ebx
  00109	b8 ff ff ff ff	 mov	 eax, -1
  0010e	0f 45 f8	 cmovne	 edi, eax
  00111	8d 44 24 14	 lea	 eax, DWORD PTR _uS$1[esp+280]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _unz64local_getShort
  0011b	83 c4 04	 add	 esp, 4

; 649  :             err=UNZ_ERRNO;
; 650  : 
; 651  :         /* number of this disk */
; 652  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  0011e	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00122	85 c0		 test	 eax, eax
  00124	8b d3		 mov	 edx, ebx
  00126	b8 ff ff ff ff	 mov	 eax, -1
  0012b	0f 45 f8	 cmovne	 edi, eax
  0012e	8d 44 24 14	 lea	 eax, DWORD PTR _number_disk$[esp+280]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _unz64local_getLong
  00138	83 c4 04	 add	 esp, 4

; 653  :             err=UNZ_ERRNO;
; 654  : 
; 655  :         /* number of the disk with the start of the central directory */
; 656  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  0013b	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  0013f	85 c0		 test	 eax, eax
  00141	8b d3		 mov	 edx, ebx
  00143	b8 ff ff ff ff	 mov	 eax, -1
  00148	0f 45 f8	 cmovne	 edi, eax
  0014b	8d 44 24 18	 lea	 eax, DWORD PTR _number_disk_with_CD$[esp+280]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _unz64local_getLong
  00155	83 c4 04	 add	 esp, 4

; 657  :             err=UNZ_ERRNO;
; 658  : 
; 659  :         /* total number of entries in the central directory on this disk */
; 660  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  00158	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  0015c	85 c0		 test	 eax, eax
  0015e	8b d3		 mov	 edx, ebx
  00160	b8 ff ff ff ff	 mov	 eax, -1
  00165	0f 45 f8	 cmovne	 edi, eax
  00168	8d 44 24 60	 lea	 eax, DWORD PTR _us$[esp+336]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _unz64local_getLong64

; 661  :             err=UNZ_ERRNO;
; 662  : 
; 663  :         /* total number of entries in the central directory */
; 664  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  00172	8b 54 24 5c	 mov	 edx, DWORD PTR _us$[esp+332]
  00176	8d 4c 24 2c	 lea	 ecx, DWORD PTR _us$[esp+284]
  0017a	83 c4 04	 add	 esp, 4
  0017d	bb ff ff ff ff	 mov	 ebx, -1
  00182	85 c0		 test	 eax, eax
  00184	8d 44 24 20	 lea	 eax, DWORD PTR _number_entry_CD$[esp+280]
  00188	0f 45 fb	 cmovne	 edi, ebx
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 _unz64local_getLong64
  00191	83 c4 04	 add	 esp, 4
  00194	85 c0		 test	 eax, eax

; 665  :             err=UNZ_ERRNO;
; 666  : 
; 667  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 668  :             (number_disk_with_CD!=0) ||

  00196	8b 44 24 20	 mov	 eax, DWORD PTR _number_entry_CD$[esp+280]
  0019a	0f 45 fb	 cmovne	 edi, ebx
  0019d	3b 44 24 60	 cmp	 eax, DWORD PTR _us$[esp+336]
  001a1	75 18		 jne	 SHORT $LN18@unzOpenInt
  001a3	8b 44 24 24	 mov	 eax, DWORD PTR _number_entry_CD$[esp+284]
  001a7	3b 44 24 64	 cmp	 eax, DWORD PTR _us$[esp+340]
  001ab	75 0e		 jne	 SHORT $LN18@unzOpenInt
  001ad	83 7c 24 18 00	 cmp	 DWORD PTR _number_disk_with_CD$[esp+280], 0
  001b2	75 07		 jne	 SHORT $LN18@unzOpenInt
  001b4	83 7c 24 14 00	 cmp	 DWORD PTR _number_disk$[esp+280], 0
  001b9	74 05		 je	 SHORT $LN17@unzOpenInt
$LN18@unzOpenInt:

; 669  :             (number_disk!=0))
; 670  :             err=UNZ_BADZIPFILE;

  001bb	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN17@unzOpenInt:

; 671  : 
; 672  :         /* size of the central directory */
; 673  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  001c0	8b 54 24 58	 mov	 edx, DWORD PTR _us$[esp+328]
  001c4	8d 84 24 98 00
	00 00		 lea	 eax, DWORD PTR _us$[esp+392]
  001cb	50		 push	 eax
  001cc	8d 4c 24 2c	 lea	 ecx, DWORD PTR _us$[esp+284]
  001d0	e8 00 00 00 00	 call	 _unz64local_getLong64

; 674  :             err=UNZ_ERRNO;
; 675  : 
; 676  :         /* offset of start of central directory with respect to the
; 677  :           starting disk number */
; 678  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  001d5	8b 54 24 5c	 mov	 edx, DWORD PTR _us$[esp+332]
  001d9	8d 4c 24 2c	 lea	 ecx, DWORD PTR _us$[esp+284]
  001dd	83 c4 04	 add	 esp, 4
  001e0	85 c0		 test	 eax, eax
  001e2	8d 84 24 a0 00
	00 00		 lea	 eax, DWORD PTR _us$[esp+400]
  001e9	0f 45 fb	 cmovne	 edi, ebx
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _unz64local_getLong64
  001f2	83 c4 04	 add	 esp, 4

; 679  :             err=UNZ_ERRNO;
; 680  : 
; 681  :         us.gi.size_comment = 0;

  001f5	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR _us$[esp+344], 0
  001fd	85 c0		 test	 eax, eax
  001ff	0f 45 fb	 cmovne	 edi, ebx

; 682  :     }

  00202	e9 62 01 00 00	 jmp	 $LN32@unzOpenInt
$LN6@unzOpenInt:

; 683  :     else
; 684  :     {
; 685  :         central_pos = unz64local_SearchCentralDir(&us.z_filefunc,us.filestream);

  00207	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir
  0020c	8b c8		 mov	 ecx, eax
  0020e	89 54 24 1c	 mov	 DWORD PTR _central_pos$1$[esp+280], edx

; 686  :         if (central_pos==0)

  00212	0b c2		 or	 eax, edx
  00214	89 4c 24 20	 mov	 DWORD PTR _central_pos$2$[esp+280], ecx
  00218	75 03		 jne	 SHORT $LN21@unzOpenInt

; 687  :             err=UNZ_ERRNO;

  0021a	83 cf ff	 or	 edi, -1
$LN21@unzOpenInt:

; 688  : 
; 689  :         us.isZip64 = 0;
; 690  : 
; 691  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 692  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0021d	6a 00		 push	 0
  0021f	52		 push	 edx
  00220	51		 push	 ecx
  00221	8b d3		 mov	 edx, ebx
  00223	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _us$[esp+524], 0
  0022e	8d 4c 24 34	 lea	 ecx, DWORD PTR _us$[esp+292]
  00232	e8 00 00 00 00	 call	 _call_zseek64
  00237	83 c4 0c	 add	 esp, 12			; 0000000cH

; 693  :             err=UNZ_ERRNO;
; 694  : 
; 695  :         /* the signature, already checked */
; 696  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0023a	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  0023e	83 ce ff	 or	 esi, -1
  00241	8b d3		 mov	 edx, ebx
  00243	85 c0		 test	 eax, eax
  00245	8d 44 24 10	 lea	 eax, DWORD PTR _uL$[esp+280]
  00249	50		 push	 eax
  0024a	0f 45 fe	 cmovne	 edi, esi
  0024d	e8 00 00 00 00	 call	 _unz64local_getLong
  00252	83 c4 04	 add	 esp, 4

; 697  :             err=UNZ_ERRNO;
; 698  : 
; 699  :         /* number of this disk */
; 700  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  00255	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00259	85 c0		 test	 eax, eax
  0025b	8b d3		 mov	 edx, ebx
  0025d	8d 44 24 14	 lea	 eax, DWORD PTR _number_disk$[esp+280]
  00261	0f 45 fe	 cmovne	 edi, esi
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 _unz64local_getShort
  0026a	83 c4 04	 add	 esp, 4

; 701  :             err=UNZ_ERRNO;
; 702  : 
; 703  :         /* number of the disk with the start of the central directory */
; 704  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  0026d	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00271	85 c0		 test	 eax, eax
  00273	8b d3		 mov	 edx, ebx
  00275	8d 44 24 18	 lea	 eax, DWORD PTR _number_disk_with_CD$[esp+280]
  00279	0f 45 fe	 cmovne	 edi, esi
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 _unz64local_getShort
  00282	83 c4 04	 add	 esp, 4

; 705  :             err=UNZ_ERRNO;
; 706  : 
; 707  :         /* total number of entries in the central dir on this disk */
; 708  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00285	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00289	85 c0		 test	 eax, eax
  0028b	8b d3		 mov	 edx, ebx
  0028d	8d 44 24 10	 lea	 eax, DWORD PTR _uL$[esp+280]
  00291	0f 45 fe	 cmovne	 edi, esi
  00294	50		 push	 eax
  00295	e8 00 00 00 00	 call	 _unz64local_getShort
  0029a	83 c4 04	 add	 esp, 4

; 709  :             err=UNZ_ERRNO;
; 710  :         us.gi.number_entry = uL;

  0029d	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR _us$[esp+340], 0
  002a5	85 c0		 test	 eax, eax

; 711  : 
; 712  :         /* total number of entries in the central dir */
; 713  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002a7	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  002ab	8d 44 24 10	 lea	 eax, DWORD PTR _uL$[esp+280]
  002af	8b d3		 mov	 edx, ebx
  002b1	0f 45 fe	 cmovne	 edi, esi
  002b4	8b 74 24 10	 mov	 esi, DWORD PTR _uL$[esp+280]
  002b8	50		 push	 eax
  002b9	89 74 24 64	 mov	 DWORD PTR _us$[esp+340], esi
  002bd	e8 00 00 00 00	 call	 _unz64local_getShort
  002c2	83 c4 04	 add	 esp, 4
  002c5	85 c0		 test	 eax, eax
  002c7	b8 ff ff ff ff	 mov	 eax, -1
  002cc	0f 45 f8	 cmovne	 edi, eax

; 714  :             err=UNZ_ERRNO;
; 715  :         number_entry_CD = uL;

  002cf	33 c0		 xor	 eax, eax

; 716  : 
; 717  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 718  :             (number_disk_with_CD!=0) ||

  002d1	39 74 24 10	 cmp	 DWORD PTR _uL$[esp+280], esi
  002d5	75 10		 jne	 SHORT $LN29@unzOpenInt
  002d7	85 c0		 test	 eax, eax
  002d9	75 0c		 jne	 SHORT $LN29@unzOpenInt
  002db	39 44 24 18	 cmp	 DWORD PTR _number_disk_with_CD$[esp+280], eax
  002df	75 06		 jne	 SHORT $LN29@unzOpenInt
  002e1	39 44 24 14	 cmp	 DWORD PTR _number_disk$[esp+280], eax
  002e5	74 05		 je	 SHORT $LN28@unzOpenInt
$LN29@unzOpenInt:

; 719  :             (number_disk!=0))
; 720  :             err=UNZ_BADZIPFILE;

  002e7	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN28@unzOpenInt:

; 721  : 
; 722  :         /* size of the central directory */
; 723  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002ec	8d 44 24 10	 lea	 eax, DWORD PTR _uL$[esp+280]
  002f0	8b d3		 mov	 edx, ebx
  002f2	50		 push	 eax
  002f3	8d 4c 24 2c	 lea	 ecx, DWORD PTR _us$[esp+284]
  002f7	e8 00 00 00 00	 call	 _unz64local_getLong
  002fc	83 c4 04	 add	 esp, 4

; 724  :             err=UNZ_ERRNO;
; 725  :         us.size_central_dir = uL;

  002ff	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _us$[esp+396], 0
  0030a	85 c0		 test	 eax, eax

; 726  : 
; 727  :         /* offset of start of central directory with respect to the
; 728  :             starting disk number */
; 729  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0030c	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00310	8b 44 24 10	 mov	 eax, DWORD PTR _uL$[esp+280]
  00314	be ff ff ff ff	 mov	 esi, -1
  00319	89 84 24 98 00
	00 00		 mov	 DWORD PTR _us$[esp+392], eax
  00320	8b d3		 mov	 edx, ebx
  00322	8d 44 24 10	 lea	 eax, DWORD PTR _uL$[esp+280]
  00326	0f 45 fe	 cmovne	 edi, esi
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 _unz64local_getLong
  0032f	83 c4 04	 add	 esp, 4

; 730  :             err=UNZ_ERRNO;
; 731  :         us.offset_central_dir = uL;

  00332	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _us$[esp+404], 0
  0033d	85 c0		 test	 eax, eax

; 732  : 
; 733  :         /* zipfile comment length */
; 734  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  0033f	8d 4c 24 28	 lea	 ecx, DWORD PTR _us$[esp+280]
  00343	8b 44 24 10	 mov	 eax, DWORD PTR _uL$[esp+280]
  00347	8b d3		 mov	 edx, ebx
  00349	89 84 24 a0 00
	00 00		 mov	 DWORD PTR _us$[esp+400], eax
  00350	0f 45 fe	 cmovne	 edi, esi
  00353	8d 44 24 68	 lea	 eax, DWORD PTR _us$[esp+344]
  00357	50		 push	 eax
  00358	e8 00 00 00 00	 call	 _unz64local_getShort
  0035d	83 c4 04	 add	 esp, 4
  00360	85 c0		 test	 eax, eax
  00362	0f 45 fe	 cmovne	 edi, esi
  00365	8b 74 24 20	 mov	 esi, DWORD PTR _central_pos$2$[esp+280]
$LN32@unzOpenInt:

; 735  :             err=UNZ_ERRNO;
; 736  :     }
; 737  : 
; 738  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&

  00369	8b 9c 24 a0 00
	00 00		 mov	 ebx, DWORD PTR _us$[esp+400]
  00370	8b cb		 mov	 ecx, ebx
  00372	03 8c 24 98 00
	00 00		 add	 ecx, DWORD PTR _us$[esp+392]
  00379	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR _us$[esp+404]
  00380	13 84 24 9c 00
	00 00		 adc	 eax, DWORD PTR _us$[esp+396]
  00387	8b 54 24 1c	 mov	 edx, DWORD PTR _central_pos$1$[esp+280]
  0038b	3b d0		 cmp	 edx, eax
  0038d	72 79		 jb	 SHORT $LN37@unzOpenInt
  0038f	77 04		 ja	 SHORT $LN38@unzOpenInt
  00391	3b f1		 cmp	 esi, ecx
  00393	72 73		 jb	 SHORT $LN37@unzOpenInt
$LN38@unzOpenInt:

; 739  :         (err==UNZ_OK))
; 740  :         err=UNZ_BADZIPFILE;
; 741  : 
; 742  :     if (err!=UNZ_OK)

  00395	85 ff		 test	 edi, edi
  00397	75 6f		 jne	 SHORT $LN37@unzOpenInt

; 745  :         return NULL;
; 746  :     }
; 747  : 
; 748  :     us.byte_before_the_zipfile = central_pos -

  00399	8b ce		 mov	 ecx, esi

; 749  :                             (us.offset_central_dir+us.size_central_dir);
; 750  :     us.central_pos = central_pos;

  0039b	89 b4 24 90 00
	00 00		 mov	 DWORD PTR _us$[esp+384], esi
  003a2	2b cb		 sub	 ecx, ebx
  003a4	89 94 24 94 00
	00 00		 mov	 DWORD PTR _us$[esp+388], edx
  003ab	8b c2		 mov	 eax, edx

; 751  :     us.pfile_in_zip_read = NULL;

  003ad	89 bc 24 08 01
	00 00		 mov	 DWORD PTR _us$[esp+504], edi
  003b4	1b 84 24 a4 00
	00 00		 sbb	 eax, DWORD PTR _us$[esp+404]
  003bb	2b 8c 24 98 00
	00 00		 sub	 ecx, DWORD PTR _us$[esp+392]

; 752  :     us.encrypted = 0;
; 753  : 
; 754  : 
; 755  :     s=(unz64_s*)ALLOC(sizeof(unz64_s));

  003c2	68 f0 00 00 00	 push	 240			; 000000f0H
  003c7	1b 84 24 a0 00
	00 00		 sbb	 eax, DWORD PTR _us$[esp+400]
  003ce	89 4c 24 74	 mov	 DWORD PTR _us$[esp+356], ecx
  003d2	89 44 24 78	 mov	 DWORD PTR _us$[esp+360], eax
  003d6	89 bc 24 10 01
	00 00		 mov	 DWORD PTR _us$[esp+512], edi
  003dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  003e3	8b d8		 mov	 ebx, eax
  003e5	83 c4 04	 add	 esp, 4

; 756  :     if( s != NULL)

  003e8	85 db		 test	 ebx, ebx
  003ea	74 13		 je	 SHORT $LN35@unzOpenInt

; 757  :     {
; 758  :         *s=us;

  003ec	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  003f1	8d 74 24 28	 lea	 esi, DWORD PTR _us$[esp+280]
  003f5	8b fb		 mov	 edi, ebx
  003f7	f3 a5		 rep movsd

; 759  :         unzGoToFirstFile((unzFile)s);

  003f9	53		 push	 ebx
  003fa	e8 00 00 00 00	 call	 _unzGoToFirstFile@4
$LN35@unzOpenInt:

; 760  :     }
; 761  :     return (unzFile)s;

  003ff	8b c3		 mov	 eax, ebx

; 762  : }

  00401	5f		 pop	 edi
  00402	5e		 pop	 esi
  00403	5b		 pop	 ebx
  00404	8b e5		 mov	 esp, ebp
  00406	5d		 pop	 ebp
  00407	c3		 ret	 0
$LN37@unzOpenInt:

; 743  :     {
; 744  :         ZCLOSE64(us.z_filefunc, us.filestream);

  00408	ff 74 24 58	 push	 DWORD PTR _us$[esp+328]
  0040c	ff 74 24 48	 push	 DWORD PTR _us$[esp+312]
  00410	ff 54 24 44	 call	 DWORD PTR _us$[esp+308]
  00414	83 c4 08	 add	 esp, 8
$LN39@unzOpenInt:

; 762  : }

  00417	5f		 pop	 edi
  00418	5e		 pop	 esi
  00419	33 c0		 xor	 eax, eax
  0041b	5b		 pop	 ebx
  0041c	8b e5		 mov	 esp, ebp
  0041e	5d		 pop	 ebp
  0041f	c3		 ret	 0
_unzOpenInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen2@8
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc32_def$ = 12				; size = 4
_unzOpen2@8 PROC					; COMDAT

; 767  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 768  :     if (pzlib_filefunc32_def != NULL)

  00006	8b 55 0c	 mov	 edx, DWORD PTR _pzlib_filefunc32_def$[ebp]
  00009	83 ec 30	 sub	 esp, 48			; 00000030H
  0000c	85 d2		 test	 edx, edx
  0000e	74 1e		 je	 SHORT $LN2@unzOpen2

; 769  :     {
; 770  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 771  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00010	8d 4c 24 04	 lea	 ecx, DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+48]
  00014	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32

; 772  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 0);

  00019	8b d1		 mov	 edx, ecx

; 773  :     }
; 774  :     else
; 775  :         return unzOpenInternal(path, NULL, 0);

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 _unzOpenInternal
  00025	83 c4 04	 add	 esp, 4

; 776  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@unzOpen2:

; 773  :     }
; 774  :     else
; 775  :         return unzOpenInternal(path, NULL, 0);

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00031	33 d2		 xor	 edx, edx
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _unzOpenInternal
  00039	83 c4 04	 add	 esp, 4

; 776  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
_unzOpen2@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen2_64@8
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc_def$ = 12				; size = 4
_unzOpen2_64@8 PROC					; COMDAT

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 781  :     if (pzlib_filefunc_def != NULL)

  00006	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00009	83 ec 30	 sub	 esp, 48			; 00000030H

; 782  :     {
; 783  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 784  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;
; 785  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;
; 786  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;
; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  0000f	6a 01		 push	 1
  00011	85 c0		 test	 eax, eax
  00013	74 33		 je	 SHORT $LN2@unzOpen2_6
  00015	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00018	8d 54 24 08	 lea	 edx, DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+52]
  0001c	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+88], 0
  00024	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+92], 0
  0002c	0f 11 44 24 08	 movups	 XMMWORD PTR _zlib_filefunc64_32_def_fill$1[esp+52], xmm0
  00031	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00035	0f 11 44 24 18	 movups	 XMMWORD PTR _zlib_filefunc64_32_def_fill$1[esp+68], xmm0

; 788  :     }
; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  0003a	e8 00 00 00 00	 call	 _unzOpenInternal
  0003f	83 c4 04	 add	 esp, 4

; 791  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN2@unzOpen2_6:

; 788  :     }
; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  00048	33 d2		 xor	 edx, edx
  0004a	e8 00 00 00 00	 call	 _unzOpenInternal
  0004f	83 c4 04	 add	 esp, 4

; 791  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
_unzOpen2_64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen@4
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen@4 PROC						; COMDAT

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 795  :     return unzOpenInternal(path, NULL, 0);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	6a 00		 push	 0
  0000a	e8 00 00 00 00	 call	 _unzOpenInternal
  0000f	83 c4 04	 add	 esp, 4

; 796  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
_unzOpen@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen64@4
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen64@4 PROC					; COMDAT

; 799  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 800  :     return unzOpenInternal(path, NULL, 1);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 _unzOpenInternal
  0000f	83 c4 04	 add	 esp, 4

; 801  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
_unzOpen64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzClose@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzClose@4 PROC					; COMDAT

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 810  :     unz64_s* s;
; 811  :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN2@unzClose

; 812  :         return UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  0000e	5e		 pop	 esi

; 821  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@unzClose:

; 813  :     s=(unz64_s*)file;
; 814  : 
; 815  :     if (s->pfile_in_zip_read!=NULL)

  00013	83 be e0 00 00
	00 00		 cmp	 DWORD PTR [esi+224], 0
  0001a	74 06		 je	 SHORT $LN3@unzClose

; 816  :         unzCloseCurrentFile(file);

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN3@unzClose:

; 817  : 
; 818  :     ZCLOSE64(s->z_filefunc, s->filestream);

  00022	ff 76 30	 push	 DWORD PTR [esi+48]
  00025	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00028	ff 76 1c	 push	 DWORD PTR [esi+28]
  0002b	ff d0		 call	 eax

; 819  :     TRYFREE(s);

  0002d	56		 push	 esi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  :     return UNZ_OK;

  00037	33 c0		 xor	 eax, eax
  00039	5e		 pop	 esi

; 821  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
_unzClose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalInfo64@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pglobal_info$ = 12					; size = 4
_unzGetGlobalInfo64@8 PROC				; COMDAT

; 829  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 830  :     unz64_s* s;
; 831  :     if (file==NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 09		 jne	 SHORT $LN2@unzGetGlob

; 832  :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 836  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN2@unzGetGlob:

; 833  :     s=(unz64_s*)file;
; 834  :     *pglobal_info=s->gi;

  00013	0f 10 40 38	 movups	 xmm0, XMMWORD PTR [eax+56]
  00017	8b 45 0c	 mov	 eax, DWORD PTR _pglobal_info$[ebp]
  0001a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 835  :     return UNZ_OK;

  0001d	33 c0		 xor	 eax, eax

; 836  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
_unzGetGlobalInfo64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalInfo@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pglobal_info32$ = 12					; size = 4
_unzGetGlobalInfo@8 PROC				; COMDAT

; 839  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 840  :     unz64_s* s;
; 841  :     if (file==NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	75 07		 jne	 SHORT $LN2@unzGetGlob

; 842  :         return UNZ_PARAMERROR;

  0000a	8d 42 9a	 lea	 eax, DWORD PTR [edx-102]

; 848  : }

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
$LN2@unzGetGlob:

; 843  :     s=(unz64_s*)file;
; 844  :     /* to do : check if number_entry is not truncated */
; 845  :     pglobal_info32->number_entry = (uLong)s->gi.number_entry;

  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _pglobal_info32$[ebp]
  00014	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :     pglobal_info32->size_comment = s->gi.size_comment;

  00019	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0001c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 847  :     return UNZ_OK;

  0001f	33 c0		 xor	 eax, eax

; 848  : }

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
_unzGetGlobalInfo@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_DosDateToTmuDate
_TEXT	SEGMENT
_ptm$1$ = -4						; size = 4
_ulDosDate$ = 8						; size = 8
_unz64local_DosDateToTmuDate PROC			; COMDAT
; _ptm$ = ecx

; 853  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 854  :     ZPOS64_T uDate;
; 855  :     uDate = (ZPOS64_T)(ulDosDate>>16);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _ulDosDate$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _ulDosDate$[ebp+4]
  0000d	8b f3		 mov	 esi, ebx
  0000f	8b d7		 mov	 edx, edi
  00011	89 4d fc	 mov	 DWORD PTR _ptm$1$[ebp], ecx
  00014	0f ac d6 10	 shrd	 esi, edx, 16

; 856  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  00018	8b c6		 mov	 eax, esi
  0001a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0001d	83 e0 1f	 and	 eax, 31			; 0000001fH
  00020	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 857  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  00023	8b ce		 mov	 ecx, esi
  00025	8b c2		 mov	 eax, edx
  00027	0f ac c1 05	 shrd	 ecx, eax, 5

; 858  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  0002b	0f ac d6 09	 shrd	 esi, edx, 9
  0002f	c1 e8 05	 shr	 eax, 5
  00032	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00035	8b 45 fc	 mov	 eax, DWORD PTR _ptm$1$[ebp]
  00038	49		 dec	 ecx
  00039	c1 ea 09	 shr	 edx, 9
  0003c	83 e6 7f	 and	 esi, 127		; 0000007fH
  0003f	8b d0		 mov	 edx, eax
  00041	81 c6 bc 07 00
	00		 add	 esi, 1980		; 000007bcH
  00047	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 859  : 
; 860  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  0004a	8b cb		 mov	 ecx, ebx
  0004c	8b c7		 mov	 eax, edi
  0004e	0f ac c1 0b	 shrd	 ecx, eax, 11
  00052	89 72 14	 mov	 DWORD PTR [edx+20], esi
  00055	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00058	83 e1 1f	 and	 ecx, 31			; 0000001fH

; 861  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  0005b	8b c3		 mov	 eax, ebx
  0005d	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00060	0f ac f8 05	 shrd	 eax, edi, 5

; 862  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  00064	83 e3 1f	 and	 ebx, 31			; 0000001fH
  00067	c1 ef 05	 shr	 edi, 5
  0006a	83 e0 3f	 and	 eax, 63			; 0000003fH

; 863  : }

  0006d	5f		 pop	 edi
  0006e	03 db		 add	 ebx, ebx
  00070	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00073	5e		 pop	 esi
  00074	89 1a		 mov	 DWORD PTR [edx], ebx
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_unz64local_DosDateToTmuDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_GetCurrentFileInfoInternal
_TEXT	SEGMENT
_lSeek$1$ = -132					; size = 4
_uL$ = -132						; size = 4
_uSizeRead$1$ = -128					; size = 4
_uSizeRead$1$ = -128					; size = 4
_uSizeRead$1$ = -128					; size = 4
_dataSize$1 = -128					; size = 4
_file_info_internal$2$ = -124				; size = 4
_acc$1$ = -120						; size = 4
_uMagic$ = -120						; size = 4
_headerId$2 = -116					; size = 4
_pfile_info$1$ = -112					; size = 4
_uL$3 = -108						; size = 4
_file_info_internal$ = -104				; size = 8
_file_info$ = -96					; size = 88
_pfile_info_internal$ = 8				; size = 4
_szFileName$ = 12					; size = 4
_fileNameBufferSize$ = 16				; size = 4
_extraField$ = 20					; size = 4
_extraFieldBufferSize$ = 24				; size = 4
_szComment$ = 28					; size = 4
_commentBufferSize$ = 32				; size = 4
_unz64local_GetCurrentFileInfoInternal PROC		; COMDAT
; _file$ = ecx
; _pfile_info$ = edx

; 889  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
  00010	89 54 24 20	 mov	 DWORD PTR _pfile_info$1$[esp+144], edx

; 890  :     unz64_s* s;
; 891  :     unz_file_info64 file_info;
; 892  :     unz_file_info64_internal file_info_internal;
; 893  :     int err=UNZ_OK;

  00014	33 f6		 xor	 esi, esi

; 894  :     uLong uMagic;
; 895  :     long lSeek=0;
; 896  :     uLong uL;
; 897  : 
; 898  :     if (file==NULL)

  00016	85 ff		 test	 edi, edi
  00018	75 09		 jne	 SHORT $LN4@unz64local

; 899  :         return UNZ_PARAMERROR;

  0001a	8d 41 9a	 lea	 eax, DWORD PTR [ecx-102]

; 1115 : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN4@unz64local:

; 900  :     s=(unz64_s*)file;
; 901  :     if (ZSEEK64(s->z_filefunc, s->filestream,
; 902  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 903  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00023	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00026	03 4f 48	 add	 ecx, DWORD PTR [edi+72]
  00029	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  0002c	13 47 4c	 adc	 eax, DWORD PTR [edi+76]
  0002f	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00032	6a 00		 push	 0
  00034	50		 push	 eax
  00035	51		 push	 ecx
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 _call_zseek64
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	85 c0		 test	 eax, eax
  00042	74 05		 je	 SHORT $LN72@unz64local

; 904  :         err=UNZ_ERRNO;

  00044	83 ce ff	 or	 esi, -1

; 905  : 
; 906  : 
; 907  :     /* we check the magic */
; 908  :     if (err==UNZ_OK)

  00047	eb 2b		 jmp	 SHORT $LN9@unz64local
$LN72@unz64local:

; 909  :     {
; 910  :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00049	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0004c	8d 44 24 18	 lea	 eax, DWORD PTR _uMagic$[esp+144]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 _unz64local_getLong
  00058	83 c4 04	 add	 esp, 4
  0005b	85 c0		 test	 eax, eax
  0005d	74 05		 je	 SHORT $LN7@unz64local

; 911  :             err=UNZ_ERRNO;

  0005f	83 ce ff	 or	 esi, -1
  00062	eb 10		 jmp	 SHORT $LN9@unz64local
$LN7@unz64local:

; 912  :         else if (uMagic!=0x02014b50)

  00064	81 7c 24 18 50
	4b 01 02	 cmp	 DWORD PTR _uMagic$[esp+144], 33639248 ; 02014b50H
  0006c	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00071	0f 45 f0	 cmovne	 esi, eax
$LN9@unz64local:

; 913  :             err=UNZ_BADZIPFILE;
; 914  :     }
; 915  : 
; 916  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  00074	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00077	8d 44 24 30	 lea	 eax, DWORD PTR _file_info$[esp+144]
  0007b	50		 push	 eax
  0007c	8b cf		 mov	 ecx, edi
  0007e	e8 00 00 00 00	 call	 _unz64local_getShort

; 917  :         err=UNZ_ERRNO;
; 918  : 
; 919  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  00083	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00086	83 c9 ff	 or	 ecx, -1
  00089	83 c4 04	 add	 esp, 4
  0008c	85 c0		 test	 eax, eax
  0008e	8d 44 24 34	 lea	 eax, DWORD PTR _file_info$[esp+148]
  00092	0f 45 f1	 cmovne	 esi, ecx
  00095	8b cf		 mov	 ecx, edi
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _unz64local_getShort

; 920  :         err=UNZ_ERRNO;
; 921  : 
; 922  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  0009d	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  000a0	83 c4 04	 add	 esp, 4
  000a3	85 c0		 test	 eax, eax
  000a5	8b cf		 mov	 ecx, edi
  000a7	b8 ff ff ff ff	 mov	 eax, -1
  000ac	0f 45 f0	 cmovne	 esi, eax
  000af	8d 44 24 38	 lea	 eax, DWORD PTR _file_info$[esp+152]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _unz64local_getShort

; 923  :         err=UNZ_ERRNO;
; 924  : 
; 925  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  000b9	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  000bc	83 c4 04	 add	 esp, 4
  000bf	85 c0		 test	 eax, eax
  000c1	8b cf		 mov	 ecx, edi
  000c3	b8 ff ff ff ff	 mov	 eax, -1
  000c8	0f 45 f0	 cmovne	 esi, eax
  000cb	8d 44 24 3c	 lea	 eax, DWORD PTR _file_info$[esp+156]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 _unz64local_getShort

; 926  :         err=UNZ_ERRNO;
; 927  : 
; 928  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  000d5	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  000d8	83 c4 04	 add	 esp, 4
  000db	85 c0		 test	 eax, eax
  000dd	8b cf		 mov	 ecx, edi
  000df	b8 ff ff ff ff	 mov	 eax, -1
  000e4	0f 45 f0	 cmovne	 esi, eax
  000e7	8d 44 24 40	 lea	 eax, DWORD PTR _file_info$[esp+160]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 _unz64local_getLong
  000f1	83 c4 04	 add	 esp, 4

; 929  :         err=UNZ_ERRNO;
; 930  : 
; 931  :     unz64local_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  000f4	8d 4c 24 70	 lea	 ecx, DWORD PTR _file_info$[esp+208]
  000f8	85 c0		 test	 eax, eax
  000fa	b8 ff ff ff ff	 mov	 eax, -1
  000ff	0f 45 f0	 cmovne	 esi, eax
  00102	6a 00		 push	 0
  00104	ff 74 24 44	 push	 DWORD PTR _file_info$[esp+164]
  00108	e8 00 00 00 00	 call	 _unz64local_DosDateToTmuDate

; 932  : 
; 933  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  0010d	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00110	8d 44 24 4c	 lea	 eax, DWORD PTR _file_info$[esp+172]
  00114	50		 push	 eax
  00115	8b cf		 mov	 ecx, edi
  00117	e8 00 00 00 00	 call	 _unz64local_getLong

; 934  :         err=UNZ_ERRNO;
; 935  : 
; 936  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0011c	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00122	85 c0		 test	 eax, eax
  00124	8b cf		 mov	 ecx, edi
  00126	b8 ff ff ff ff	 mov	 eax, -1
  0012b	0f 45 f0	 cmovne	 esi, eax
  0012e	8d 44 24 0c	 lea	 eax, DWORD PTR _uL$[esp+144]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _unz64local_getLong

; 937  :         err=UNZ_ERRNO;
; 938  :     file_info.compressed_size = uL;
; 939  : 
; 940  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00138	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0013b	83 c4 04	 add	 esp, 4
  0013e	85 c0		 test	 eax, eax
  00140	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR _file_info$[esp+172], 0
  00148	b8 ff ff ff ff	 mov	 eax, -1
  0014d	8b cf		 mov	 ecx, edi
  0014f	0f 45 f0	 cmovne	 esi, eax
  00152	8b 44 24 0c	 mov	 eax, DWORD PTR _uL$[esp+144]
  00156	89 44 24 48	 mov	 DWORD PTR _file_info$[esp+168], eax
  0015a	8d 44 24 0c	 lea	 eax, DWORD PTR _uL$[esp+144]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _unz64local_getLong
  00164	83 c4 04	 add	 esp, 4
  00167	85 c0		 test	 eax, eax
  00169	b8 ff ff ff ff	 mov	 eax, -1
  0016e	0f 45 f0	 cmovne	 esi, eax

; 941  :         err=UNZ_ERRNO;
; 942  :     file_info.uncompressed_size = uL;

  00171	8b 44 24 0c	 mov	 eax, DWORD PTR _uL$[esp+144]
  00175	89 44 24 50	 mov	 DWORD PTR _file_info$[esp+176], eax

; 943  : 
; 944  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  00179	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0017c	8d 44 24 58	 lea	 eax, DWORD PTR _file_info$[esp+184]
  00180	50		 push	 eax
  00181	8b cf		 mov	 ecx, edi
  00183	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR _file_info$[esp+184], 0
  0018b	e8 00 00 00 00	 call	 _unz64local_getShort

; 945  :         err=UNZ_ERRNO;
; 946  : 
; 947  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  00190	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00193	83 c4 04	 add	 esp, 4
  00196	85 c0		 test	 eax, eax
  00198	8b cf		 mov	 ecx, edi
  0019a	b8 ff ff ff ff	 mov	 eax, -1
  0019f	0f 45 f0	 cmovne	 esi, eax
  001a2	8d 44 24 5c	 lea	 eax, DWORD PTR _file_info$[esp+188]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 _unz64local_getShort

; 948  :         err=UNZ_ERRNO;
; 949  : 
; 950  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  001ac	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  001af	83 c4 04	 add	 esp, 4
  001b2	85 c0		 test	 eax, eax
  001b4	8b cf		 mov	 ecx, edi
  001b6	b8 ff ff ff ff	 mov	 eax, -1
  001bb	0f 45 f0	 cmovne	 esi, eax
  001be	8d 44 24 60	 lea	 eax, DWORD PTR _file_info$[esp+192]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _unz64local_getShort

; 951  :         err=UNZ_ERRNO;
; 952  : 
; 953  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  001c8	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  001cb	83 c4 04	 add	 esp, 4
  001ce	85 c0		 test	 eax, eax
  001d0	8b cf		 mov	 ecx, edi
  001d2	b8 ff ff ff ff	 mov	 eax, -1
  001d7	0f 45 f0	 cmovne	 esi, eax
  001da	8d 44 24 64	 lea	 eax, DWORD PTR _file_info$[esp+196]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 _unz64local_getShort

; 954  :         err=UNZ_ERRNO;
; 955  : 
; 956  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  001e4	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  001e7	83 c4 04	 add	 esp, 4
  001ea	85 c0		 test	 eax, eax
  001ec	8b cf		 mov	 ecx, edi
  001ee	b8 ff ff ff ff	 mov	 eax, -1
  001f3	0f 45 f0	 cmovne	 esi, eax
  001f6	8d 44 24 68	 lea	 eax, DWORD PTR _file_info$[esp+200]
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 _unz64local_getShort

; 957  :         err=UNZ_ERRNO;
; 958  : 
; 959  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  00200	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00203	83 c4 04	 add	 esp, 4
  00206	85 c0		 test	 eax, eax
  00208	8b cf		 mov	 ecx, edi
  0020a	b8 ff ff ff ff	 mov	 eax, -1
  0020f	0f 45 f0	 cmovne	 esi, eax
  00212	8d 44 24 6c	 lea	 eax, DWORD PTR _file_info$[esp+204]
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _unz64local_getLong

; 960  :         err=UNZ_ERRNO;
; 961  : 
; 962  :                 // relative offset of local header
; 963  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0021c	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0021f	83 c4 04	 add	 esp, 4
  00222	85 c0		 test	 eax, eax
  00224	8b cf		 mov	 ecx, edi
  00226	b8 ff ff ff ff	 mov	 eax, -1
  0022b	0f 45 f0	 cmovne	 esi, eax
  0022e	8d 44 24 0c	 lea	 eax, DWORD PTR _uL$[esp+144]
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 _unz64local_getLong

; 964  :         err=UNZ_ERRNO;
; 965  :     file_info_internal.offset_curfile = uL;
; 966  : 
; 967  :     lSeek+=file_info.size_filename;

  00238	8b 4c 24 5c	 mov	 ecx, DWORD PTR _file_info$[esp+188]
  0023c	83 c4 04	 add	 esp, 4
  0023f	85 c0		 test	 eax, eax
  00241	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _file_info_internal$[esp+148], 0
  00249	b8 ff ff ff ff	 mov	 eax, -1
  0024e	0f 45 f0	 cmovne	 esi, eax
  00251	8b 44 24 0c	 mov	 eax, DWORD PTR _uL$[esp+144]
  00255	89 44 24 14	 mov	 DWORD PTR _file_info_internal$2$[esp+144], eax
  00259	89 44 24 28	 mov	 DWORD PTR _file_info_internal$[esp+144], eax
  0025d	89 4c 24 0c	 mov	 DWORD PTR _lSeek$1$[esp+144], ecx

; 968  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  00261	85 f6		 test	 esi, esi
  00263	0f 85 f7 00 00
	00		 jne	 $LN30@unz64local
  00269	8b 55 0c	 mov	 edx, DWORD PTR _szFileName$[ebp]
  0026c	85 d2		 test	 edx, edx
  0026e	74 53		 je	 SHORT $LN73@unz64local

; 969  :     {
; 970  :         uLong uSizeRead ;
; 971  :         if (file_info.size_filename<fileNameBufferSize)

  00270	8b 45 10	 mov	 eax, DWORD PTR _fileNameBufferSize$[ebp]
  00273	3b c8		 cmp	 ecx, eax
  00275	73 0c		 jae	 SHORT $LN26@unz64local

; 972  :         {
; 973  :             *(szFileName+file_info.size_filename)='\0';

  00277	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0

; 974  :             uSizeRead = file_info.size_filename;

  0027b	8b d1		 mov	 edx, ecx
  0027d	89 54 24 10	 mov	 DWORD PTR _uSizeRead$1$[esp+144], edx

; 975  :         }

  00281	eb 06		 jmp	 SHORT $LN27@unz64local
$LN26@unz64local:

; 976  :         else
; 977  :             uSizeRead = fileNameBufferSize;

  00283	8b d0		 mov	 edx, eax
  00285	89 44 24 10	 mov	 DWORD PTR _uSizeRead$1$[esp+144], eax
$LN27@unz64local:

; 978  : 
; 979  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  00289	85 c9		 test	 ecx, ecx
  0028b	74 28		 je	 SHORT $LN29@unz64local
  0028d	85 c0		 test	 eax, eax
  0028f	74 24		 je	 SHORT $LN29@unz64local

; 980  :             if (ZREAD64(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  00291	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00294	52		 push	 edx
  00295	ff 75 0c	 push	 DWORD PTR _szFileName$[ebp]
  00298	ff 77 30	 push	 DWORD PTR [edi+48]
  0029b	ff 77 1c	 push	 DWORD PTR [edi+28]
  0029e	ff d0		 call	 eax
  002a0	8b 54 24 20	 mov	 edx, DWORD PTR _uSizeRead$1$[esp+160]
  002a4	83 c4 10	 add	 esp, 16			; 00000010H
  002a7	8b 4c 24 0c	 mov	 ecx, DWORD PTR _lSeek$1$[esp+144]
  002ab	3b c2		 cmp	 eax, edx
  002ad	b8 ff ff ff ff	 mov	 eax, -1
  002b2	0f 45 f0	 cmovne	 esi, eax
$LN29@unz64local:

; 981  :                 err=UNZ_ERRNO;
; 982  :         lSeek -= uSizeRead;

  002b5	2b ca		 sub	 ecx, edx
  002b7	89 4c 24 0c	 mov	 DWORD PTR _lSeek$1$[esp+144], ecx

; 983  :     }
; 984  : 
; 985  :     // Read extrafield
; 986  :     if ((err==UNZ_OK) && (extraField!=NULL))

  002bb	85 f6		 test	 esi, esi
  002bd	0f 85 9d 00 00
	00		 jne	 $LN30@unz64local
$LN73@unz64local:
  002c3	83 7d 14 00	 cmp	 DWORD PTR _extraField$[ebp], 0
  002c7	0f 84 93 00 00
	00		 je	 $LN30@unz64local

; 987  :     {
; 988  :         ZPOS64_T uSizeRead ;
; 989  :         if (file_info.size_file_extra<extraFieldBufferSize)

  002cd	8b 44 24 5c	 mov	 eax, DWORD PTR _file_info$[esp+188]
  002d1	8b 55 18	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]

; 990  :             uSizeRead = file_info.size_file_extra;

  002d4	89 44 24 10	 mov	 DWORD PTR _uSizeRead$1$[esp+144], eax
  002d8	3b c2		 cmp	 eax, edx
  002da	72 04		 jb	 SHORT $LN33@unz64local

; 991  :         else
; 992  :             uSizeRead = extraFieldBufferSize;

  002dc	89 54 24 10	 mov	 DWORD PTR _uSizeRead$1$[esp+144], edx
$LN33@unz64local:

; 993  : 
; 994  :         if (lSeek!=0)

  002e0	85 c9		 test	 ecx, ecx
  002e2	74 2e		 je	 SHORT $LN36@unz64local

; 995  :         {
; 996  :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  002e4	8b c1		 mov	 eax, ecx
  002e6	8b cf		 mov	 ecx, edi
  002e8	99		 cdq
  002e9	6a 01		 push	 1
  002eb	52		 push	 edx
  002ec	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 _call_zseek64

; 997  :                 lSeek=0;

  002f5	8b 55 18	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  002f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fb	85 c0		 test	 eax, eax
  002fd	8b 44 24 5c	 mov	 eax, DWORD PTR _file_info$[esp+188]
  00301	75 08		 jne	 SHORT $LN35@unz64local
  00303	33 c9		 xor	 ecx, ecx
  00305	89 4c 24 0c	 mov	 DWORD PTR _lSeek$1$[esp+144], ecx
  00309	eb 07		 jmp	 SHORT $LN36@unz64local
$LN35@unz64local:
  0030b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _lSeek$1$[esp+144]

; 998  :             else
; 999  :                 err=UNZ_ERRNO;

  0030f	83 ce ff	 or	 esi, -1
$LN36@unz64local:

; 1000 :         }
; 1001 : 
; 1002 :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  00312	85 c0		 test	 eax, eax
  00314	74 3c		 je	 SHORT $LN80@unz64local
  00316	85 d2		 test	 edx, edx
  00318	74 38		 je	 SHORT $LN80@unz64local

; 1003 :             if (ZREAD64(s->z_filefunc, s->filestream,extraField,(uLong)uSizeRead)!=uSizeRead)

  0031a	ff 74 24 10	 push	 DWORD PTR _uSizeRead$1$[esp+144]
  0031e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00321	ff 75 14	 push	 DWORD PTR _extraField$[ebp]
  00324	ff 77 30	 push	 DWORD PTR [edi+48]
  00327	ff 77 1c	 push	 DWORD PTR [edi+28]
  0032a	ff d0		 call	 eax
  0032c	8b 54 24 20	 mov	 edx, DWORD PTR _uSizeRead$1$[esp+160]
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	33 c9		 xor	 ecx, ecx
  00335	3b c2		 cmp	 eax, edx
  00337	75 04		 jne	 SHORT $LN77@unz64local
  00339	85 c9		 test	 ecx, ecx
  0033b	74 03		 je	 SHORT $LN78@unz64local
$LN77@unz64local:

; 1004 :                 err=UNZ_ERRNO;

  0033d	83 ce ff	 or	 esi, -1
$LN78@unz64local:
  00340	8b 44 24 5c	 mov	 eax, DWORD PTR _file_info$[esp+188]
  00344	8b 4c 24 0c	 mov	 ecx, DWORD PTR _lSeek$1$[esp+144]

; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00348	2b c2		 sub	 eax, edx
  0034a	03 c8		 add	 ecx, eax

; 1007 :     }

  0034c	8b 44 24 5c	 mov	 eax, DWORD PTR _file_info$[esp+188]
  00350	eb 14		 jmp	 SHORT $LN81@unz64local
$LN80@unz64local:
  00352	8b 54 24 10	 mov	 edx, DWORD PTR _uSizeRead$1$[esp+144]

; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00356	2b c2		 sub	 eax, edx
  00358	03 c8		 add	 ecx, eax

; 1007 :     }

  0035a	8b 44 24 5c	 mov	 eax, DWORD PTR _file_info$[esp+188]
  0035e	eb 06		 jmp	 SHORT $LN81@unz64local
$LN30@unz64local:

; 1008 :     else
; 1009 :         lSeek += file_info.size_file_extra;

  00360	8b 44 24 5c	 mov	 eax, DWORD PTR _file_info$[esp+188]
  00364	03 c8		 add	 ecx, eax
$LN81@unz64local:
  00366	89 4c 24 0c	 mov	 DWORD PTR _lSeek$1$[esp+144], ecx

; 1010 : 
; 1011 : 
; 1012 :     if ((err==UNZ_OK) && (file_info.size_file_extra != 0))

  0036a	85 f6		 test	 esi, esi
  0036c	0f 85 3e 02 00
	00		 jne	 $LN66@unz64local
  00372	85 c0		 test	 eax, eax
  00374	0f 84 63 01 00
	00		 je	 $LN74@unz64local

; 1013 :     {
; 1014 :                                 uLong acc = 0;
; 1015 : 
; 1016 :         // since lSeek now points to after the extra field we need to move back
; 1017 :         lSeek -= file_info.size_file_extra;

  0037a	2b c8		 sub	 ecx, eax
  0037c	89 74 24 18	 mov	 DWORD PTR _acc$1$[esp+144], esi
  00380	89 4c 24 0c	 mov	 DWORD PTR _lSeek$1$[esp+144], ecx

; 1018 : 
; 1019 :         if (lSeek!=0)

  00384	74 25		 je	 SHORT $LN68@unz64local

; 1020 :         {
; 1021 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00386	8b c1		 mov	 eax, ecx
  00388	8b cf		 mov	 ecx, edi
  0038a	99		 cdq
  0038b	6a 01		 push	 1
  0038d	52		 push	 edx
  0038e	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00391	50		 push	 eax
  00392	e8 00 00 00 00	 call	 _call_zseek64
  00397	83 c4 0c	 add	 esp, 12			; 0000000cH
  0039a	85 c0		 test	 eax, eax

; 1022 :                 lSeek=0;

  0039c	8b 44 24 5c	 mov	 eax, DWORD PTR _file_info$[esp+188]
  003a0	75 06		 jne	 SHORT $LN41@unz64local
  003a2	89 74 24 0c	 mov	 DWORD PTR _lSeek$1$[esp+144], esi
  003a6	eb 03		 jmp	 SHORT $LN68@unz64local
$LN41@unz64local:

; 1023 :             else
; 1024 :                 err=UNZ_ERRNO;

  003a8	83 ce ff	 or	 esi, -1
$LN68@unz64local:

; 1025 :         }
; 1026 : 
; 1027 :         while(acc < file_info.size_file_extra)

  003ab	85 c0		 test	 eax, eax
  003ad	0f 84 22 01 00
	00		 je	 $LN3@unz64local
$LL2@unz64local:

; 1028 :         {
; 1029 :             uLong headerId;
; 1030 :                                                 uLong dataSize;
; 1031 : 
; 1032 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&headerId) != UNZ_OK)

  003b3	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  003b6	8d 44 24 1c	 lea	 eax, DWORD PTR _headerId$2[esp+144]
  003ba	50		 push	 eax
  003bb	8b cf		 mov	 ecx, edi
  003bd	e8 00 00 00 00	 call	 _unz64local_getShort

; 1033 :                 err=UNZ_ERRNO;
; 1034 : 
; 1035 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&dataSize) != UNZ_OK)

  003c2	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  003c5	83 c4 04	 add	 esp, 4
  003c8	85 c0		 test	 eax, eax
  003ca	8b cf		 mov	 ecx, edi
  003cc	b8 ff ff ff ff	 mov	 eax, -1
  003d1	0f 45 f0	 cmovne	 esi, eax
  003d4	8d 44 24 10	 lea	 eax, DWORD PTR _dataSize$1[esp+144]
  003d8	50		 push	 eax
  003d9	e8 00 00 00 00	 call	 _unz64local_getShort
  003de	83 c4 04	 add	 esp, 4
  003e1	85 c0		 test	 eax, eax
  003e3	b8 ff ff ff ff	 mov	 eax, -1
  003e8	0f 45 f0	 cmovne	 esi, eax

; 1036 :                 err=UNZ_ERRNO;
; 1037 : 
; 1038 :             /* ZIP64 extra fields */
; 1039 :             if (headerId == 0x0001)

  003eb	83 7c 24 1c 01	 cmp	 DWORD PTR _headerId$2[esp+144], 1
  003f0	0f 85 a7 00 00
	00		 jne	 $LN45@unz64local

; 1040 :             {
; 1041 :                                                         uLong uL;
; 1042 : 
; 1043 :                                                                 if(file_info.uncompressed_size == MAXU32)

  003f6	39 44 24 50	 cmp	 DWORD PTR _file_info$[esp+176], eax
  003fa	75 23		 jne	 SHORT $LN48@unz64local
  003fc	83 7c 24 54 00	 cmp	 DWORD PTR _file_info$[esp+180], 0
  00401	75 1c		 jne	 SHORT $LN48@unz64local

; 1044 :                                                                 {
; 1045 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  00403	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00406	8d 44 24 50	 lea	 eax, DWORD PTR _file_info$[esp+176]
  0040a	50		 push	 eax
  0040b	8b cf		 mov	 ecx, edi
  0040d	e8 00 00 00 00	 call	 _unz64local_getLong64
  00412	83 c4 04	 add	 esp, 4
  00415	85 c0		 test	 eax, eax
  00417	b8 ff ff ff ff	 mov	 eax, -1
  0041c	0f 45 f0	 cmovne	 esi, eax
$LN48@unz64local:

; 1046 :                                                                                         err=UNZ_ERRNO;
; 1047 :                                                                 }
; 1048 : 
; 1049 :                                                                 if(file_info.compressed_size == MAXU32)

  0041f	83 7c 24 48 ff	 cmp	 DWORD PTR _file_info$[esp+168], -1
  00424	75 23		 jne	 SHORT $LN50@unz64local
  00426	83 7c 24 4c 00	 cmp	 DWORD PTR _file_info$[esp+172], 0
  0042b	75 1c		 jne	 SHORT $LN50@unz64local

; 1050 :                                                                 {
; 1051 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  0042d	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00430	8d 44 24 48	 lea	 eax, DWORD PTR _file_info$[esp+168]
  00434	50		 push	 eax
  00435	8b cf		 mov	 ecx, edi
  00437	e8 00 00 00 00	 call	 _unz64local_getLong64
  0043c	83 c4 04	 add	 esp, 4
  0043f	85 c0		 test	 eax, eax
  00441	b8 ff ff ff ff	 mov	 eax, -1
  00446	0f 45 f0	 cmovne	 esi, eax
$LN50@unz64local:

; 1052 :                                                                                   err=UNZ_ERRNO;
; 1053 :                                                                 }
; 1054 : 
; 1055 :                                                                 if(file_info_internal.offset_curfile == MAXU32)

  00449	83 7c 24 14 ff	 cmp	 DWORD PTR _file_info_internal$2$[esp+144], -1
  0044e	75 2b		 jne	 SHORT $LN52@unz64local
  00450	83 7c 24 2c 00	 cmp	 DWORD PTR _file_info_internal$[esp+148], 0
  00455	75 24		 jne	 SHORT $LN52@unz64local

; 1056 :                                                                 {
; 1057 :                                                                         /* Relative Header offset */
; 1058 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  00457	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0045a	8d 44 24 28	 lea	 eax, DWORD PTR _file_info_internal$[esp+144]
  0045e	50		 push	 eax
  0045f	8b cf		 mov	 ecx, edi
  00461	e8 00 00 00 00	 call	 _unz64local_getLong64
  00466	83 c4 04	 add	 esp, 4
  00469	85 c0		 test	 eax, eax
  0046b	b8 ff ff ff ff	 mov	 eax, -1
  00470	0f 45 f0	 cmovne	 esi, eax
  00473	8b 44 24 28	 mov	 eax, DWORD PTR _file_info_internal$[esp+144]
  00477	89 44 24 14	 mov	 DWORD PTR _file_info_internal$2$[esp+144], eax
$LN52@unz64local:

; 1059 :                                                                                 err=UNZ_ERRNO;
; 1060 :                                                                 }
; 1061 : 
; 1062 :                                                                 if(file_info.disk_num_start == MAXU32)

  0047b	83 7c 24 64 ff	 cmp	 DWORD PTR _file_info$[esp+196], -1
  00480	75 3a		 jne	 SHORT $LN55@unz64local

; 1063 :                                                                 {
; 1064 :                                                                         /* Disk Start Number */
; 1065 :                                                                         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00482	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00485	8d 44 24 24	 lea	 eax, DWORD PTR _uL$3[esp+144]
  00489	50		 push	 eax
  0048a	8b cf		 mov	 ecx, edi
  0048c	e8 00 00 00 00	 call	 _unz64local_getLong
  00491	83 c4 04	 add	 esp, 4
  00494	85 c0		 test	 eax, eax
  00496	74 24		 je	 SHORT $LN55@unz64local

; 1066 :                                                                                 err=UNZ_ERRNO;

  00498	83 ce ff	 or	 esi, -1

; 1067 :                                                                 }
; 1068 : 
; 1069 :             }

  0049b	eb 1f		 jmp	 SHORT $LN55@unz64local
$LN45@unz64local:

; 1070 :             else
; 1071 :             {
; 1072 :                 if (ZSEEK64(s->z_filefunc, s->filestream,dataSize,ZLIB_FILEFUNC_SEEK_CUR)!=0)

  0049d	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  004a0	8b cf		 mov	 ecx, edi
  004a2	6a 01		 push	 1
  004a4	6a 00		 push	 0
  004a6	ff 74 24 18	 push	 DWORD PTR _dataSize$1[esp+152]
  004aa	e8 00 00 00 00	 call	 _call_zseek64
  004af	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b2	85 c0		 test	 eax, eax
  004b4	b8 ff ff ff ff	 mov	 eax, -1
  004b9	0f 45 f0	 cmovne	 esi, eax
$LN55@unz64local:

; 1073 :                     err=UNZ_ERRNO;
; 1074 :             }
; 1075 : 
; 1076 :             acc += 2 + 2 + dataSize;

  004bc	8b 44 24 18	 mov	 eax, DWORD PTR _acc$1$[esp+144]
  004c0	83 c0 04	 add	 eax, 4
  004c3	03 44 24 10	 add	 eax, DWORD PTR _dataSize$1[esp+144]
  004c7	89 44 24 18	 mov	 DWORD PTR _acc$1$[esp+144], eax
  004cb	3b 44 24 5c	 cmp	 eax, DWORD PTR _file_info$[esp+188]
  004cf	0f 82 de fe ff
	ff		 jb	 $LL2@unz64local
$LN3@unz64local:

; 1077 :         }
; 1078 :     }
; 1079 : 
; 1080 :     if ((err==UNZ_OK) && (szComment!=NULL))

  004d5	85 f6		 test	 esi, esi
  004d7	0f 85 d3 00 00
	00		 jne	 $LN66@unz64local
$LN74@unz64local:
  004dd	8b 55 1c	 mov	 edx, DWORD PTR _szComment$[ebp]
  004e0	85 d2		 test	 edx, edx
  004e2	74 76		 je	 SHORT $LN75@unz64local

; 1081 :     {
; 1082 :         uLong uSizeRead ;
; 1083 :         if (file_info.size_file_comment<commentBufferSize)

  004e4	8b 4d 20	 mov	 ecx, DWORD PTR _commentBufferSize$[ebp]
  004e7	8b 44 24 60	 mov	 eax, DWORD PTR _file_info$[esp+192]
  004eb	3b c1		 cmp	 eax, ecx
  004ed	73 0a		 jae	 SHORT $LN58@unz64local

; 1084 :         {
; 1085 :             *(szComment+file_info.size_file_comment)='\0';

  004ef	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 1086 :             uSizeRead = file_info.size_file_comment;

  004f3	89 44 24 10	 mov	 DWORD PTR _uSizeRead$1$[esp+144], eax

; 1087 :         }

  004f7	eb 04		 jmp	 SHORT $LN59@unz64local
$LN58@unz64local:

; 1088 :         else
; 1089 :             uSizeRead = commentBufferSize;

  004f9	89 4c 24 10	 mov	 DWORD PTR _uSizeRead$1$[esp+144], ecx
$LN59@unz64local:

; 1090 : 
; 1091 :         if (lSeek!=0)

  004fd	8b 44 24 0c	 mov	 eax, DWORD PTR _lSeek$1$[esp+144]
  00501	85 c0		 test	 eax, eax
  00503	74 22		 je	 SHORT $LN62@unz64local

; 1092 :         {
; 1093 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00505	99		 cdq
  00506	8b cf		 mov	 ecx, edi
  00508	6a 01		 push	 1
  0050a	52		 push	 edx
  0050b	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0050e	50		 push	 eax
  0050f	e8 00 00 00 00	 call	 _call_zseek64
  00514	8b 4d 20	 mov	 ecx, DWORD PTR _commentBufferSize$[ebp]
  00517	83 c4 0c	 add	 esp, 12			; 0000000cH
  0051a	8b 55 1c	 mov	 edx, DWORD PTR _szComment$[ebp]
  0051d	85 c0		 test	 eax, eax
  0051f	b8 ff ff ff ff	 mov	 eax, -1
  00524	0f 45 f0	 cmovne	 esi, eax
$LN62@unz64local:

; 1094 :                 lSeek=0;
; 1095 :             else
; 1096 :                 err=UNZ_ERRNO;
; 1097 :         }
; 1098 : 
; 1099 :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  00527	83 7c 24 60 00	 cmp	 DWORD PTR _file_info$[esp+192], 0
  0052c	76 28		 jbe	 SHORT $LN64@unz64local
  0052e	85 c9		 test	 ecx, ecx
  00530	74 24		 je	 SHORT $LN64@unz64local

; 1100 :             if (ZREAD64(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  00532	ff 74 24 10	 push	 DWORD PTR _uSizeRead$1$[esp+144]
  00536	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00539	52		 push	 edx
  0053a	ff 77 30	 push	 DWORD PTR [edi+48]
  0053d	ff 77 1c	 push	 DWORD PTR [edi+28]
  00540	ff d0		 call	 eax
  00542	83 c4 10	 add	 esp, 16			; 00000010H
  00545	3b 44 24 10	 cmp	 eax, DWORD PTR _uSizeRead$1$[esp+144]
  00549	74 0b		 je	 SHORT $LN64@unz64local

; 1101 :                 err=UNZ_ERRNO;

  0054b	83 ce ff	 or	 esi, -1

; 1113 : 
; 1114 :     return err;

  0054e	8b c6		 mov	 eax, esi

; 1115 : }

  00550	5f		 pop	 edi
  00551	5e		 pop	 esi
  00552	8b e5		 mov	 esp, ebp
  00554	5d		 pop	 ebp
  00555	c3		 ret	 0
$LN64@unz64local:

; 1102 :         lSeek+=file_info.size_file_comment - uSizeRead;
; 1103 :     }
; 1104 :     else
; 1105 :         lSeek+=file_info.size_file_comment;
; 1106 : 
; 1107 : 
; 1108 :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  00556	85 f6		 test	 esi, esi
  00558	75 56		 jne	 SHORT $LN66@unz64local
$LN75@unz64local:
  0055a	8b 44 24 20	 mov	 eax, DWORD PTR _pfile_info$1$[esp+144]
  0055e	85 c0		 test	 eax, eax
  00560	74 3a		 je	 SHORT $LN76@unz64local

; 1109 :         *pfile_info=file_info;

  00562	0f 10 44 24 30	 movups	 xmm0, XMMWORD PTR _file_info$[esp+144]
  00567	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0056a	0f 10 44 24 40	 movups	 xmm0, XMMWORD PTR _file_info$[esp+160]
  0056f	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00573	0f 10 44 24 50	 movups	 xmm0, XMMWORD PTR _file_info$[esp+176]
  00578	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  0057c	0f 10 44 24 60	 movups	 xmm0, XMMWORD PTR _file_info$[esp+192]
  00581	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0
  00585	0f 10 44 24 70	 movups	 xmm0, XMMWORD PTR _file_info$[esp+208]
  0058a	0f 11 40 40	 movups	 XMMWORD PTR [eax+64], xmm0
  0058e	f3 0f 7e 84 24
	80 00 00 00	 movq	 xmm0, QWORD PTR _file_info$[esp+224]
  00597	66 0f d6 40 50	 movq	 QWORD PTR [eax+80], xmm0
$LN76@unz64local:

; 1110 : 
; 1111 :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  0059c	8b 4d 08	 mov	 ecx, DWORD PTR _pfile_info_internal$[ebp]
  0059f	85 c9		 test	 ecx, ecx
  005a1	74 0d		 je	 SHORT $LN66@unz64local

; 1112 :         *pfile_info_internal=file_info_internal;

  005a3	8b 44 24 14	 mov	 eax, DWORD PTR _file_info_internal$2$[esp+144]
  005a7	89 01		 mov	 DWORD PTR [ecx], eax
  005a9	8b 44 24 2c	 mov	 eax, DWORD PTR _file_info_internal$[esp+148]
  005ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN66@unz64local:

; 1115 : }

  005b0	5f		 pop	 edi
  005b1	8b c6		 mov	 eax, esi
  005b3	5e		 pop	 esi
  005b4	8b e5		 mov	 esp, ebp
  005b6	5d		 pop	 ebp
  005b7	c3		 ret	 0
_unz64local_GetCurrentFileInfoInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileInfo64@32
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo64@32 PROC			; COMDAT

; 1129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1130 :     return unz64local_GetCurrentFileInfoInternal(file,pfile_info,NULL,

  00003	ff 75 24	 push	 DWORD PTR _commentBufferSize$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  00009	ff 75 20	 push	 DWORD PTR _szComment$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000f	ff 75 1c	 push	 DWORD PTR _extraFieldBufferSize$[ebp]
  00012	ff 75 18	 push	 DWORD PTR _extraField$[ebp]
  00015	ff 75 14	 push	 DWORD PTR _fileNameBufferSize$[ebp]
  00018	ff 75 10	 push	 DWORD PTR _szFileName$[ebp]
  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00022	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1131 :                                                 szFileName,fileNameBufferSize,
; 1132 :                                                 extraField,extraFieldBufferSize,
; 1133 :                                                 szComment,commentBufferSize);
; 1134 : }

  00025	5d		 pop	 ebp
  00026	c2 20 00	 ret	 32			; 00000020H
_unzGetCurrentFileInfo64@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileInfo@32
_TEXT	SEGMENT
_file_info64$ = -88					; size = 88
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo@32 PROC				; COMDAT

; 1141 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 1142 :     int err;
; 1143 :     unz_file_info64 file_info64;
; 1144 :     err = unz64local_GetCurrentFileInfoInternal(file,&file_info64,NULL,

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000c	8d 54 24 04	 lea	 edx, DWORD PTR _file_info64$[esp+92]
  00010	56		 push	 esi
  00011	ff 75 24	 push	 DWORD PTR _commentBufferSize$[ebp]
  00014	ff 75 20	 push	 DWORD PTR _szComment$[ebp]
  00017	ff 75 1c	 push	 DWORD PTR _extraFieldBufferSize$[ebp]
  0001a	ff 75 18	 push	 DWORD PTR _extraField$[ebp]
  0001d	ff 75 14	 push	 DWORD PTR _fileNameBufferSize$[ebp]
  00020	ff 75 10	 push	 DWORD PTR _szFileName$[ebp]
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0002a	8b f0		 mov	 esi, eax
  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1145 :                                                 szFileName,fileNameBufferSize,
; 1146 :                                                 extraField,extraFieldBufferSize,
; 1147 :                                                 szComment,commentBufferSize);
; 1148 :     if ((err==UNZ_OK) && (pfile_info != NULL))

  0002f	85 f6		 test	 esi, esi
  00031	75 7e		 jne	 SHORT $LN2@unzGetCurr
  00033	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  00036	85 d2		 test	 edx, edx
  00038	74 77		 je	 SHORT $LN2@unzGetCurr

; 1149 :     {
; 1150 :         pfile_info->version = file_info64.version;
; 1151 :         pfile_info->version_needed = file_info64.version_needed;

  0003a	8b 44 24 0c	 mov	 eax, DWORD PTR _file_info64$[esp+100]

; 1152 :         pfile_info->flag = file_info64.flag;
; 1153 :         pfile_info->compression_method = file_info64.compression_method;
; 1154 :         pfile_info->dosDate = file_info64.dosDate;
; 1155 :         pfile_info->crc = file_info64.crc;
; 1156 : 
; 1157 :         pfile_info->size_filename = file_info64.size_filename;
; 1158 :         pfile_info->size_file_extra = file_info64.size_file_extra;
; 1159 :         pfile_info->size_file_comment = file_info64.size_file_comment;
; 1160 : 
; 1161 :         pfile_info->disk_num_start = file_info64.disk_num_start;
; 1162 :         pfile_info->internal_fa = file_info64.internal_fa;
; 1163 :         pfile_info->external_fa = file_info64.external_fa;
; 1164 : 
; 1165 :         pfile_info->tmu_date = file_info64.tmu_date,

  0003e	0f 10 44 24 48	 movups	 xmm0, XMMWORD PTR _file_info64$[esp+160]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _file_info64$[esp+104]
  0004a	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0004d	8b 44 24 14	 mov	 eax, DWORD PTR _file_info64$[esp+108]
  00051	8b 4c 24 08	 mov	 ecx, DWORD PTR _file_info64$[esp+96]
  00055	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00058	8b 44 24 18	 mov	 eax, DWORD PTR _file_info64$[esp+112]
  0005c	89 42 10	 mov	 DWORD PTR [edx+16], eax
  0005f	8b 44 24 1c	 mov	 eax, DWORD PTR _file_info64$[esp+116]
  00063	89 42 14	 mov	 DWORD PTR [edx+20], eax
  00066	8b 44 24 30	 mov	 eax, DWORD PTR _file_info64$[esp+136]
  0006a	89 42 20	 mov	 DWORD PTR [edx+32], eax
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR _file_info64$[esp+140]
  00071	89 42 24	 mov	 DWORD PTR [edx+36], eax
  00074	8b 44 24 38	 mov	 eax, DWORD PTR _file_info64$[esp+144]
  00078	89 42 28	 mov	 DWORD PTR [edx+40], eax
  0007b	8b 44 24 3c	 mov	 eax, DWORD PTR _file_info64$[esp+148]
  0007f	89 42 2c	 mov	 DWORD PTR [edx+44], eax
  00082	8b 44 24 40	 mov	 eax, DWORD PTR _file_info64$[esp+152]
  00086	89 42 30	 mov	 DWORD PTR [edx+48], eax
  00089	8b 44 24 44	 mov	 eax, DWORD PTR _file_info64$[esp+156]
  0008d	89 42 34	 mov	 DWORD PTR [edx+52], eax
  00090	8b 44 24 20	 mov	 eax, DWORD PTR _file_info64$[esp+120]
  00094	0f 11 42 38	 movups	 XMMWORD PTR [edx+56], xmm0
  00098	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 1166 : 
; 1167 : 
; 1168 :         pfile_info->compressed_size = (uLong)file_info64.compressed_size;
; 1169 :         pfile_info->uncompressed_size = (uLong)file_info64.uncompressed_size;

  0009b	8b 44 24 28	 mov	 eax, DWORD PTR _file_info64$[esp+128]
  0009f	f3 0f 7e 44 24
	58		 movq	 xmm0, QWORD PTR _file_info64$[esp+176]
  000a5	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 1170 : 
; 1171 :     }
; 1172 :     return err;

  000a8	8b c6		 mov	 eax, esi
  000aa	89 0a		 mov	 DWORD PTR [edx], ecx
  000ac	66 0f d6 42 48	 movq	 QWORD PTR [edx+72], xmm0
$LN2@unzGetCurr:

; 1173 : }

  000b1	5e		 pop	 esi
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 20 00	 ret	 32			; 00000020H
_unzGetCurrentFileInfo@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToFirstFile@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGoToFirstFile@4 PROC				; COMDAT

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1180 :     int err=UNZ_OK;
; 1181 :     unz64_s* s;
; 1182 :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN2@unzGoToFir

; 1183 :         return UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]

; 1192 : }

  0000e	5e		 pop	 esi
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@unzGoToFir:

; 1184 :     s=(unz64_s*)file;
; 1185 :     s->pos_in_central_dir=s->offset_central_dir;

  00013	8b 46 78	 mov	 eax, DWORD PTR [esi+120]

; 1186 :     s->num_file=0;
; 1187 :     err=unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00016	8d 96 80 00 00
	00		 lea	 edx, DWORD PTR [esi+128]
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	6a 00		 push	 0
  00024	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00027	8b ce		 mov	 ecx, esi
  00029	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  0002c	6a 00		 push	 0
  0002e	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00031	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00041	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00048	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0004d	8b c8		 mov	 ecx, eax
  0004f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1188 :                                              &s->cur_file_info_internal,
; 1189 :                                              NULL,0,NULL,0,NULL,0);
; 1190 :     s->current_file_ok = (err == UNZ_OK);

  00052	33 c0		 xor	 eax, eax
  00054	85 c9		 test	 ecx, ecx
  00056	0f 94 c0	 sete	 al
  00059	99		 cdq
  0005a	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1191 :     return err;

  0005d	8b c1		 mov	 eax, ecx
  0005f	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 1192 : }

  00062	5e		 pop	 esi
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_unzGoToFirstFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToNextFile@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGoToNextFile@4 PROC					; COMDAT

; 1200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1201 :     unz64_s* s;
; 1202 :     int err;
; 1203 : 
; 1204 :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN2@unzGoToNex

; 1205 :         return UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]

; 1221 : }

  0000e	5e		 pop	 esi
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@unzGoToNex:

; 1206 :     s=(unz64_s*)file;
; 1207 :     if (!s->current_file_ok)

  00013	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00016	0b 46 64	 or	 eax, DWORD PTR [esi+100]
  00019	75 0a		 jne	 SHORT $LN3@unzGoToNex
$LN8@unzGoToNex:

; 1208 :         return UNZ_END_OF_LIST_OF_FILE;

  0001b	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 1221 : }

  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN3@unzGoToNex:

; 1209 :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  00025	81 7e 38 ff ff
	00 00		 cmp	 DWORD PTR [esi+56], 65535 ; 0000ffffH
  0002c	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  0002f	75 04		 jne	 SHORT $LN7@unzGoToNex
  00031	85 d2		 test	 edx, edx
  00033	74 15		 je	 SHORT $LN5@unzGoToNex
$LN7@unzGoToNex:

; 1210 :       if (s->num_file+1==s->gi.number_entry)

  00035	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00038	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0003b	83 c0 01	 add	 eax, 1
  0003e	83 d1 00	 adc	 ecx, 0
  00041	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  00044	75 04		 jne	 SHORT $LN5@unzGoToNex
  00046	3b ca		 cmp	 ecx, edx
  00048	74 d1		 je	 SHORT $LN8@unzGoToNex
$LN5@unzGoToNex:

; 1211 :         return UNZ_END_OF_LIST_OF_FILE;
; 1212 : 
; 1213 :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +

  0004a	8b 8e b0 00 00
	00		 mov	 ecx, DWORD PTR [esi+176]

; 1214 :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;
; 1215 :     s->num_file++;
; 1216 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00050	8d 96 80 00 00
	00		 lea	 edx, DWORD PTR [esi+128]
  00056	03 8e ac 00 00
	00		 add	 ecx, DWORD PTR [esi+172]
  0005c	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  00062	6a 00		 push	 0
  00064	83 c0 2e	 add	 eax, 46			; 0000002eH
  00067	6a 00		 push	 0
  00069	03 c1		 add	 eax, ecx
  0006b	8b ce		 mov	 ecx, esi
  0006d	01 46 58	 add	 DWORD PTR [esi+88], eax
  00070	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  00076	6a 00		 push	 0
  00078	83 56 5c 00	 adc	 DWORD PTR [esi+92], 0
  0007c	83 46 50 01	 add	 DWORD PTR [esi+80], 1
  00080	6a 00		 push	 0
  00082	83 56 54 00	 adc	 DWORD PTR [esi+84], 0
  00086	6a 00		 push	 0
  00088	6a 00		 push	 0
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00090	8b c8		 mov	 ecx, eax
  00092	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1217 :                                                &s->cur_file_info_internal,
; 1218 :                                                NULL,0,NULL,0,NULL,0);
; 1219 :     s->current_file_ok = (err == UNZ_OK);

  00095	33 c0		 xor	 eax, eax
  00097	85 c9		 test	 ecx, ecx
  00099	0f 94 c0	 sete	 al
  0009c	99		 cdq
  0009d	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1220 :     return err;

  000a0	8b c1		 mov	 eax, ecx
  000a2	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 1221 : }

  000a5	5e		 pop	 esi
  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
_unzGoToNextFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzLocateFile@12
_TEXT	SEGMENT
_num_fileSaved$1$ = -392				; size = 4
_num_fileSaved$2$ = -388				; size = 4
_pos_in_central_dirSaved$1$ = -384			; size = 4
_pos_in_central_dirSaved$2$ = -380			; size = 4
_cur_file_info_internalSaved$1$ = -376			; size = 4
_cur_file_info_internalSaved$2$ = -372			; size = 4
_cur_file_infoSaved$6$ = -368				; size = 8
_cur_file_infoSaved$1$ = -352				; size = 16
_cur_file_infoSaved$2$ = -336				; size = 16
_cur_file_infoSaved$3$ = -320				; size = 16
_cur_file_infoSaved$4$ = -304				; size = 16
_cur_file_infoSaved$5$ = -288				; size = 16
_szCurrentFileName$1 = -264				; size = 257
_file$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzLocateFile@12 PROC					; COMDAT

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	81 ec 88 01 00
	00		 sub	 esp, 392		; 00000188H
  0000c	56		 push	 esi

; 1234 :     unz64_s* s;
; 1235 :     int err;
; 1236 : 
; 1237 :     /* We remember the 'current' position in the file so that we can jump
; 1238 :      * back there if we fail.
; 1239 :      */
; 1240 :     unz_file_info64 cur_file_infoSaved;
; 1241 :     unz_file_info64_internal cur_file_info_internalSaved;
; 1242 :     ZPOS64_T num_fileSaved;
; 1243 :     ZPOS64_T pos_in_central_dirSaved;
; 1244 : 
; 1245 : 
; 1246 :     if (file==NULL)

  0000d	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00010	57		 push	 edi
  00011	85 f6		 test	 esi, esi
  00013	75 0d		 jne	 SHORT $LN4@unzLocateF
$LN18@unzLocateF:

; 1247 :         return UNZ_PARAMERROR;

  00015	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1286 :     return err;
; 1287 : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@unzLocateF:

; 1248 : 
; 1249 :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  00022	8b 7d 0c	 mov	 edi, DWORD PTR _szFileName$[ebp]
  00025	8b c7		 mov	 eax, edi
  00027	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL15@unzLocateF:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 c9		 test	 cl, cl
  00035	75 f9		 jne	 SHORT $LL15@unzLocateF
  00037	2b c2		 sub	 eax, edx
  00039	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0003e	73 d5		 jae	 SHORT $LN18@unzLocateF

; 1250 :         return UNZ_PARAMERROR;
; 1251 : 
; 1252 :     s=(unz64_s*)file;
; 1253 :     if (!s->current_file_ok)

  00040	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00043	0b 46 64	 or	 eax, DWORD PTR [esi+100]
  00046	75 0d		 jne	 SHORT $LN6@unzLocateF

; 1254 :         return UNZ_END_OF_LIST_OF_FILE;

  00048	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 1286 :     return err;
; 1287 : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
$LN6@unzLocateF:

; 1255 : 
; 1256 :     /* Save the current state */
; 1257 :     num_fileSaved = s->num_file;
; 1258 :     pos_in_central_dirSaved = s->pos_in_central_dir;
; 1259 :     cur_file_infoSaved = s->cur_file_info;

  00055	0f 10 86 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+128]
  0005c	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0005f	89 44 24 08	 mov	 DWORD PTR _num_fileSaved$1$[esp+400], eax
  00063	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00066	0f 29 44 24 30	 movaps	 XMMWORD PTR _cur_file_infoSaved$1$[esp+400], xmm0
  0006b	0f 10 86 90 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+144]
  00072	89 44 24 0c	 mov	 DWORD PTR _num_fileSaved$2$[esp+400], eax
  00076	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00079	0f 29 44 24 40	 movaps	 XMMWORD PTR _cur_file_infoSaved$2$[esp+400], xmm0
  0007e	0f 10 86 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+160]
  00085	89 44 24 10	 mov	 DWORD PTR _pos_in_central_dirSaved$1$[esp+400], eax
  00089	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0008c	0f 29 44 24 50	 movaps	 XMMWORD PTR _cur_file_infoSaved$3$[esp+400], xmm0
  00091	0f 10 86 b0 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+176]
  00098	89 44 24 14	 mov	 DWORD PTR _pos_in_central_dirSaved$2$[esp+400], eax

; 1260 :     cur_file_info_internalSaved = s->cur_file_info_internal;

  0009c	8b 86 d8 00 00
	00		 mov	 eax, DWORD PTR [esi+216]
  000a2	0f 29 44 24 60	 movaps	 XMMWORD PTR _cur_file_infoSaved$4$[esp+400], xmm0
  000a7	0f 10 86 c0 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+192]
  000ae	89 44 24 18	 mov	 DWORD PTR _cur_file_info_internalSaved$1$[esp+400], eax
  000b2	8b 86 dc 00 00
	00		 mov	 eax, DWORD PTR [esi+220]
  000b8	0f 29 44 24 70	 movaps	 XMMWORD PTR _cur_file_infoSaved$5$[esp+400], xmm0
  000bd	f3 0f 7e 86 d0
	00 00 00	 movq	 xmm0, QWORD PTR [esi+208]

; 1261 : 
; 1262 :     err = unzGoToFirstFile(file);

  000c5	56		 push	 esi
  000c6	66 0f d6 44 24
	24		 movq	 QWORD PTR _cur_file_infoSaved$6$[esp+404], xmm0
  000cc	89 44 24 20	 mov	 DWORD PTR _cur_file_info_internalSaved$2$[esp+404], eax
  000d0	e8 00 00 00 00	 call	 _unzGoToFirstFile@4

; 1263 : 
; 1264 :     while (err == UNZ_OK)

  000d5	85 c0		 test	 eax, eax
  000d7	75 4b		 jne	 SHORT $LN14@unzLocateF
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@unzLocateF:

; 1265 :     {
; 1266 :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 1267 :         err = unzGetCurrentFileInfo64(file,NULL,

  000e0	6a 00		 push	 0
  000e2	6a 00		 push	 0
  000e4	6a 00		 push	 0
  000e6	6a 00		 push	 0
  000e8	68 00 01 00 00	 push	 256			; 00000100H
  000ed	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR _szCurrentFileName$1[esp+420]
  000f4	50		 push	 eax
  000f5	6a 00		 push	 0
  000f7	56		 push	 esi
  000f8	e8 00 00 00 00	 call	 _unzGetCurrentFileInfo64@32

; 1268 :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 1269 :                                     NULL,0,NULL,0);
; 1270 :         if (err == UNZ_OK)

  000fd	85 c0		 test	 eax, eax
  000ff	75 23		 jne	 SHORT $LN14@unzLocateF

; 1271 :         {
; 1272 :             if (unzStringFileNameCompare(szCurrentFileName,
; 1273 :                                             szFileName,iCaseSensitivity)==0)

  00101	ff 75 10	 push	 DWORD PTR _iCaseSensitivity$[ebp]
  00104	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR _szCurrentFileName$1[esp+404]
  0010b	57		 push	 edi
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _unzStringFileNameCompare@12
  00112	85 c0		 test	 eax, eax
  00114	0f 84 8c 00 00
	00		 je	 $LN11@unzLocateF

; 1274 :                 return UNZ_OK;
; 1275 :             err = unzGoToNextFile(file);

  0011a	56		 push	 esi
  0011b	e8 00 00 00 00	 call	 _unzGoToNextFile@4
  00120	85 c0		 test	 eax, eax
  00122	74 bc		 je	 SHORT $LL2@unzLocateF
$LN14@unzLocateF:

; 1276 :         }
; 1277 :     }
; 1278 : 
; 1279 :     /* We failed, so restore the state of the 'current file' to where we
; 1280 :      * were.
; 1281 :      */
; 1282 :     s->num_file = num_fileSaved ;
; 1283 :     s->pos_in_central_dir = pos_in_central_dirSaved ;
; 1284 :     s->cur_file_info = cur_file_infoSaved;

  00124	0f 28 44 24 30	 movaps	 xmm0, XMMWORD PTR _cur_file_infoSaved$1$[esp+400]
  00129	8b 4c 24 08	 mov	 ecx, DWORD PTR _num_fileSaved$1$[esp+400]
  0012d	0f 11 86 80 00
	00 00		 movups	 XMMWORD PTR [esi+128], xmm0
  00134	89 4e 50	 mov	 DWORD PTR [esi+80], ecx
  00137	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR _cur_file_infoSaved$2$[esp+400]
  0013c	8b 4c 24 0c	 mov	 ecx, DWORD PTR _num_fileSaved$2$[esp+400]
  00140	0f 11 86 90 00
	00 00		 movups	 XMMWORD PTR [esi+144], xmm0
  00147	89 4e 54	 mov	 DWORD PTR [esi+84], ecx
  0014a	0f 28 44 24 50	 movaps	 xmm0, XMMWORD PTR _cur_file_infoSaved$3$[esp+400]
  0014f	8b 4c 24 10	 mov	 ecx, DWORD PTR _pos_in_central_dirSaved$1$[esp+400]
  00153	0f 11 86 a0 00
	00 00		 movups	 XMMWORD PTR [esi+160], xmm0
  0015a	89 4e 58	 mov	 DWORD PTR [esi+88], ecx
  0015d	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR _cur_file_infoSaved$4$[esp+400]
  00162	8b 4c 24 14	 mov	 ecx, DWORD PTR _pos_in_central_dirSaved$2$[esp+400]
  00166	0f 11 86 b0 00
	00 00		 movups	 XMMWORD PTR [esi+176], xmm0
  0016d	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00170	0f 28 44 24 70	 movaps	 xmm0, XMMWORD PTR _cur_file_infoSaved$5$[esp+400]

; 1285 :     s->cur_file_info_internal = cur_file_info_internalSaved;

  00175	8b 4c 24 18	 mov	 ecx, DWORD PTR _cur_file_info_internalSaved$1$[esp+400]
  00179	0f 11 86 c0 00
	00 00		 movups	 XMMWORD PTR [esi+192], xmm0
  00180	89 8e d8 00 00
	00		 mov	 DWORD PTR [esi+216], ecx
  00186	f3 0f 7e 44 24
	20		 movq	 xmm0, QWORD PTR _cur_file_infoSaved$6$[esp+400]
  0018c	8b 4c 24 1c	 mov	 ecx, DWORD PTR _cur_file_info_internalSaved$2$[esp+400]
  00190	66 0f d6 86 d0
	00 00 00	 movq	 QWORD PTR [esi+208], xmm0
  00198	89 8e dc 00 00
	00		 mov	 DWORD PTR [esi+220], ecx

; 1286 :     return err;
; 1287 : }

  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c2 0c 00	 ret	 12			; 0000000cH
$LN11@unzLocateF:
  001a6	5f		 pop	 edi
  001a7	33 c0		 xor	 eax, eax
  001a9	5e		 pop	 esi
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 0c 00	 ret	 12			; 0000000cH
_unzLocateFile@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetFilePos64@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos64@8 PROC					; COMDAT

; 1309 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1310 :     unz64_s* s;
; 1311 : 
; 1312 :     if (file==NULL || file_pos==NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 35		 je	 SHORT $LN3@unzGetFile
  0000a	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  0000d	85 d2		 test	 edx, edx
  0000f	74 2e		 je	 SHORT $LN3@unzGetFile

; 1314 :     s=(unz64_s*)file;
; 1315 :     if (!s->current_file_ok)

  00011	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00014	0b 41 64	 or	 eax, DWORD PTR [ecx+100]
  00017	75 09		 jne	 SHORT $LN4@unzGetFile

; 1316 :         return UNZ_END_OF_LIST_OF_FILE;

  00019	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 1322 : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
$LN4@unzGetFile:

; 1317 : 
; 1318 :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  00022	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00025	89 02		 mov	 DWORD PTR [edx], eax
  00027	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0002a	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1319 :     file_pos->num_of_file           = s->num_file;

  0002d	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00030	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00033	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00036	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1320 : 
; 1321 :     return UNZ_OK;

  00039	33 c0		 xor	 eax, eax

; 1322 : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN3@unzGetFile:

; 1313 :         return UNZ_PARAMERROR;

  0003f	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1322 : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
_unzGetFilePos64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetFilePos@8
_TEXT	SEGMENT
_file_pos64$ = -16					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos@8 PROC					; COMDAT

; 1327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1328 :     unz64_file_pos file_pos64;
; 1329 :     int err = unzGetFilePos64(file,&file_pos64);

  00006	8d 45 f0	 lea	 eax, DWORD PTR _file_pos64$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000d	e8 00 00 00 00	 call	 _unzGetFilePos64@8

; 1330 :     if (err==UNZ_OK)

  00012	85 c0		 test	 eax, eax
  00014	75 0e		 jne	 SHORT $LN2@unzGetFile

; 1331 :     {
; 1332 :         file_pos->pos_in_zip_directory = (uLong)file_pos64.pos_in_zip_directory;

  00016	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  00019	8b 4d f0	 mov	 ecx, DWORD PTR _file_pos64$[ebp]
  0001c	89 0a		 mov	 DWORD PTR [edx], ecx

; 1333 :         file_pos->num_of_file = (uLong)file_pos64.num_of_file;

  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _file_pos64$[ebp+8]
  00021	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN2@unzGetFile:

; 1334 :     }
; 1335 :     return err;
; 1336 : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
_unzGetFilePos@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToFilePos64@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos64@8 PROC				; COMDAT

; 1339 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1340 :     unz64_s* s;
; 1341 :     int err;
; 1342 : 
; 1343 :     if (file==NULL || file_pos==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 58		 je	 SHORT $LN3@unzGoToFil
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 51		 je	 SHORT $LN3@unzGoToFil

; 1345 :     s=(unz64_s*)file;
; 1346 : 
; 1347 :     /* jump to the right spot */
; 1348 :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1349 :     s->num_file           = file_pos->num_of_file;
; 1350 : 
; 1351 :     /* set the current file */
; 1352 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00014	8d 96 80 00 00
	00		 lea	 edx, DWORD PTR [esi+128]
  0001a	6a 00		 push	 0
  0001c	6a 00		 push	 0
  0001e	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00021	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00024	6a 00		 push	 0
  00026	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	6a 00		 push	 0
  0002e	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00031	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00034	8b ce		 mov	 ecx, esi
  00036	6a 00		 push	 0
  00038	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0003b	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  00041	6a 00		 push	 0
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00049	8b c8		 mov	 ecx, eax
  0004b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1353 :                                                &s->cur_file_info_internal,
; 1354 :                                                NULL,0,NULL,0,NULL,0);
; 1355 :     /* return results */
; 1356 :     s->current_file_ok = (err == UNZ_OK);

  0004e	33 c0		 xor	 eax, eax
  00050	85 c9		 test	 ecx, ecx
  00052	0f 94 c0	 sete	 al
  00055	99		 cdq
  00056	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1357 :     return err;

  00059	8b c1		 mov	 eax, ecx
  0005b	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 1358 : }

  0005e	5e		 pop	 esi
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN3@unzGoToFil:

; 1344 :         return UNZ_PARAMERROR;

  00063	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1358 : }

  00068	5e		 pop	 esi
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
_unzGoToFilePos64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToFilePos@8
_TEXT	SEGMENT
_file_pos64$ = -16					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos@8 PROC					; COMDAT

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1364 :     unz64_file_pos file_pos64;
; 1365 :     if (file_pos == NULL)

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  00009	83 ec 10	 sub	 esp, 16			; 00000010H
  0000c	85 c9		 test	 ecx, ecx
  0000e	75 09		 jne	 SHORT $LN2@unzGoToFil

; 1366 :         return UNZ_PARAMERROR;

  00010	8d 41 9a	 lea	 eax, DWORD PTR [ecx-102]

; 1371 : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@unzGoToFil:

; 1367 : 
; 1368 :     file_pos64.pos_in_zip_directory = file_pos->pos_in_zip_directory;

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	89 04 24	 mov	 DWORD PTR _file_pos64$[esp+16], eax

; 1369 :     file_pos64.num_of_file = file_pos->num_of_file;

  0001e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00021	89 44 24 08	 mov	 DWORD PTR _file_pos64$[esp+24], eax

; 1370 :     return unzGoToFilePos64(file,&file_pos64);

  00025	8d 04 24	 lea	 eax, DWORD PTR _file_pos64$[esp+16]
  00028	50		 push	 eax
  00029	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0002c	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _file_pos64$[esp+28], 0
  00034	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _file_pos64$[esp+36], 0
  0003c	e8 00 00 00 00	 call	 _unzGoToFilePos64@8

; 1371 : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
_unzGoToFilePos@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
_size_extra_field$ = -12				; size = 4
_size_filename$ = -12					; size = 4
_uFlags$ = -12						; size = 4
_piSizeVar$1$ = -8					; size = 4
_uData$ = -4						; size = 4
_uMagic$ = -4						; size = 4
_poffset_local_extrafield$ = 8				; size = 4
_psize_local_extrafield$ = 12				; size = 4
_unz64local_CheckCurrentFileCoherencyHeader PROC	; COMDAT
; _s$ = ecx
; _piSizeVar$ = edx

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b c2		 mov	 eax, edx
  00009	56		 push	 esi

; 1389 :     uLong uMagic,uData,uFlags;
; 1390 :     uLong size_filename;
; 1391 :     uLong size_extra_field;
; 1392 :     int err=UNZ_OK;

  0000a	33 f6		 xor	 esi, esi
  0000c	89 45 f8	 mov	 DWORD PTR _piSizeVar$1$[ebp], eax
  0000f	57		 push	 edi

; 1393 : 
; 1394 :     *piSizeVar = 0;

  00010	89 30		 mov	 DWORD PTR [eax], esi
  00012	8b f9		 mov	 edi, ecx

; 1395 :     *poffset_local_extrafield = 0;

  00014	8b 45 08	 mov	 eax, DWORD PTR _poffset_local_extrafield$[ebp]

; 1396 :     *psize_local_extrafield = 0;
; 1397 : 
; 1398 :     if (ZSEEK64(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 1399 :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00017	56		 push	 esi
  00018	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  0001b	03 8f d8 00 00
	00		 add	 ecx, DWORD PTR [edi+216]
  00021	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00024	89 30		 mov	 DWORD PTR [eax], esi
  00026	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00029	8b 45 0c	 mov	 eax, DWORD PTR _psize_local_extrafield$[ebp]
  0002c	89 30		 mov	 DWORD PTR [eax], esi
  0002e	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00031	13 87 dc 00 00
	00		 adc	 eax, DWORD PTR [edi+220]
  00037	50		 push	 eax
  00038	51		 push	 ecx
  00039	8b cf		 mov	 ecx, edi
  0003b	e8 00 00 00 00	 call	 _call_zseek64
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	85 c0		 test	 eax, eax
  00045	74 0a		 je	 SHORT $LN28@unz64local

; 1400 :         return UNZ_ERRNO;

  00047	83 c8 ff	 or	 eax, -1

; 1462 : 
; 1463 :     *piSizeVar += (uInt)size_extra_field;
; 1464 : 
; 1465 :     return err;
; 1466 : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN28@unz64local:

; 1401 : 
; 1402 : 
; 1403 :     if (err==UNZ_OK)
; 1404 :     {
; 1405 :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00051	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00054	8d 45 fc	 lea	 eax, DWORD PTR _uMagic$[ebp]
  00057	50		 push	 eax
  00058	8b cf		 mov	 ecx, edi
  0005a	e8 00 00 00 00	 call	 _unz64local_getLong
  0005f	83 c4 04	 add	 esp, 4
  00062	bb 99 ff ff ff	 mov	 ebx, -103		; ffffff99H
  00067	85 c0		 test	 eax, eax
  00069	74 05		 je	 SHORT $LN4@unz64local

; 1406 :             err=UNZ_ERRNO;

  0006b	83 ce ff	 or	 esi, -1
  0006e	eb 0a		 jmp	 SHORT $LN6@unz64local
$LN4@unz64local:

; 1407 :         else if (uMagic!=0x04034b50)

  00070	81 7d fc 50 4b
	03 04		 cmp	 DWORD PTR _uMagic$[ebp], 67324752 ; 04034b50H
  00077	0f 45 f3	 cmovne	 esi, ebx
$LN6@unz64local:

; 1408 :             err=UNZ_BADZIPFILE;
; 1409 :     }
; 1410 : 
; 1411 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  0007a	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0007d	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  00080	50		 push	 eax
  00081	8b cf		 mov	 ecx, edi
  00083	e8 00 00 00 00	 call	 _unz64local_getShort

; 1412 :         err=UNZ_ERRNO;
; 1413 : /*
; 1414 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 1415 :         err=UNZ_BADZIPFILE;
; 1416 : */
; 1417 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  00088	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0008b	83 c9 ff	 or	 ecx, -1
  0008e	83 c4 04	 add	 esp, 4
  00091	85 c0		 test	 eax, eax
  00093	8d 45 f4	 lea	 eax, DWORD PTR _uFlags$[ebp]
  00096	0f 45 f1	 cmovne	 esi, ecx
  00099	8b cf		 mov	 ecx, edi
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _unz64local_getShort

; 1418 :         err=UNZ_ERRNO;
; 1419 : 
; 1420 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000a1	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  000a4	83 c4 04	 add	 esp, 4
  000a7	85 c0		 test	 eax, eax
  000a9	8b cf		 mov	 ecx, edi
  000ab	b8 ff ff ff ff	 mov	 eax, -1
  000b0	0f 45 f0	 cmovne	 esi, eax
  000b3	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _unz64local_getShort
  000bc	83 c4 04	 add	 esp, 4
  000bf	85 c0		 test	 eax, eax
  000c1	74 05		 je	 SHORT $LN9@unz64local

; 1421 :         err=UNZ_ERRNO;

  000c3	83 ce ff	 or	 esi, -1
  000c6	eb 22		 jmp	 SHORT $LN12@unz64local
$LN9@unz64local:

; 1422 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  000c8	85 f6		 test	 esi, esi
  000ca	75 1e		 jne	 SHORT $LN12@unz64local
  000cc	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  000d2	39 45 fc	 cmp	 DWORD PTR _uData$[ebp], eax
  000d5	74 04		 je	 SHORT $LN29@unz64local

; 1423 :         err=UNZ_BADZIPFILE;

  000d7	8b f3		 mov	 esi, ebx

; 1424 : 
; 1425 :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1426 : /* #ifdef HAVE_BZIP2 */
; 1427 :                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&

  000d9	eb 0f		 jmp	 SHORT $LN12@unz64local
$LN29@unz64local:
  000db	85 c0		 test	 eax, eax
  000dd	74 0b		 je	 SHORT $LN12@unz64local
  000df	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  000e2	74 06		 je	 SHORT $LN12@unz64local
  000e4	83 f8 08	 cmp	 eax, 8
  000e7	0f 45 f3	 cmovne	 esi, ebx
$LN12@unz64local:

; 1428 : /* #endif */
; 1429 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1430 :         err=UNZ_BADZIPFILE;
; 1431 : 
; 1432 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  000ea	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  000ed	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  000f0	50		 push	 eax
  000f1	8b cf		 mov	 ecx, edi
  000f3	e8 00 00 00 00	 call	 _unz64local_getLong

; 1433 :         err=UNZ_ERRNO;
; 1434 : 
; 1435 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  000f8	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  000fb	83 c4 04	 add	 esp, 4
  000fe	85 c0		 test	 eax, eax
  00100	8b cf		 mov	 ecx, edi
  00102	b8 ff ff ff ff	 mov	 eax, -1
  00107	0f 45 f0	 cmovne	 esi, eax
  0010a	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _unz64local_getLong
  00113	8b 5d f4	 mov	 ebx, DWORD PTR _uFlags$[ebp]
  00116	83 c4 04	 add	 esp, 4
  00119	85 c0		 test	 eax, eax
  0011b	74 05		 je	 SHORT $LN14@unz64local

; 1436 :         err=UNZ_ERRNO;

  0011d	83 ce ff	 or	 esi, -1
  00120	eb 1a		 jmp	 SHORT $LN16@unz64local
$LN14@unz64local:

; 1437 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) && ((uFlags & 8)==0))

  00122	85 f6		 test	 esi, esi
  00124	75 16		 jne	 SHORT $LN16@unz64local
  00126	8b 45 fc	 mov	 eax, DWORD PTR _uData$[ebp]
  00129	3b 87 94 00 00
	00		 cmp	 eax, DWORD PTR [edi+148]
  0012f	74 0b		 je	 SHORT $LN16@unz64local
  00131	f6 c3 08	 test	 bl, 8
  00134	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00139	0f 44 f0	 cmove	 esi, eax
$LN16@unz64local:

; 1438 :         err=UNZ_BADZIPFILE;
; 1439 : 
; 1440 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  0013c	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  0013f	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  00142	50		 push	 eax
  00143	8b cf		 mov	 ecx, edi
  00145	e8 00 00 00 00	 call	 _unz64local_getLong
  0014a	83 c4 04	 add	 esp, 4
  0014d	85 c0		 test	 eax, eax
  0014f	74 05		 je	 SHORT $LN17@unz64local

; 1441 :         err=UNZ_ERRNO;

  00151	83 ce ff	 or	 esi, -1
  00154	eb 29		 jmp	 SHORT $LN19@unz64local
$LN17@unz64local:

; 1442 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) && ((uFlags & 8)==0))

  00156	8b 45 fc	 mov	 eax, DWORD PTR _uData$[ebp]
  00159	83 f8 ff	 cmp	 eax, -1
  0015c	74 21		 je	 SHORT $LN19@unz64local
  0015e	85 f6		 test	 esi, esi
  00160	75 1d		 jne	 SHORT $LN19@unz64local
  00162	33 c9		 xor	 ecx, ecx
  00164	3b 87 98 00 00
	00		 cmp	 eax, DWORD PTR [edi+152]
  0016a	75 08		 jne	 SHORT $LN30@unz64local
  0016c	3b 8f 9c 00 00
	00		 cmp	 ecx, DWORD PTR [edi+156]
  00172	74 0b		 je	 SHORT $LN19@unz64local
$LN30@unz64local:
  00174	f6 c3 08	 test	 bl, 8
  00177	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  0017c	0f 44 f0	 cmove	 esi, eax
$LN19@unz64local:

; 1443 :         err=UNZ_BADZIPFILE;
; 1444 : 
; 1445 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  0017f	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00182	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  00185	50		 push	 eax
  00186	8b cf		 mov	 ecx, edi
  00188	e8 00 00 00 00	 call	 _unz64local_getLong
  0018d	83 c4 04	 add	 esp, 4
  00190	85 c0		 test	 eax, eax
  00192	74 05		 je	 SHORT $LN20@unz64local

; 1446 :         err=UNZ_ERRNO;

  00194	83 ce ff	 or	 esi, -1
  00197	eb 29		 jmp	 SHORT $LN22@unz64local
$LN20@unz64local:

; 1447 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) && ((uFlags & 8)==0))

  00199	8b 45 fc	 mov	 eax, DWORD PTR _uData$[ebp]
  0019c	83 f8 ff	 cmp	 eax, -1
  0019f	74 21		 je	 SHORT $LN22@unz64local
  001a1	85 f6		 test	 esi, esi
  001a3	75 1d		 jne	 SHORT $LN22@unz64local
  001a5	33 c9		 xor	 ecx, ecx
  001a7	3b 87 a0 00 00
	00		 cmp	 eax, DWORD PTR [edi+160]
  001ad	75 08		 jne	 SHORT $LN31@unz64local
  001af	3b 8f a4 00 00
	00		 cmp	 ecx, DWORD PTR [edi+164]
  001b5	74 0b		 je	 SHORT $LN22@unz64local
$LN31@unz64local:
  001b7	f6 c3 08	 test	 bl, 8
  001ba	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  001bf	0f 44 f0	 cmove	 esi, eax
$LN22@unz64local:

; 1448 :         err=UNZ_BADZIPFILE;
; 1449 : 
; 1450 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  001c2	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  001c5	8d 45 f4	 lea	 eax, DWORD PTR _size_filename$[ebp]
  001c8	50		 push	 eax
  001c9	8b cf		 mov	 ecx, edi
  001cb	e8 00 00 00 00	 call	 _unz64local_getShort
  001d0	8b 5d f4	 mov	 ebx, DWORD PTR _size_filename$[ebp]
  001d3	83 c4 04	 add	 esp, 4
  001d6	85 c0		 test	 eax, eax
  001d8	74 05		 je	 SHORT $LN23@unz64local

; 1451 :         err=UNZ_ERRNO;

  001da	83 ce ff	 or	 esi, -1
  001dd	eb 12		 jmp	 SHORT $LN25@unz64local
$LN23@unz64local:

; 1452 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  001df	85 f6		 test	 esi, esi
  001e1	75 0e		 jne	 SHORT $LN25@unz64local
  001e3	3b 9f a8 00 00
	00		 cmp	 ebx, DWORD PTR [edi+168]
  001e9	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  001ee	0f 45 f0	 cmovne	 esi, eax
$LN25@unz64local:

; 1453 :         err=UNZ_BADZIPFILE;
; 1454 : 
; 1455 :     *piSizeVar += (uInt)size_filename;

  001f1	8b 45 f8	 mov	 eax, DWORD PTR _piSizeVar$1$[ebp]

; 1456 : 
; 1457 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  001f4	8b cf		 mov	 ecx, edi
  001f6	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  001f9	01 18		 add	 DWORD PTR [eax], ebx
  001fb	8d 45 f4	 lea	 eax, DWORD PTR _size_extra_field$[ebp]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 _unz64local_getShort
  00204	83 c4 04	 add	 esp, 4
  00207	85 c0		 test	 eax, eax
  00209	b8 ff ff ff ff	 mov	 eax, -1
  0020e	0f 45 f0	 cmovne	 esi, eax

; 1458 :         err=UNZ_ERRNO;
; 1459 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +

  00211	8b 45 08	 mov	 eax, DWORD PTR _poffset_local_extrafield$[ebp]
  00214	33 c9		 xor	 ecx, ecx
  00216	03 9f d8 00 00
	00		 add	 ebx, DWORD PTR [edi+216]
  0021c	13 8f dc 00 00
	00		 adc	 ecx, DWORD PTR [edi+220]
  00222	83 c3 1e	 add	 ebx, 30			; 0000001eH
  00225	89 18		 mov	 DWORD PTR [eax], ebx
  00227	83 d1 00	 adc	 ecx, 0
  0022a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1460 :                                     SIZEZIPLOCALHEADER + size_filename;
; 1461 :     *psize_local_extrafield = (uInt)size_extra_field;

  0022d	8b 45 0c	 mov	 eax, DWORD PTR _psize_local_extrafield$[ebp]
  00230	8b 4d f4	 mov	 ecx, DWORD PTR _size_extra_field$[ebp]

; 1462 : 
; 1463 :     *piSizeVar += (uInt)size_extra_field;
; 1464 : 
; 1465 :     return err;
; 1466 : }

  00233	5f		 pop	 edi
  00234	89 08		 mov	 DWORD PTR [eax], ecx
  00236	8b 45 f8	 mov	 eax, DWORD PTR _piSizeVar$1$[ebp]
  00239	01 08		 add	 DWORD PTR [eax], ecx
  0023b	8b c6		 mov	 eax, esi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b e5		 mov	 esp, ebp
  00241	5d		 pop	 ebp
  00242	c3		 ret	 0
_unz64local_CheckCurrentFileCoherencyHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile3@20
_TEXT	SEGMENT
_size_local_extrafield$ = -16				; size = 4
_iSizeVar$ = -12					; size = 4
_offset_local_extrafield$ = -8				; size = 8
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_password$ = 24						; size = 4
_unzOpenCurrentFile3@20 PROC				; COMDAT

; 1474 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H

; 1475 :     int err=UNZ_OK;
; 1476 :     uInt iSizeVar;
; 1477 :     unz64_s* s;
; 1478 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1479 :     ZPOS64_T offset_local_extrafield;  /* offset of the local extra field */
; 1480 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1481 : #    ifndef NOUNCRYPT
; 1482 :     char source[12];
; 1483 : #    else
; 1484 :     if (password != NULL)

  00009	83 7d 18 00	 cmp	 DWORD PTR _password$[ebp], 0
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	74 0e		 je	 SHORT $LN4@unzOpenCur
$LN25@unzOpenCur:

; 1485 :         return UNZ_PARAMERROR;

  00012	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1639 : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
$LN4@unzOpenCur:

; 1486 : #    endif
; 1487 : 
; 1488 :     if (file==NULL)

  00020	8b 7d 08	 mov	 edi, DWORD PTR _file$[ebp]
  00023	85 ff		 test	 edi, edi
  00025	74 eb		 je	 SHORT $LN25@unzOpenCur

; 1489 :         return UNZ_PARAMERROR;
; 1490 :     s=(unz64_s*)file;
; 1491 :     if (!s->current_file_ok)

  00027	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0002a	0b 47 64	 or	 eax, DWORD PTR [edi+100]
  0002d	74 e3		 je	 SHORT $LN25@unzOpenCur

; 1492 :         return UNZ_PARAMERROR;
; 1493 : 
; 1494 :     if (s->pfile_in_zip_read != NULL)

  0002f	83 bf e0 00 00
	00 00		 cmp	 DWORD PTR [edi+224], 0
  00036	74 06		 je	 SHORT $LN7@unzOpenCur

; 1495 :         unzCloseCurrentFile(file);

  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN7@unzOpenCur:

; 1496 : 
; 1497 :     if (unz64local_CheckCurrentFileCoherencyHeader(s,&iSizeVar, &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  0003e	8d 44 24 10	 lea	 eax, DWORD PTR _size_local_extrafield$[esp+32]
  00042	8b cf		 mov	 ecx, edi
  00044	50		 push	 eax
  00045	8d 44 24 1c	 lea	 eax, DWORD PTR _offset_local_extrafield$[esp+36]
  00049	50		 push	 eax
  0004a	8d 54 24 1c	 lea	 edx, DWORD PTR _iSizeVar$[esp+40]
  0004e	e8 00 00 00 00	 call	 _unz64local_CheckCurrentFileCoherencyHeader
  00053	83 c4 08	 add	 esp, 8
  00056	85 c0		 test	 eax, eax
  00058	74 0e		 je	 SHORT $LN8@unzOpenCur

; 1498 :         return UNZ_BADZIPFILE;

  0005a	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H

; 1639 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 14 00	 ret	 20			; 00000014H
$LN8@unzOpenCur:

; 1499 : 
; 1500 :     pfile_in_zip_read_info = (file_in_zip64_read_info_s*)ALLOC(sizeof(file_in_zip64_read_info_s));

  00068	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__malloc
  0006e	68 d0 00 00 00	 push	 208			; 000000d0H
  00073	ff d3		 call	 ebx
  00075	8b f0		 mov	 esi, eax
  00077	83 c4 04	 add	 esp, 4

; 1501 :     if (pfile_in_zip_read_info==NULL)

  0007a	85 f6		 test	 esi, esi
  0007c	74 46		 je	 SHORT $LN26@unzOpenCur

; 1502 :         return UNZ_INTERNALERROR;
; 1503 : 
; 1504 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  0007e	68 00 40 00 00	 push	 16384			; 00004000H
  00083	ff d3		 call	 ebx

; 1505 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  00085	8b 4c 24 1c	 mov	 ecx, DWORD PTR _offset_local_extrafield$[esp+36]
  00089	83 c4 04	 add	 esp, 4

; 1506 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;
; 1507 :     pfile_in_zip_read_info->pos_local_extrafield=0;
; 1508 :     pfile_in_zip_read_info->raw=raw;

  0008c	8b 55 14	 mov	 edx, DWORD PTR _raw$[ebp]
  0008f	89 4e 50	 mov	 DWORD PTR [esi+80], ecx
  00092	8b 4c 24 1c	 mov	 ecx, DWORD PTR _offset_local_extrafield$[esp+36]
  00096	89 4e 54	 mov	 DWORD PTR [esi+84], ecx
  00099	8b 4c 24 10	 mov	 ecx, DWORD PTR _size_local_extrafield$[esp+32]
  0009d	89 06		 mov	 DWORD PTR [esi], eax
  0009f	89 4e 58	 mov	 DWORD PTR [esi+88], ecx
  000a2	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  000a9	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  000b0	89 96 c8 00 00
	00		 mov	 DWORD PTR [esi+200], edx

; 1509 : 
; 1510 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  000b6	85 c0		 test	 eax, eax
  000b8	75 18		 jne	 SHORT $LN10@unzOpenCur

; 1511 :     {
; 1512 :         TRYFREE(pfile_in_zip_read_info);

  000ba	56		 push	 esi
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000c1	83 c4 04	 add	 esp, 4
$LN26@unzOpenCur:

; 1513 :         return UNZ_INTERNALERROR;

  000c4	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H

; 1639 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 14 00	 ret	 20			; 00000014H
$LN10@unzOpenCur:

; 1514 :     }
; 1515 : 
; 1516 :     pfile_in_zip_read_info->stream_initialised=0;
; 1517 : 
; 1518 :     if (method!=NULL)

  000d2	8b 4d 0c	 mov	 ecx, DWORD PTR _method$[ebp]
  000d5	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000dc	85 c9		 test	 ecx, ecx
  000de	74 08		 je	 SHORT $LN12@unzOpenCur

; 1519 :         *method = (int)s->cur_file_info.compression_method;

  000e0	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  000e6	89 01		 mov	 DWORD PTR [ecx], eax
$LN12@unzOpenCur:

; 1520 : 
; 1521 :     if (level!=NULL)

  000e8	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  000eb	85 c9		 test	 ecx, ecx
  000ed	74 34		 je	 SHORT $LN2@unzOpenCur

; 1522 :     {
; 1523 :         *level = 6;

  000ef	c7 01 06 00 00
	00		 mov	 DWORD PTR [ecx], 6

; 1524 :         switch (s->cur_file_info.flag & 0x06)

  000f5	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  000fb	83 e0 06	 and	 eax, 6
  000fe	83 e8 02	 sub	 eax, 2
  00101	74 1a		 je	 SHORT $LN16@unzOpenCur
  00103	83 e8 02	 sub	 eax, 2
  00106	74 0d		 je	 SHORT $LN15@unzOpenCur
  00108	83 e8 02	 sub	 eax, 2
  0010b	75 16		 jne	 SHORT $LN2@unzOpenCur

; 1525 :         {
; 1526 :           case 6 : *level = 1; break;

  0010d	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  00113	eb 0e		 jmp	 SHORT $LN2@unzOpenCur
$LN15@unzOpenCur:

; 1527 :           case 4 : *level = 2; break;

  00115	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
  0011b	eb 06		 jmp	 SHORT $LN2@unzOpenCur
$LN16@unzOpenCur:

; 1528 :           case 2 : *level = 9; break;

  0011d	c7 01 09 00 00
	00		 mov	 DWORD PTR [ecx], 9
$LN2@unzOpenCur:

; 1529 :         }
; 1530 :     }
; 1531 : 
; 1532 :     if ((s->cur_file_info.compression_method!=0) &&
; 1533 : /* #ifdef HAVE_BZIP2 */
; 1534 :         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1535 : /* #endif */
; 1536 :         (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1537 : 
; 1538 :         err=UNZ_BADZIPFILE;
; 1539 : 
; 1540 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  00123	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  00129	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 1541 :     pfile_in_zip_read_info->crc32=0;

  0012c	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1542 :     pfile_in_zip_read_info->total_out_64=0;

  00133	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0013a	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1543 :     pfile_in_zip_read_info->compression_method = s->cur_file_info.compression_method;

  00141	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  00147	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax

; 1544 :     pfile_in_zip_read_info->filestream=s->filestream;

  0014d	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00150	89 86 b4 00 00
	00		 mov	 DWORD PTR [esi+180], eax

; 1545 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  00156	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00159	0f 11 86 88 00
	00 00		 movups	 XMMWORD PTR [esi+136], xmm0
  00160	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00164	0f 11 86 98 00
	00 00		 movups	 XMMWORD PTR [esi+152], xmm0
  0016b	f3 0f 7e 47 20	 movq	 xmm0, QWORD PTR [edi+32]
  00170	66 0f d6 86 a8
	00 00 00	 movq	 QWORD PTR [esi+168], xmm0
  00178	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0017b	89 86 b0 00 00
	00		 mov	 DWORD PTR [esi+176], eax

; 1546 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  00181	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00184	89 86 c0 00 00
	00		 mov	 DWORD PTR [esi+192], eax
  0018a	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0018d	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax

; 1547 : 
; 1548 :     pfile_in_zip_read_info->stream.total_out = 0;

  00193	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 1549 : 
; 1550 :     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))

  0019a	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  001a0	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  001a3	75 78		 jne	 SHORT $LN18@unzOpenCur
  001a5	85 d2		 test	 edx, edx
  001a7	75 74		 jne	 SHORT $LN18@unzOpenCur

; 1551 :     {
; 1552 : #ifdef HAVE_BZIP2
; 1553 :       pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
; 1554 :       pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
; 1555 :       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
; 1556 :       pfile_in_zip_read_info->bstream.state = (voidpf)0;
; 1557 : 
; 1558 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1559 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1560 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1561 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
; 1562 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1563 : 
; 1564 :       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
; 1565 :       if (err == Z_OK)
; 1566 :         pfile_in_zip_read_info->stream_initialised=Z_BZIP2ED;
; 1567 :       else
; 1568 :       {
; 1569 :         TRYFREE(pfile_in_zip_read_info);
; 1570 :         return err;
; 1571 :       }
; 1572 : #else
; 1573 :       pfile_in_zip_read_info->raw=1;

  001a9	c7 86 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+200], 1
$LN22@unzOpenCur:

; 1591 :       }
; 1592 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1593 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1594 :          * after the compressed stream in order to complete decompression and
; 1595 :          * return Z_STREAM_END.
; 1596 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1597 :          * size of both compressed and uncompressed data
; 1598 :          */
; 1599 :     }
; 1600 :     pfile_in_zip_read_info->rest_read_compressed =

  001b3	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]

; 1601 :             s->cur_file_info.compressed_size ;
; 1602 :     pfile_in_zip_read_info->rest_read_uncompressed =
; 1603 :             s->cur_file_info.uncompressed_size ;
; 1604 : 
; 1605 : 
; 1606 :     pfile_in_zip_read_info->pos_in_zipfile =

  001b9	33 c9		 xor	 ecx, ecx
  001bb	89 46 78	 mov	 DWORD PTR [esi+120], eax
  001be	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  001c4	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  001c7	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]
  001cd	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  001d3	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  001d9	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  001df	8b 44 24 14	 mov	 eax, DWORD PTR _iSizeVar$[esp+32]
  001e3	03 87 d8 00 00
	00		 add	 eax, DWORD PTR [edi+216]
  001e9	13 8f dc 00 00
	00		 adc	 ecx, DWORD PTR [edi+220]
  001ef	83 c0 1e	 add	 eax, 30			; 0000001eH
  001f2	89 46 40	 mov	 DWORD PTR [esi+64], eax
  001f5	83 d1 00	 adc	 ecx, 0

; 1607 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1608 :               iSizeVar;
; 1609 : 
; 1610 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  001f8	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  001ff	89 4e 44	 mov	 DWORD PTR [esi+68], ecx

; 1611 : 
; 1612 :     s->pfile_in_zip_read = pfile_in_zip_read_info;
; 1613 :                 s->encrypted = 0;
; 1614 : 
; 1615 : #    ifndef NOUNCRYPT
; 1616 :     if (password != NULL)
; 1617 :     {
; 1618 :         int i;
; 1619 :         s->pcrc_32_tab = get_crc_table();
; 1620 :         init_keys(password,s->keys,s->pcrc_32_tab);
; 1621 :         if (ZSEEK64(s->z_filefunc, s->filestream,
; 1622 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1623 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1624 :                   SEEK_SET)!=0)
; 1625 :             return UNZ_INTERNALERROR;
; 1626 :         if(ZREAD64(s->z_filefunc, s->filestream,source, 12)<12)
; 1627 :             return UNZ_INTERNALERROR;
; 1628 : 
; 1629 :         for (i = 0; i<12; i++)
; 1630 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);
; 1631 : 
; 1632 :         s->pfile_in_zip_read->pos_in_zipfile+=12;
; 1633 :         s->encrypted=1;
; 1634 :     }
; 1635 : #    endif
; 1636 : 
; 1637 : 
; 1638 :     return UNZ_OK;

  00202	33 c0		 xor	 eax, eax
  00204	89 b7 e0 00 00
	00		 mov	 DWORD PTR [edi+224], esi
  0020a	c7 87 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+228], 0

; 1639 : }

  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 14 00	 ret	 20			; 00000014H
$LN18@unzOpenCur:

; 1574 : #endif
; 1575 :     }
; 1576 :     else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))

  0021d	83 f8 08	 cmp	 eax, 8
  00220	75 91		 jne	 SHORT $LN22@unzOpenCur
  00222	85 d2		 test	 edx, edx
  00224	75 8d		 jne	 SHORT $LN22@unzOpenCur

; 1577 :     {
; 1578 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1579 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1580 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1581 :       pfile_in_zip_read_info->stream.next_in = 0;
; 1582 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1583 : 
; 1584 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  00226	6a 38		 push	 56			; 00000038H
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_05IAIEPMAK@1?42?48?$AA@
  0022d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00230	89 56 24	 mov	 DWORD PTR [esi+36], edx
  00233	6a f1		 push	 -15			; fffffff1H
  00235	50		 push	 eax
  00236	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00239	89 56 2c	 mov	 DWORD PTR [esi+44], edx
  0023c	89 10		 mov	 DWORD PTR [eax], edx
  0023e	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00241	e8 00 00 00 00	 call	 _inflateInit2_@16
  00246	8b d8		 mov	 ebx, eax

; 1585 :       if (err == Z_OK)

  00248	85 db		 test	 ebx, ebx
  0024a	75 0c		 jne	 SHORT $LN21@unzOpenCur

; 1586 :         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;

  0024c	c7 46 48 08 00
	00 00		 mov	 DWORD PTR [esi+72], 8
  00253	e9 5b ff ff ff	 jmp	 $LN22@unzOpenCur
$LN21@unzOpenCur:

; 1587 :       else
; 1588 :       {
; 1589 :         TRYFREE(pfile_in_zip_read_info);

  00258	56		 push	 esi
  00259	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0025f	83 c4 04	 add	 esp, 4

; 1590 :         return err;

  00262	8b c3		 mov	 eax, ebx

; 1639 : }

  00264	5f		 pop	 edi
  00265	5e		 pop	 esi
  00266	5b		 pop	 ebx
  00267	8b e5		 mov	 esp, ebp
  00269	5d		 pop	 ebp
  0026a	c2 14 00	 ret	 20			; 00000014H
_unzOpenCurrentFile3@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzOpenCurrentFile@4 PROC				; COMDAT

; 1642 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1643 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000e	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1644 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
_unzOpenCurrentFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFilePassword@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_password$ = 12						; size = 4
_unzOpenCurrentFilePassword@8 PROC			; COMDAT

; 1647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  00003	ff 75 0c	 push	 DWORD PTR _password$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000f	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1649 : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_unzOpenCurrentFilePassword@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile2@16
_TEXT	SEGMENT
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_unzOpenCurrentFile2@16 PROC				; COMDAT

; 1652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1653 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00003	6a 00		 push	 0
  00005	ff 75 14	 push	 DWORD PTR _raw$[ebp]
  00008	ff 75 10	 push	 DWORD PTR _level$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _method$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00011	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1654 : }

  00016	5d		 pop	 ebp
  00017	c2 10 00	 ret	 16			; 00000010H
_unzOpenCurrentFile2@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileZStreamPos64@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGetCurrentFileZStreamPos64@4 PROC			; COMDAT

; 1659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1660 :     unz64_s* s;
; 1661 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1662 :     s=(unz64_s*)file;
; 1663 :     if (file==NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 08		 jne	 SHORT $LN2@unzGetCurr
$LN5@unzGetCurr:

; 1664 :         return 0; //UNZ_PARAMERROR;

  0000a	33 c0		 xor	 eax, eax
  0000c	33 d2		 xor	 edx, edx

; 1669 :                          pfile_in_zip_read_info->byte_before_the_zipfile;
; 1670 : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN2@unzGetCurr:

; 1665 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00012	8b 89 e0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+224]

; 1666 :     if (pfile_in_zip_read_info==NULL)

  00018	85 c9		 test	 ecx, ecx
  0001a	74 ee		 je	 SHORT $LN5@unzGetCurr

; 1667 :         return 0; //UNZ_PARAMERROR;
; 1668 :     return pfile_in_zip_read_info->pos_in_zipfile +

  0001c	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00022	03 41 40	 add	 eax, DWORD PTR [ecx+64]
  00025	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  0002b	13 51 44	 adc	 edx, DWORD PTR [ecx+68]

; 1669 :                          pfile_in_zip_read_info->byte_before_the_zipfile;
; 1670 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_unzGetCurrentFileZStreamPos64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzReadCurrentFile@12
_TEXT	SEGMENT
_iRead$1$ = -16						; size = 4
_uTotalOutBefore$1$ = -12				; size = 4
tv353 = -8						; size = 4
_err$1$ = -8						; size = 4
_bufBefore$1$ = -4					; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzReadCurrentFile@12 PROC				; COMDAT

; 1685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1686 :     int err=UNZ_OK;
; 1687 :     uInt iRead = 0;
; 1688 :     unz64_s* s;
; 1689 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1690 :     if (file==NULL)

  0000b	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	89 5c 24 0c	 mov	 DWORD PTR _iRead$1$[esp+28], ebx
  00014	57		 push	 edi
  00015	85 f6		 test	 esi, esi
  00017	75 0e		 jne	 SHORT $LN7@unzReadCur
$LN55@unzReadCur:

; 1691 :         return UNZ_PARAMERROR;

  00019	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1882 :     return err;
; 1883 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 0c 00	 ret	 12			; 0000000cH
$LN7@unzReadCur:

; 1692 :     s=(unz64_s*)file;
; 1693 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00027	8b b6 e0 00 00
	00		 mov	 esi, DWORD PTR [esi+224]

; 1694 : 
; 1695 :     if (pfile_in_zip_read_info==NULL)

  0002d	85 f6		 test	 esi, esi
  0002f	74 e8		 je	 SHORT $LN55@unzReadCur

; 1696 :         return UNZ_PARAMERROR;
; 1697 : 
; 1698 : 
; 1699 :     if (pfile_in_zip_read_info->read_buffer == NULL)

  00031	39 1e		 cmp	 DWORD PTR [esi], ebx
  00033	75 0e		 jne	 SHORT $LN9@unzReadCur

; 1700 :         return UNZ_END_OF_LIST_OF_FILE;

  00035	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 1882 :     return err;
; 1883 : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
$LN9@unzReadCur:

; 1701 :     if (len==0)

  00043	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00046	85 c9		 test	 ecx, ecx
  00048	75 0b		 jne	 SHORT $LN10@unzReadCur
$LN33@unzReadCur:

; 1702 :         return 0;

  0004a	33 c0		 xor	 eax, eax

; 1882 :     return err;
; 1883 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
$LN10@unzReadCur:

; 1703 : 
; 1704 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;

  00055	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00058	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 1705 : 
; 1706 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;
; 1707 : 
; 1708 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&

  0005b	33 c0		 xor	 eax, eax
  0005d	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00060	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  00066	72 1b		 jb	 SHORT $LN11@unzReadCur
  00068	77 08		 ja	 SHORT $LN49@unzReadCur
  0006a	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  00070	76 11		 jbe	 SHORT $LN11@unzReadCur
$LN49@unzReadCur:
  00072	39 86 c8 00 00
	00		 cmp	 DWORD PTR [esi+200], eax
  00078	75 09		 jne	 SHORT $LN11@unzReadCur

; 1709 :         (!(pfile_in_zip_read_info->raw)))
; 1710 :         pfile_in_zip_read_info->stream.avail_out =

  0007a	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00080	89 46 14	 mov	 DWORD PTR [esi+20], eax
$LN11@unzReadCur:

; 1711 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;
; 1712 : 
; 1713 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1714 :            pfile_in_zip_read_info->stream.avail_in) &&

  00083	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00086	33 c0		 xor	 eax, eax
  00088	8b d7		 mov	 edx, edi
  0008a	03 56 78	 add	 edx, DWORD PTR [esi+120]
  0008d	13 46 7c	 adc	 eax, DWORD PTR [esi+124]
  00090	3b d8		 cmp	 ebx, eax
  00092	72 16		 jb	 SHORT $LN31@unzReadCur
  00094	77 04		 ja	 SHORT $LN50@unzReadCur
  00096	3b ca		 cmp	 ecx, edx
  00098	76 10		 jbe	 SHORT $LN31@unzReadCur
$LN50@unzReadCur:
  0009a	39 9e c8 00 00
	00		 cmp	 DWORD PTR [esi+200], ebx
  000a0	74 08		 je	 SHORT $LN31@unzReadCur

; 1715 :          (pfile_in_zip_read_info->raw))
; 1716 :         pfile_in_zip_read_info->stream.avail_out =

  000a2	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000a5	03 c7		 add	 eax, edi
  000a7	89 46 14	 mov	 DWORD PTR [esi+20], eax
$LN31@unzReadCur:

; 1717 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1718 :             pfile_in_zip_read_info->stream.avail_in;
; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  000aa	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  000ad	0f 86 d0 01 00
	00		 jbe	 $LN48@unzReadCur
  000b3	bb fd ff ff ff	 mov	 ebx, -3			; fffffffdH
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@unzReadCur:

; 1721 :     {
; 1722 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&

  000c0	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  000c4	0f 85 96 00 00
	00		 jne	 $LN13@unzReadCur
  000ca	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  000cd	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000d0	85 c9		 test	 ecx, ecx
  000d2	75 08		 jne	 SHORT $LN51@unzReadCur
  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 84 00 00
	00		 je	 $LN13@unzReadCur
$LN51@unzReadCur:

; 1723 :             (pfile_in_zip_read_info->rest_read_compressed>0))
; 1724 :         {
; 1725 :             uInt uReadThis = UNZ_BUFSIZE;

  000dc	bf 00 40 00 00	 mov	 edi, 16384		; 00004000H

; 1726 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  000e1	85 c9		 test	 ecx, ecx
  000e3	77 11		 ja	 SHORT $LN47@unzReadCur
  000e5	72 04		 jb	 SHORT $LN52@unzReadCur
  000e7	3b c7		 cmp	 eax, edi
  000e9	73 0b		 jae	 SHORT $LN47@unzReadCur
$LN52@unzReadCur:

; 1727 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  000eb	8b 7e 78	 mov	 edi, DWORD PTR [esi+120]

; 1728 :             if (uReadThis == 0)

  000ee	85 ff		 test	 edi, edi
  000f0	0f 84 54 ff ff
	ff		 je	 $LN33@unzReadCur
$LN47@unzReadCur:

; 1729 :                 return UNZ_EOF;
; 1730 :             if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1731 :                       pfile_in_zip_read_info->filestream,
; 1732 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1733 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1734 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f6	8b 8e c0 00 00
	00		 mov	 ecx, DWORD PTR [esi+192]
  000fc	03 4e 40	 add	 ecx, DWORD PTR [esi+64]
  000ff	8b 86 c4 00 00
	00		 mov	 eax, DWORD PTR [esi+196]
  00105	13 46 44	 adc	 eax, DWORD PTR [esi+68]
  00108	8b 96 b4 00 00
	00		 mov	 edx, DWORD PTR [esi+180]
  0010e	6a 00		 push	 0
  00110	50		 push	 eax
  00111	51		 push	 ecx
  00112	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00118	e8 00 00 00 00	 call	 _call_zseek64
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00120	85 c0		 test	 eax, eax
  00122	0f 85 66 01 00
	00		 jne	 $LN34@unzReadCur

; 1736 :             if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1737 :                       pfile_in_zip_read_info->filestream,
; 1738 :                       pfile_in_zip_read_info->read_buffer,
; 1739 :                       uReadThis)!=uReadThis)

  00128	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  0012e	57		 push	 edi
  0012f	ff 36		 push	 DWORD PTR [esi]
  00131	ff b6 b4 00 00
	00		 push	 DWORD PTR [esi+180]
  00137	ff b6 a4 00 00
	00		 push	 DWORD PTR [esi+164]
  0013d	ff d0		 call	 eax
  0013f	83 c4 10	 add	 esp, 16			; 00000010H
  00142	3b c7		 cmp	 eax, edi
  00144	0f 85 44 01 00
	00		 jne	 $LN34@unzReadCur

; 1740 :                 return UNZ_ERRNO;
; 1741 : 
; 1742 : 
; 1743 : #            ifndef NOUNCRYPT
; 1744 :             if(s->encrypted)
; 1745 :             {
; 1746 :                 uInt i;
; 1747 :                 for(i=0;i<uReadThis;i++)
; 1748 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1749 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1750 :                               pfile_in_zip_read_info->read_buffer[i]);
; 1751 :             }
; 1752 : #            endif
; 1753 : 
; 1754 : 
; 1755 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  0014a	01 7e 40	 add	 DWORD PTR [esi+64], edi

; 1756 : 
; 1757 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;
; 1758 : 
; 1759 :             pfile_in_zip_read_info->stream.next_in =

  0014d	8b 06		 mov	 eax, DWORD PTR [esi]
  0014f	83 56 44 00	 adc	 DWORD PTR [esi+68], 0
  00153	29 7e 78	 sub	 DWORD PTR [esi+120], edi
  00156	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00159	83 5e 7c 00	 sbb	 DWORD PTR [esi+124], 0

; 1760 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;
; 1761 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  0015d	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN13@unzReadCur:

; 1762 :         }
; 1763 : 
; 1764 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  00160	8b 86 b8 00 00
	00		 mov	 eax, DWORD PTR [esi+184]
  00166	85 c0		 test	 eax, eax
  00168	0f 84 97 00 00
	00		 je	 $LN20@unzReadCur
  0016e	83 be c8 00 00
	00 00		 cmp	 DWORD PTR [esi+200], 0
  00175	0f 85 8a 00 00
	00		 jne	 $LN20@unzReadCur

; 1794 :         }
; 1795 :         else if (pfile_in_zip_read_info->compression_method==Z_BZIP2ED)

  0017b	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0017e	0f 84 f1 00 00
	00		 je	 $LN28@unzReadCur

; 1796 :         {
; 1797 : #ifdef HAVE_BZIP2
; 1798 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1799 :             const Bytef *bufBefore;
; 1800 :             uLong uOutThis;
; 1801 : 
; 1802 :             pfile_in_zip_read_info->bstream.next_in        = (char*)pfile_in_zip_read_info->stream.next_in;
; 1803 :             pfile_in_zip_read_info->bstream.avail_in       = pfile_in_zip_read_info->stream.avail_in;
; 1804 :             pfile_in_zip_read_info->bstream.total_in_lo32  = pfile_in_zip_read_info->stream.total_in;
; 1805 :             pfile_in_zip_read_info->bstream.total_in_hi32  = 0;
; 1806 :             pfile_in_zip_read_info->bstream.next_out       = (char*)pfile_in_zip_read_info->stream.next_out;
; 1807 :             pfile_in_zip_read_info->bstream.avail_out      = pfile_in_zip_read_info->stream.avail_out;
; 1808 :             pfile_in_zip_read_info->bstream.total_out_lo32 = pfile_in_zip_read_info->stream.total_out;
; 1809 :             pfile_in_zip_read_info->bstream.total_out_hi32 = 0;
; 1810 : 
; 1811 :             uTotalOutBefore = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1812 :             bufBefore = (const Bytef *)pfile_in_zip_read_info->bstream.next_out;
; 1813 : 
; 1814 :             err=BZ2_bzDecompress(&pfile_in_zip_read_info->bstream);
; 1815 : 
; 1816 :             uTotalOutAfter = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1817 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1818 : 
; 1819 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1820 : 
; 1821 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,bufBefore, (uInt)(uOutThis));
; 1822 :             pfile_in_zip_read_info->rest_read_uncompressed -= uOutThis;
; 1823 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
; 1824 : 
; 1825 :             pfile_in_zip_read_info->stream.next_in   = (Bytef*)pfile_in_zip_read_info->bstream.next_in;
; 1826 :             pfile_in_zip_read_info->stream.avail_in  = pfile_in_zip_read_info->bstream.avail_in;
; 1827 :             pfile_in_zip_read_info->stream.total_in  = pfile_in_zip_read_info->bstream.total_in_lo32;
; 1828 :             pfile_in_zip_read_info->stream.next_out  = (Bytef*)pfile_in_zip_read_info->bstream.next_out;
; 1829 :             pfile_in_zip_read_info->stream.avail_out = pfile_in_zip_read_info->bstream.avail_out;
; 1830 :             pfile_in_zip_read_info->stream.total_out = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1831 : 
; 1832 :             if (err==BZ_STREAM_END)
; 1833 :               return (iRead==0) ? UNZ_EOF : iRead;
; 1834 :             if (err!=BZ_OK)
; 1835 :               break;
; 1836 : #endif
; 1837 :         } // end Z_BZIP2ED
; 1838 :         else
; 1839 :         {
; 1840 :             ZPOS64_T uTotalOutBefore,uTotalOutAfter;
; 1841 :             const Bytef *bufBefore;
; 1842 :             ZPOS64_T uOutThis;
; 1843 :             int flush=Z_SYNC_FLUSH;
; 1844 : 
; 1845 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  00184	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00187	89 44 24 14	 mov	 DWORD PTR _uTotalOutBefore$1$[esp+32], eax

; 1846 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  0018b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0018e	89 44 24 1c	 mov	 DWORD PTR _bufBefore$1$[esp+32], eax

; 1847 : 
; 1848 :             /*
; 1849 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1850 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1851 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1852 :                 flush = Z_FINISH;
; 1853 :             */
; 1854 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  00192	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00195	6a 02		 push	 2
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _inflate@8
  0019d	89 44 24 18	 mov	 DWORD PTR _err$1$[esp+32], eax

; 1855 : 
; 1856 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  001a1	85 c0		 test	 eax, eax
  001a3	78 0b		 js	 SHORT $LN26@unzReadCur
  001a5	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  001a9	0f 45 c3	 cmovne	 eax, ebx
  001ac	89 44 24 18	 mov	 DWORD PTR _err$1$[esp+32], eax
$LN26@unzReadCur:

; 1857 :               err = Z_DATA_ERROR;
; 1858 : 
; 1859 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;
; 1860 :             uOutThis = uTotalOutAfter-uTotalOutBefore;

  001b0	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  001b3	33 db		 xor	 ebx, ebx
  001b5	2b 7c 24 14	 sub	 edi, DWORD PTR _uTotalOutBefore$1$[esp+32]

; 1861 : 
; 1862 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1863 : 
; 1864 :             pfile_in_zip_read_info->crc32 =

  001b9	57		 push	 edi
  001ba	ff 74 24 20	 push	 DWORD PTR _bufBefore$1$[esp+36]
  001be	1b db		 sbb	 ebx, ebx
  001c0	01 7e 68	 add	 DWORD PTR [esi+104], edi
  001c3	ff 76 70	 push	 DWORD PTR [esi+112]
  001c6	11 5e 6c	 adc	 DWORD PTR [esi+108], ebx
  001c9	e8 00 00 00 00	 call	 _crc32@12

; 1865 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1866 :                         (uInt)(uOutThis));
; 1867 : 
; 1868 :             pfile_in_zip_read_info->rest_read_uncompressed -=

  001ce	29 be 80 00 00
	00		 sub	 DWORD PTR [esi+128], edi

; 1869 :                 uOutThis;
; 1870 : 
; 1871 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  001d4	8b 4c 24 10	 mov	 ecx, DWORD PTR _iRead$1$[esp+32]
  001d8	19 9e 84 00 00
	00		 sbb	 DWORD PTR [esi+132], ebx
  001de	89 46 70	 mov	 DWORD PTR [esi+112], eax
  001e1	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  001e4	2b 44 24 14	 sub	 eax, DWORD PTR _uTotalOutBefore$1$[esp+32]
  001e8	03 c8		 add	 ecx, eax

; 1872 : 
; 1873 :             if (err==Z_STREAM_END)

  001ea	8b 44 24 18	 mov	 eax, DWORD PTR _err$1$[esp+32]
  001ee	89 4c 24 10	 mov	 DWORD PTR _iRead$1$[esp+32], ecx
  001f2	83 f8 01	 cmp	 eax, 1
  001f5	0f 84 9f 00 00
	00		 je	 $LN36@unzReadCur

; 1875 :             if (err!=Z_OK)

  001fb	85 c0		 test	 eax, eax
  001fd	0f 85 82 00 00
	00		 jne	 $LN1@unzReadCur
  00203	eb 6b		 jmp	 SHORT $LN54@unzReadCur
$LN20@unzReadCur:

; 1765 :         {
; 1766 :             uInt uDoCopy,i ;
; 1767 : 
; 1768 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&

  00205	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00208	85 db		 test	 ebx, ebx
  0020a	75 0c		 jne	 SHORT $LN21@unzReadCur
  0020c	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  0020f	0b 46 7c	 or	 eax, DWORD PTR [esi+124]
  00212	0f 84 8d 00 00
	00		 je	 $LN38@unzReadCur
$LN21@unzReadCur:

; 1771 : 
; 1772 :             if (pfile_in_zip_read_info->stream.avail_out <

  00218	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0021b	0f 42 5e 14	 cmovb	 ebx, DWORD PTR [esi+20]

; 1773 :                             pfile_in_zip_read_info->stream.avail_in)
; 1774 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;
; 1775 :             else
; 1776 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;
; 1777 : 
; 1778 :             for (i=0;i<uDoCopy;i++)

  0021f	33 d2		 xor	 edx, edx
  00221	85 db		 test	 ebx, ebx
  00223	74 11		 je	 SHORT $LN5@unzReadCur
$LL40@unzReadCur:

; 1779 :                 *(pfile_in_zip_read_info->stream.next_out+i) =

  00225	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00228	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0022b	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  0022e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00231	42		 inc	 edx
  00232	3b d3		 cmp	 edx, ebx
  00234	72 ef		 jb	 SHORT $LL40@unzReadCur
$LN5@unzReadCur:

; 1780 :                         *(pfile_in_zip_read_info->stream.next_in+i);
; 1781 : 
; 1782 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uDoCopy;
; 1783 : 
; 1784 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,

  00236	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00239	01 5e 68	 add	 DWORD PTR [esi+104], ebx
  0023c	53		 push	 ebx
  0023d	83 56 6c 00	 adc	 DWORD PTR [esi+108], 0
  00241	57		 push	 edi
  00242	ff 76 70	 push	 DWORD PTR [esi+112]
  00245	e8 00 00 00 00	 call	 _crc32@12

; 1785 :                                 pfile_in_zip_read_info->stream.next_out,
; 1786 :                                 uDoCopy);
; 1787 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  0024a	29 9e 80 00 00
	00		 sub	 DWORD PTR [esi+128], ebx
  00250	89 46 70	 mov	 DWORD PTR [esi+112], eax

; 1788 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;
; 1789 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;
; 1790 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;

  00253	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00256	83 9e 84 00 00
	00 00		 sbb	 DWORD PTR [esi+132], 0
  0025d	29 5e 08	 sub	 DWORD PTR [esi+8], ebx
  00260	29 5e 14	 sub	 DWORD PTR [esi+20], ebx

; 1791 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  00263	01 5e 04	 add	 DWORD PTR [esi+4], ebx

; 1792 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  00266	01 5e 18	 add	 DWORD PTR [esi+24], ebx

; 1793 :             iRead += uDoCopy;

  00269	01 5c 24 10	 add	 DWORD PTR _iRead$1$[esp+32], ebx
  0026d	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN54@unzReadCur:
  00270	bb fd ff ff ff	 mov	 ebx, -3			; fffffffdH
$LN28@unzReadCur:

; 1717 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1718 :             pfile_in_zip_read_info->stream.avail_in;
; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  00275	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00279	0f 87 41 fe ff
	ff		 ja	 $LL2@unzReadCur
  0027f	8b 5c 24 10	 mov	 ebx, DWORD PTR _iRead$1$[esp+32]
$LN48@unzReadCur:

; 1876 :                 break;
; 1877 :         }
; 1878 :     }
; 1879 : 
; 1880 :     if (err==Z_OK)
; 1881 :         return iRead;

  00283	8b c3		 mov	 eax, ebx
$LN1@unzReadCur:

; 1882 :     return err;
; 1883 : }

  00285	5f		 pop	 edi
  00286	5e		 pop	 esi
  00287	5b		 pop	 ebx
  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c2 0c 00	 ret	 12			; 0000000cH
$LN34@unzReadCur:

; 1735 :                 return UNZ_ERRNO;

  0028e	83 c8 ff	 or	 eax, -1

; 1882 :     return err;
; 1883 : }

  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	5b		 pop	 ebx
  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c2 0c 00	 ret	 12			; 0000000cH
$LN36@unzReadCur:

; 1874 :                 return (iRead==0) ? UNZ_EOF : iRead;

  0029a	8b c1		 mov	 eax, ecx

; 1882 :     return err;
; 1883 : }

  0029c	5f		 pop	 edi
  0029d	5e		 pop	 esi
  0029e	5b		 pop	 ebx
  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c2 0c 00	 ret	 12			; 0000000cH
$LN38@unzReadCur:

; 1769 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1770 :                 return (iRead==0) ? UNZ_EOF : iRead;

  002a5	8b 44 24 10	 mov	 eax, DWORD PTR _iRead$1$[esp+32]

; 1882 :     return err;
; 1883 : }

  002a9	5f		 pop	 edi
  002aa	5e		 pop	 esi
  002ab	5b		 pop	 ebx
  002ac	8b e5		 mov	 esp, ebp
  002ae	5d		 pop	 ebp
  002af	c2 0c 00	 ret	 12			; 0000000cH
_unzReadCurrentFile@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unztell@4 PROC						; COMDAT

; 1890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1891 :     unz64_s* s;
; 1892 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1893 :     if (file==NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 09		 jne	 SHORT $LN2@unztell
$LN5@unztell:

; 1894 :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1902 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@unztell:

; 1895 :     s=(unz64_s*)file;
; 1896 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00013	8b 80 e0 00 00
	00		 mov	 eax, DWORD PTR [eax+224]

; 1897 : 
; 1898 :     if (pfile_in_zip_read_info==NULL)

  00019	85 c0		 test	 eax, eax
  0001b	74 ed		 je	 SHORT $LN5@unztell

; 1899 :         return UNZ_PARAMERROR;
; 1900 : 
; 1901 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  0001d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 1902 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
_unztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unztell64@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unztell64@4 PROC					; COMDAT

; 1905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 
; 1907 :     unz64_s* s;
; 1908 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1909 :     if (file==NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	75 0a		 jne	 SHORT $LN2@unztell64
$LN5@unztell64:

; 1910 :         return (ZPOS64_T)-1;

  0000a	83 c8 ff	 or	 eax, -1
  0000d	83 ca ff	 or	 edx, -1

; 1918 : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@unztell64:

; 1911 :     s=(unz64_s*)file;
; 1912 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00014	8b 92 e0 00 00
	00		 mov	 edx, DWORD PTR [edx+224]

; 1913 : 
; 1914 :     if (pfile_in_zip_read_info==NULL)

  0001a	85 d2		 test	 edx, edx
  0001c	74 ec		 je	 SHORT $LN5@unztell64

; 1915 :         return (ZPOS64_T)-1;
; 1916 : 
; 1917 :     return pfile_in_zip_read_info->total_out_64;

  0001e	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00021	8b 52 6c	 mov	 edx, DWORD PTR [edx+108]

; 1918 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_unztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzeof@4 PROC						; COMDAT

; 1925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1926 :     unz64_s* s;
; 1927 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1928 :     if (file==NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 09		 jne	 SHORT $LN2@unzeof
$LN7@unzeof:

; 1929 :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1940 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@unzeof:

; 1930 :     s=(unz64_s*)file;
; 1931 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00013	8b 89 e0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+224]

; 1932 : 
; 1933 :     if (pfile_in_zip_read_info==NULL)

  00019	85 c9		 test	 ecx, ecx
  0001b	74 ed		 je	 SHORT $LN7@unzeof

; 1934 :         return UNZ_PARAMERROR;
; 1935 : 
; 1936 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  0001d	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00023	0b 81 84 00 00
	00		 or	 eax, DWORD PTR [ecx+132]
  00029	75 09		 jne	 SHORT $LN4@unzeof

; 1937 :         return 1;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 1940 : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN4@unzeof:

; 1938 :     else
; 1939 :         return 0;

  00034	33 c0		 xor	 eax, eax

; 1940 : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_unzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetLocalExtrafield@12
_TEXT	SEGMENT
tv81 = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzGetLocalExtrafield@12 PROC				; COMDAT

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 1958 :     unz64_s* s;
; 1959 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1960 :     uInt read_now;
; 1961 :     ZPOS64_T size_to_read;
; 1962 : 
; 1963 :     if (file==NULL)

  0000b	8b 7d 08	 mov	 edi, DWORD PTR _file$[ebp]
  0000e	85 ff		 test	 edi, edi
  00010	75 0d		 jne	 SHORT $LN2@unzGetLoca
$LN13@unzGetLoca:

; 1964 :         return UNZ_PARAMERROR;

  00012	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
$LN2@unzGetLoca:

; 1965 :     s=(unz64_s*)file;
; 1966 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0001f	8b bf e0 00 00
	00		 mov	 edi, DWORD PTR [edi+224]

; 1967 : 
; 1968 :     if (pfile_in_zip_read_info==NULL)

  00025	85 ff		 test	 edi, edi
  00027	74 e9		 je	 SHORT $LN13@unzGetLoca

; 1969 :         return UNZ_PARAMERROR;
; 1970 : 
; 1971 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -

  00029	8b 77 58	 mov	 esi, DWORD PTR [edi+88]
  0002c	33 c0		 xor	 eax, eax
  0002e	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00031	2b f2		 sub	 esi, edx
  00033	1b 47 64	 sbb	 eax, DWORD PTR [edi+100]

; 1972 :                 pfile_in_zip_read_info->pos_local_extrafield);
; 1973 : 
; 1974 :     if (buf==NULL)

  00036	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0003a	74 7c		 je	 SHORT $LN12@unzGetLoca

; 1975 :         return (int)size_to_read;
; 1976 : 
; 1977 :     if (len>size_to_read)

  0003c	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0003f	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR tv81[esp+16], 0
  00047	39 44 24 0c	 cmp	 DWORD PTR tv81[esp+16], eax
  0004b	72 06		 jb	 SHORT $LN5@unzGetLoca
  0004d	77 06		 ja	 SHORT $LN6@unzGetLoca
  0004f	3b ce		 cmp	 ecx, esi
  00051	77 02		 ja	 SHORT $LN6@unzGetLoca
$LN5@unzGetLoca:

; 1978 :         read_now = (uInt)size_to_read;
; 1979 :     else
; 1980 :         read_now = (uInt)len ;

  00053	8b f1		 mov	 esi, ecx
$LN6@unzGetLoca:

; 1981 : 
; 1982 :     if (read_now==0)

  00055	85 f6		 test	 esi, esi
  00057	75 0a		 jne	 SHORT $LN7@unzGetLoca

; 1983 :         return 0;

  00059	33 c0		 xor	 eax, eax

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 0c 00	 ret	 12			; 0000000cH
$LN7@unzGetLoca:

; 1984 : 
; 1985 :     if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1986 :               pfile_in_zip_read_info->filestream,
; 1987 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1988 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1989 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00063	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  00066	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00069	03 ca		 add	 ecx, edx
  0006b	8b 97 b4 00 00
	00		 mov	 edx, DWORD PTR [edi+180]
  00071	13 47 64	 adc	 eax, DWORD PTR [edi+100]
  00074	6a 00		 push	 0
  00076	50		 push	 eax
  00077	51		 push	 ecx
  00078	8d 8f 88 00 00
	00		 lea	 ecx, DWORD PTR [edi+136]
  0007e	e8 00 00 00 00	 call	 _call_zseek64
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	85 c0		 test	 eax, eax
  00088	74 0b		 je	 SHORT $LN8@unzGetLoca

; 1990 :         return UNZ_ERRNO;

  0008a	83 c8 ff	 or	 eax, -1

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 0c 00	 ret	 12			; 0000000cH
$LN8@unzGetLoca:

; 1991 : 
; 1992 :     if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1993 :               pfile_in_zip_read_info->filestream,
; 1994 :               buf,read_now)!=read_now)

  00095	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  0009b	56		 push	 esi
  0009c	ff 75 0c	 push	 DWORD PTR _buf$[ebp]
  0009f	ff b7 b4 00 00
	00		 push	 DWORD PTR [edi+180]
  000a5	ff b7 a4 00 00
	00		 push	 DWORD PTR [edi+164]
  000ab	ff d0		 call	 eax
  000ad	83 c9 ff	 or	 ecx, -1
  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	3b c6		 cmp	 eax, esi
  000b5	0f 45 f1	 cmovne	 esi, ecx
$LN12@unzGetLoca:

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  000b8	5f		 pop	 edi
  000b9	8b c6		 mov	 eax, esi
  000bb	5e		 pop	 esi
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 0c 00	 ret	 12			; 0000000cH
_unzGetLocalExtrafield@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzCloseCurrentFile@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzCloseCurrentFile@4 PROC				; COMDAT

; 2005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2006 :     int err=UNZ_OK;
; 2007 : 
; 2008 :     unz64_s* s;
; 2009 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 2010 :     if (file==NULL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	85 db		 test	 ebx, ebx
  0000c	75 09		 jne	 SHORT $LN2@unzCloseCu

; 2011 :         return UNZ_PARAMERROR;

  0000e	8d 47 9a	 lea	 eax, DWORD PTR [edi-102]
  00011	5f		 pop	 edi
  00012	5b		 pop	 ebx

; 2043 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN2@unzCloseCu:
  00017	56		 push	 esi

; 2012 :     s=(unz64_s*)file;
; 2013 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00018	8b b3 e0 00 00
	00		 mov	 esi, DWORD PTR [ebx+224]

; 2014 : 
; 2015 :     if (pfile_in_zip_read_info==NULL)

  0001e	85 f6		 test	 esi, esi
  00020	75 0a		 jne	 SHORT $LN3@unzCloseCu

; 2016 :         return UNZ_PARAMERROR;

  00022	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  00025	5e		 pop	 esi
  00026	5f		 pop	 edi
  00027	5b		 pop	 ebx

; 2043 : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN3@unzCloseCu:

; 2017 : 
; 2018 : 
; 2019 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&

  0002c	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00032	0b 86 84 00 00
	00		 or	 eax, DWORD PTR [esi+132]
  00038	75 16		 jne	 SHORT $LN5@unzCloseCu
  0003a	39 be c8 00 00
	00		 cmp	 DWORD PTR [esi+200], edi
  00040	75 0e		 jne	 SHORT $LN5@unzCloseCu

; 2020 :         (!pfile_in_zip_read_info->raw))
; 2021 :     {
; 2022 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  00042	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00045	b9 97 ff ff ff	 mov	 ecx, -105		; ffffff97H
  0004a	3b 46 74	 cmp	 eax, DWORD PTR [esi+116]
  0004d	0f 45 f9	 cmovne	 edi, ecx
$LN5@unzCloseCu:

; 2023 :             err=UNZ_CRCERROR;
; 2024 :     }
; 2025 : 
; 2026 : 
; 2027 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	85 c0		 test	 eax, eax
  00054	74 0a		 je	 SHORT $LN6@unzCloseCu
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0005d	83 c4 04	 add	 esp, 4
$LN6@unzCloseCu:

; 2028 :     pfile_in_zip_read_info->read_buffer = NULL;
; 2029 :     if (pfile_in_zip_read_info->stream_initialised == Z_DEFLATED)

  00060	83 7e 48 08	 cmp	 DWORD PTR [esi+72], 8
  00064	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0006a	75 09		 jne	 SHORT $LN7@unzCloseCu

; 2030 :         inflateEnd(&pfile_in_zip_read_info->stream);

  0006c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _inflateEnd@4
$LN7@unzCloseCu:

; 2031 : #ifdef HAVE_BZIP2
; 2032 :     else if (pfile_in_zip_read_info->stream_initialised == Z_BZIP2ED)
; 2033 :         BZ2_bzDecompressEnd(&pfile_in_zip_read_info->bstream);
; 2034 : #endif
; 2035 : 
; 2036 : 
; 2037 :     pfile_in_zip_read_info->stream_initialised = 0;
; 2038 :     TRYFREE(pfile_in_zip_read_info);

  00075	56		 push	 esi
  00076	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00083	83 c4 04	 add	 esp, 4

; 2039 : 
; 2040 :     s->pfile_in_zip_read=NULL;

  00086	c7 83 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+224], 0

; 2041 : 
; 2042 :     return err;

  00090	8b c7		 mov	 eax, edi
  00092	5e		 pop	 esi
  00093	5f		 pop	 edi
  00094	5b		 pop	 ebx

; 2043 : }

  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_unzCloseCurrentFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalComment@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_szComment$ = 12					; size = 4
_uSizeBuf$ = 16						; size = 4
_unzGetGlobalComment@12 PROC				; COMDAT

; 2052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2053 :     unz64_s* s;
; 2054 :     uLong uReadThis ;
; 2055 :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN2@unzGetGlob

; 2056 :         return (int)UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  0000e	5e		 pop	 esi

; 2076 : }

  0000f	5d		 pop	 ebp
  00010	c2 0c 00	 ret	 12			; 0000000cH
$LN2@unzGetGlob:

; 2057 :     s=(unz64_s*)file;
; 2058 : 
; 2059 :     uReadThis = uSizeBuf;

  00013	8b 4d 10	 mov	 ecx, DWORD PTR _uSizeBuf$[ebp]

; 2060 :     if (uReadThis>s->gi.size_comment)

  00016	3b 4e 40	 cmp	 ecx, DWORD PTR [esi+64]

; 2061 :         uReadThis = s->gi.size_comment;
; 2062 : 
; 2063 :     if (ZSEEK64(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00019	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0001c	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0001f	53		 push	 ebx
  00020	8b d9		 mov	 ebx, ecx
  00022	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00025	0f 47 5e 40	 cmova	 ebx, DWORD PTR [esi+64]
  00029	83 c1 16	 add	 ecx, 22			; 00000016H
  0002c	6a 00		 push	 0
  0002e	83 d0 00	 adc	 eax, 0
  00031	50		 push	 eax
  00032	51		 push	 ecx
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 _call_zseek64
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN4@unzGetGlob

; 2064 :         return UNZ_ERRNO;

  00041	5b		 pop	 ebx
  00042	83 c8 ff	 or	 eax, -1
  00045	5e		 pop	 esi

; 2076 : }

  00046	5d		 pop	 ebp
  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN4@unzGetGlob:
  0004a	57		 push	 edi

; 2065 : 
; 2066 :     if (uReadThis>0)

  0004b	8b 7d 0c	 mov	 edi, DWORD PTR _szComment$[ebp]
  0004e	85 db		 test	 ebx, ebx
  00050	74 21		 je	 SHORT $LN6@unzGetGlob

; 2067 :     {
; 2068 :       *szComment='\0';
; 2069 :       if (ZREAD64(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  00052	53		 push	 ebx
  00053	c6 07 00	 mov	 BYTE PTR [edi], 0
  00056	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00059	57		 push	 edi
  0005a	ff 76 30	 push	 DWORD PTR [esi+48]
  0005d	ff 76 1c	 push	 DWORD PTR [esi+28]
  00060	ff d0		 call	 eax
  00062	83 c4 10	 add	 esp, 16			; 00000010H
  00065	3b c3		 cmp	 eax, ebx
  00067	74 0a		 je	 SHORT $LN6@unzGetGlob

; 2070 :         return UNZ_ERRNO;

  00069	5f		 pop	 edi
  0006a	5b		 pop	 ebx
  0006b	83 c8 ff	 or	 eax, -1
  0006e	5e		 pop	 esi

; 2076 : }

  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
$LN6@unzGetGlob:

; 2071 :     }
; 2072 : 
; 2073 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  00073	85 ff		 test	 edi, edi
  00075	74 0c		 je	 SHORT $LN7@unzGetGlob
  00077	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0007a	39 45 10	 cmp	 DWORD PTR _uSizeBuf$[ebp], eax
  0007d	76 04		 jbe	 SHORT $LN7@unzGetGlob

; 2074 :         *(szComment+s->gi.size_comment)='\0';

  0007f	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN7@unzGetGlob:
  00083	5f		 pop	 edi

; 2075 :     return (int)uReadThis;

  00084	8b c3		 mov	 eax, ebx
  00086	5b		 pop	 ebx
  00087	5e		 pop	 esi

; 2076 : }

  00088	5d		 pop	 ebp
  00089	c2 0c 00	 ret	 12			; 0000000cH
_unzGetGlobalComment@12 ENDP
_TEXT	ENDS
END
