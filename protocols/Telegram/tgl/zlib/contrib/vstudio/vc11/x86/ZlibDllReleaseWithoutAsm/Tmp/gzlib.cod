; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@		; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@		; `string'
EXTRN	__imp__malloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__wcstombs:PROC
EXTRN	__imp___open:PROC
EXTRN	__imp___wopen:PROC
EXTRN	__imp___lseeki64:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@ DB '<fd:%d>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
PUBLIC	_gz_error
PUBLIC	_gzclearerr@4
PUBLIC	_gzerror@8
PUBLIC	_gzeof@4
PUBLIC	_gzoffset@4
PUBLIC	_gzoffset64@4
PUBLIC	_gztell@4
PUBLIC	_gztell64@4
PUBLIC	_gzseek@12
PUBLIC	_gzseek64@16
PUBLIC	_gzrewind@4
PUBLIC	_gzbuffer@8
PUBLIC	_gzopen_w@8
PUBLIC	_gzdopen@8
PUBLIC	_gzopen@8
PUBLIC	__snprintf
PUBLIC	__vsnprintf
PUBLIC	__vsnprintf_l
PUBLIC	___local_stdio_printf_options
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__Locale$dead$ = 12					; size = 4
__ArgList$ = 16						; size = 4
__vsnprintf_l PROC					; COMDAT
; __Buffer$ = ecx
; __BufferCount$ = edx

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 10	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR __Format$[ebp]
  0000b	52		 push	 edx
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	83 c9 01	 or	 ecx, 1
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vsnprintf PROC					; COMDAT
; __Buffer$ = ecx
; __BufferCount$ = edx

; 1405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR __Format$[ebp]
  0000b	52		 push	 edx
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	83 c9 01	 or	 ecx, 1
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1406 :     #pragma warning(push)
; 1407 :     #pragma warning(disable: 4996) // Deprecation
; 1408 :     return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1409 :     #pragma warning(pop)
; 1410 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1960 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00026	83 c9 ff	 or	 ecx, -1
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002c	85 c0		 test	 eax, eax
  0002e	0f 48 c1	 cmovs	 eax, ecx

; 1961 :     int _Result;
; 1962 :     va_list _ArgList;
; 1963 :     __crt_va_start(_ArgList, _Format);
; 1964 : #pragma warning(suppress:28719)    // __WARNING_BANNED_API_USAGE
; 1965 :     _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1966 :     __crt_va_end(_ArgList);
; 1967 :     return _Result;
; 1968 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 78   :     state->x.have = 0;              /* no output data available */
; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00003	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	75 15		 jne	 SHORT $LN2@gz_reset

; 80   :         state->eof = 0;             /* not at end of file */

  00012	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 81   :         state->past = 0;            /* have not read past end yet */

  00019	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 82   :         state->how = LOOK;          /* look for gzip header */

  00020	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@gz_reset:

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00027	6a 00		 push	 0
  00029	33 d2		 xor	 edx, edx
  0002b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00032	e8 00 00 00 00	 call	 _gz_error
  00037	83 c4 04	 add	 esp, 4

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  00048	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0004f	5e		 pop	 esi

; 88   : }

  00050	c3		 ret	 0
_gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gz_open
_TEXT	SEGMENT
_exclusive$1$ = -12					; size = 4
_fd$1$ = -8						; size = 4
_path$1$ = -4						; size = 4
_mode$ = 8						; size = 4
_gz_open PROC						; COMDAT
; _path$ = ecx
; _fd$ = edx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 96   :     gz_statep state;
; 97   :     size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	89 5d fc	 mov	 DWORD PTR _path$1$[ebp], ebx
  0000e	89 45 f4	 mov	 DWORD PTR _exclusive$1$[ebp], eax
  00011	56		 push	 esi
  00012	8b f2		 mov	 esi, edx
  00014	89 75 f8	 mov	 DWORD PTR _fd$1$[ebp], esi

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  00017	85 db		 test	 ebx, ebx
  00019	75 06		 jne	 SHORT $LN6@gz_open
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx

; 265  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN6@gz_open:
  00021	57		 push	 edi

; 108  :         return NULL;
; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = (gz_statep)malloc(sizeof(gz_state));

  00022	68 a0 00 00 00	 push	 160			; 000000a0H
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002d	8b f8		 mov	 edi, eax
  0002f	83 c4 04	 add	 esp, 4

; 112  :     if (state == NULL)

  00032	85 ff		 test	 edi, edi
  00034	0f 84 e6 01 00
	00		 je	 $LN54@gz_open

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  0003d	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  00044	c7 47 20 00 20
	00 00		 mov	 DWORD PTR [edi+32], 8192 ; 00002000H
  0004b	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  00052	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00059	c7 47 48 ff ff
	ff ff		 mov	 DWORD PTR [edi+72], -1
  00060	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0
  00067	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  0006e	8a 01		 mov	 al, BYTE PTR [ecx]
  00070	84 c0		 test	 al, al
  00072	0f 84 88 00 00
	00		 je	 $LN48@gz_open
$LL2@gz_open:

; 124  :         if (*mode >= '0' && *mode <= '9')

  00078	3c 30		 cmp	 al, 48			; 00000030H
  0007a	7c 0f		 jl	 SHORT $LN8@gz_open
  0007c	3c 39		 cmp	 al, 57			; 00000039H
  0007e	7f 0b		 jg	 SHORT $LN8@gz_open

; 125  :             state->level = *mode - '0';

  00080	0f be c0	 movsx	 eax, al
  00083	83 e8 30	 sub	 eax, 48			; 00000030H
  00086	89 47 48	 mov	 DWORD PTR [edi+72], eax
  00089	eb 69		 jmp	 SHORT $LN21@gz_open
$LN8@gz_open:

; 126  :         else
; 127  :             switch (*mode) {

  0008b	0f be c0	 movsx	 eax, al
  0008e	83 c0 d5	 add	 eax, -43		; ffffffd5H
  00091	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  00094	77 5e		 ja	 SHORT $LN21@gz_open
  00096	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN49@gz_open[eax]
  0009d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN57@gz_open[eax*4]
$LN10@gz_open:

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  000a4	c7 47 10 4f 1c
	00 00		 mov	 DWORD PTR [edi+16], 7247 ; 00001c4fH

; 130  :                 break;

  000ab	eb 47		 jmp	 SHORT $LN21@gz_open
$LN11@gz_open:

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  000ad	c7 47 10 b1 79
	00 00		 mov	 DWORD PTR [edi+16], 31153 ; 000079b1H

; 134  :                 break;

  000b4	eb 3e		 jmp	 SHORT $LN21@gz_open
$LN12@gz_open:

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000b6	c7 47 10 01 00
	00 00		 mov	 DWORD PTR [edi+16], 1

; 137  :                 break;

  000bd	eb 35		 jmp	 SHORT $LN21@gz_open
$LN15@gz_open:

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);
; 141  :                 return NULL;
; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  000bf	b8 01 00 00 00	 mov	 eax, 1
  000c4	89 45 f4	 mov	 DWORD PTR _exclusive$1$[ebp], eax

; 152  :                 break;

  000c7	eb 2b		 jmp	 SHORT $LN21@gz_open
$LN16@gz_open:

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000c9	c7 47 4c 01 00
	00 00		 mov	 DWORD PTR [edi+76], 1

; 156  :                 break;

  000d0	eb 22		 jmp	 SHORT $LN21@gz_open
$LN17@gz_open:

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  000d2	c7 47 4c 02 00
	00 00		 mov	 DWORD PTR [edi+76], 2

; 159  :                 break;

  000d9	eb 19		 jmp	 SHORT $LN21@gz_open
$LN18@gz_open:

; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000db	c7 47 4c 03 00
	00 00		 mov	 DWORD PTR [edi+76], 3

; 162  :                 break;

  000e2	eb 10		 jmp	 SHORT $LN21@gz_open
$LN19@gz_open:

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000e4	c7 47 4c 04 00
	00 00		 mov	 DWORD PTR [edi+76], 4

; 165  :                 break;

  000eb	eb 07		 jmp	 SHORT $LN21@gz_open
$LN20@gz_open:

; 166  :             case 'T':
; 167  :                 state->direct = 1;

  000ed	c7 47 2c 01 00
	00 00		 mov	 DWORD PTR [edi+44], 1
$LN21@gz_open:

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  000f4	8a 41 01	 mov	 al, BYTE PTR [ecx+1]

; 168  :                 break;
; 169  :             default:        /* could consider as an error, but just ignore */
; 170  :                 ;
; 171  :             }
; 172  :         mode++;

  000f7	41		 inc	 ecx
  000f8	84 c0		 test	 al, al
  000fa	0f 85 78 ff ff
	ff		 jne	 $LL2@gz_open
$LN48@gz_open:

; 173  :     }
; 174  : 
; 175  :     /* must provide an "r", "w", or "a" */
; 176  :     if (state->mode == GZ_NONE) {

  00100	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00103	85 c0		 test	 eax, eax
  00105	74 56		 je	 SHORT $LN55@gz_open

; 177  :         free(state);
; 178  :         return NULL;
; 179  :     }
; 180  : 
; 181  :     /* can't force transparent read */
; 182  :     if (state->mode == GZ_READ) {

  00107	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0010c	75 0d		 jne	 SHORT $LN23@gz_open

; 183  :         if (state->direct) {

  0010e	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00112	75 49		 jne	 SHORT $LN55@gz_open

; 184  :             free(state);
; 185  :             return NULL;
; 186  :         }
; 187  :         state->direct = 1;      /* for empty file */

  00114	c7 47 2c 01 00
	00 00		 mov	 DWORD PTR [edi+44], 1
$LN23@gz_open:

; 188  :     }
; 189  : 
; 190  :     /* save the path name for error messages */
; 191  : #ifdef _WIN32
; 192  :     if (fd == -2) {

  0011b	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0011e	75 19		 jne	 SHORT $LN25@gz_open

; 193  :         len = wcstombs(NULL, path, 0);

  00120	6a 00		 push	 0
  00122	53		 push	 ebx
  00123	6a 00		 push	 0
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstombs
  0012b	8b f0		 mov	 esi, eax
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :         if (len == (size_t)-1)

  00130	83 fe ff	 cmp	 esi, -1
  00133	75 14		 jne	 SHORT $LN26@gz_open

; 195  :             len = 0;

  00135	33 f6		 xor	 esi, esi

; 196  :     }

  00137	eb 10		 jmp	 SHORT $LN26@gz_open
$LN25@gz_open:

; 197  :     else
; 198  : #endif
; 199  :         len = strlen((const char *)path);

  00139	8b f3		 mov	 esi, ebx
  0013b	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0013e	66 90		 npad	 2
$LL50@gz_open:
  00140	8a 06		 mov	 al, BYTE PTR [esi]
  00142	46		 inc	 esi
  00143	84 c0		 test	 al, al
  00145	75 f9		 jne	 SHORT $LL50@gz_open
  00147	2b f1		 sub	 esi, ecx
$LN26@gz_open:

; 200  :     state->path = (char *)malloc(len + 1);

  00149	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  0014c	53		 push	 ebx
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00153	83 c4 04	 add	 esp, 4
  00156	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 201  :     if (state->path == NULL) {

  00159	85 c0		 test	 eax, eax
  0015b	75 13		 jne	 SHORT $LN28@gz_open
$LN55@gz_open:

; 202  :         free(state);

  0015d	57		 push	 edi
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00164	83 c4 04	 add	 esp, 4

; 203  :         return NULL;

  00167	33 c0		 xor	 eax, eax
  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi
  0016b	5b		 pop	 ebx

; 265  : }

  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
$LN28@gz_open:

; 204  :     }
; 205  : #ifdef _WIN32
; 206  :     if (fd == -2)

  00170	8b 55 f8	 mov	 edx, DWORD PTR _fd$1$[ebp]
  00173	83 fa fe	 cmp	 edx, -2			; fffffffeH
  00176	75 1a		 jne	 SHORT $LN29@gz_open

; 207  :         if (len)

  00178	85 f6		 test	 esi, esi

; 208  :             wcstombs(state->path, path, len + 1);

  0017a	8b 75 fc	 mov	 esi, DWORD PTR _path$1$[ebp]
  0017d	74 0e		 je	 SHORT $LN31@gz_open
  0017f	53		 push	 ebx
  00180	56		 push	 esi
  00181	50		 push	 eax
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstombs
  00188	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018b	eb 18		 jmp	 SHORT $LN52@gz_open
$LN31@gz_open:

; 209  :         else
; 210  :             *(state->path) = 0;

  0018d	c6 00 00	 mov	 BYTE PTR [eax], 0
  00190	eb 16		 jmp	 SHORT $LN30@gz_open
$LN29@gz_open:

; 211  :     else
; 212  : #endif
; 213  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 214  :         snprintf(state->path, len + 1, "%s", (const char *)path);

  00192	8b 75 fc	 mov	 esi, DWORD PTR _path$1$[ebp]
  00195	56		 push	 esi
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0019b	53		 push	 ebx
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 __snprintf
  001a2	83 c4 10	 add	 esp, 16			; 00000010H
$LN52@gz_open:
  001a5	8b 55 f8	 mov	 edx, DWORD PTR _fd$1$[ebp]
$LN30@gz_open:

; 215  : #else
; 216  :         strcpy(state->path, path);
; 217  : #endif
; 218  : 
; 219  :     /* compute the flags for open() */
; 220  :     oflag =

  001a8	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  001ab	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  001b1	75 04		 jne	 SHORT $LN38@gz_open
  001b3	33 c0		 xor	 eax, eax
  001b5	eb 27		 jmp	 SHORT $LN39@gz_open
$LN38@gz_open:
  001b7	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  001bd	b8 08 00 00 00	 mov	 eax, 8
  001c2	8b 4d f4	 mov	 ecx, DWORD PTR _exclusive$1$[ebp]
  001c5	bb 00 02 00 00	 mov	 ebx, 512		; 00000200H
  001ca	0f 44 c3	 cmove	 eax, ebx
  001cd	f7 d9		 neg	 ecx
  001cf	1b c9		 sbb	 ecx, ecx
  001d1	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  001d7	0b c1		 or	 eax, ecx
  001d9	0d 01 01 00 00	 or	 eax, 257		; 00000101H
$LN39@gz_open:
  001de	0d 00 80 00 00	 or	 eax, 32768		; 00008000H

; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));
; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (

  001e3	83 fa ff	 cmp	 edx, -1
  001e6	7f 1f		 jg	 SHORT $LN41@gz_open
  001e8	68 b6 01 00 00	 push	 438			; 000001b6H
  001ed	50		 push	 eax
  001ee	56		 push	 esi
  001ef	83 fa fe	 cmp	 edx, -2			; fffffffeH
  001f2	75 08		 jne	 SHORT $LN40@gz_open
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wopen
  001fa	eb 06		 jmp	 SHORT $LN53@gz_open
$LN40@gz_open:
  001fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___open
$LN53@gz_open:
  00202	8b d0		 mov	 edx, eax
  00204	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@gz_open:
  00207	89 57 14	 mov	 DWORD PTR [edi+20], edx

; 242  : #ifdef _WIN32
; 243  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 244  : #endif
; 245  :         open((const char *)path, oflag, 0666));
; 246  :     if (state->fd == -1) {

  0020a	83 fa ff	 cmp	 edx, -1
  0020d	75 1a		 jne	 SHORT $LN33@gz_open

; 247  :         free(state->path);

  0020f	ff 77 18	 push	 DWORD PTR [edi+24]
  00212	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  00218	ff d6		 call	 esi

; 248  :         free(state);

  0021a	57		 push	 edi
  0021b	ff d6		 call	 esi
  0021d	83 c4 08	 add	 esp, 8
$LN54@gz_open:

; 249  :         return NULL;

  00220	5f		 pop	 edi
  00221	5e		 pop	 esi
  00222	33 c0		 xor	 eax, eax
  00224	5b		 pop	 ebx

; 265  : }

  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c3		 ret	 0
$LN33@gz_open:

; 250  :     }
; 251  :     if (state->mode == GZ_APPEND)

  00229	83 7f 10 01	 cmp	 DWORD PTR [edi+16], 1
  0022d	75 07		 jne	 SHORT $LN34@gz_open

; 252  :         state->mode = GZ_WRITE;         /* simplify later checks */

  0022f	c7 47 10 b1 79
	00 00		 mov	 DWORD PTR [edi+16], 31153 ; 000079b1H
$LN34@gz_open:

; 253  : 
; 254  :     /* save the current position for rewinding (only if reading) */
; 255  :     if (state->mode == GZ_READ) {

  00236	81 7f 10 4f 1c
	00 00		 cmp	 DWORD PTR [edi+16], 7247 ; 00001c4fH
  0023d	75 2b		 jne	 SHORT $LN36@gz_open

; 256  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  0023f	6a 01		 push	 1
  00241	6a 00		 push	 0
  00243	6a 00		 push	 0
  00245	52		 push	 edx
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64
  0024c	89 47 38	 mov	 DWORD PTR [edi+56], eax
  0024f	83 c4 10	 add	 esp, 16			; 00000010H

; 257  :         if (state->start == -1) state->start = 0;

  00252	23 c2		 and	 eax, edx
  00254	89 57 3c	 mov	 DWORD PTR [edi+60], edx
  00257	83 f8 ff	 cmp	 eax, -1
  0025a	75 0e		 jne	 SHORT $LN36@gz_open
  0025c	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  00263	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
$LN36@gz_open:

; 258  :     }
; 259  : 
; 260  :     /* initialize stream */
; 261  :     gz_reset(state);

  0026a	8b cf		 mov	 ecx, edi
  0026c	e8 00 00 00 00	 call	 _gz_reset

; 262  : 
; 263  :     /* return stream */
; 264  :     return (gzFile)state;

  00271	8b c7		 mov	 eax, edi
  00273	5f		 pop	 edi
  00274	5e		 pop	 esi
  00275	5b		 pop	 ebx

; 265  : }

  00276	8b e5		 mov	 esp, ebp
  00278	5d		 pop	 ebp
  00279	c3		 ret	 0
  0027a	66 90		 npad	 2
$LN57@gz_open:
  0027c	00 00 00 00	 DD	 $LN55@gz_open
  00280	00 00 00 00	 DD	 $LN19@gz_open
  00284	00 00 00 00	 DD	 $LN18@gz_open
  00288	00 00 00 00	 DD	 $LN20@gz_open
  0028c	00 00 00 00	 DD	 $LN12@gz_open
  00290	00 00 00 00	 DD	 $LN16@gz_open
  00294	00 00 00 00	 DD	 $LN17@gz_open
  00298	00 00 00 00	 DD	 $LN10@gz_open
  0029c	00 00 00 00	 DD	 $LN11@gz_open
  002a0	00 00 00 00	 DD	 $LN15@gz_open
  002a4	00 00 00 00	 DD	 $LN21@gz_open
$LN49@gz_open:
  002a8	00		 DB	 0
  002a9	0a		 DB	 10			; 0000000aH
  002aa	0a		 DB	 10			; 0000000aH
  002ab	0a		 DB	 10			; 0000000aH
  002ac	0a		 DB	 10			; 0000000aH
  002ad	0a		 DB	 10			; 0000000aH
  002ae	0a		 DB	 10			; 0000000aH
  002af	0a		 DB	 10			; 0000000aH
  002b0	0a		 DB	 10			; 0000000aH
  002b1	0a		 DB	 10			; 0000000aH
  002b2	0a		 DB	 10			; 0000000aH
  002b3	0a		 DB	 10			; 0000000aH
  002b4	0a		 DB	 10			; 0000000aH
  002b5	0a		 DB	 10			; 0000000aH
  002b6	0a		 DB	 10			; 0000000aH
  002b7	0a		 DB	 10			; 0000000aH
  002b8	0a		 DB	 10			; 0000000aH
  002b9	0a		 DB	 10			; 0000000aH
  002ba	0a		 DB	 10			; 0000000aH
  002bb	0a		 DB	 10			; 0000000aH
  002bc	0a		 DB	 10			; 0000000aH
  002bd	0a		 DB	 10			; 0000000aH
  002be	0a		 DB	 10			; 0000000aH
  002bf	0a		 DB	 10			; 0000000aH
  002c0	0a		 DB	 10			; 0000000aH
  002c1	0a		 DB	 10			; 0000000aH
  002c2	0a		 DB	 10			; 0000000aH
  002c3	01		 DB	 1
  002c4	0a		 DB	 10			; 0000000aH
  002c5	0a		 DB	 10			; 0000000aH
  002c6	0a		 DB	 10			; 0000000aH
  002c7	0a		 DB	 10			; 0000000aH
  002c8	0a		 DB	 10			; 0000000aH
  002c9	0a		 DB	 10			; 0000000aH
  002ca	0a		 DB	 10			; 0000000aH
  002cb	0a		 DB	 10			; 0000000aH
  002cc	0a		 DB	 10			; 0000000aH
  002cd	0a		 DB	 10			; 0000000aH
  002ce	0a		 DB	 10			; 0000000aH
  002cf	02		 DB	 2
  002d0	0a		 DB	 10			; 0000000aH
  002d1	03		 DB	 3
  002d2	0a		 DB	 10			; 0000000aH
  002d3	0a		 DB	 10			; 0000000aH
  002d4	0a		 DB	 10			; 0000000aH
  002d5	0a		 DB	 10			; 0000000aH
  002d6	0a		 DB	 10			; 0000000aH
  002d7	0a		 DB	 10			; 0000000aH
  002d8	0a		 DB	 10			; 0000000aH
  002d9	0a		 DB	 10			; 0000000aH
  002da	0a		 DB	 10			; 0000000aH
  002db	0a		 DB	 10			; 0000000aH
  002dc	0a		 DB	 10			; 0000000aH
  002dd	0a		 DB	 10			; 0000000aH
  002de	04		 DB	 4
  002df	0a		 DB	 10			; 0000000aH
  002e0	0a		 DB	 10			; 0000000aH
  002e1	0a		 DB	 10			; 0000000aH
  002e2	0a		 DB	 10			; 0000000aH
  002e3	05		 DB	 5
  002e4	0a		 DB	 10			; 0000000aH
  002e5	06		 DB	 6
  002e6	0a		 DB	 10			; 0000000aH
  002e7	0a		 DB	 10			; 0000000aH
  002e8	0a		 DB	 10			; 0000000aH
  002e9	0a		 DB	 10			; 0000000aH
  002ea	0a		 DB	 10			; 0000000aH
  002eb	0a		 DB	 10			; 0000000aH
  002ec	0a		 DB	 10			; 0000000aH
  002ed	0a		 DB	 10			; 0000000aH
  002ee	0a		 DB	 10			; 0000000aH
  002ef	07		 DB	 7
  002f0	0a		 DB	 10			; 0000000aH
  002f1	0a		 DB	 10			; 0000000aH
  002f2	0a		 DB	 10			; 0000000aH
  002f3	0a		 DB	 10			; 0000000aH
  002f4	08		 DB	 8
  002f5	09		 DB	 9
_gz_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzopen@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen@8 PROC						; COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  :     return gz_open(path, -1, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 04	 add	 esp, 4

; 273  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzdopen@8
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen@8 PROC						; COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 288  :     char *path;         /* identifier for error messages */
; 289  :     gzFile gz;
; 290  : 
; 291  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _fd$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	74 3f		 je	 SHORT $LN3@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00015	8b f8		 mov	 edi, eax
  00017	83 c4 04	 add	 esp, 4
  0001a	85 ff		 test	 edi, edi
  0001c	74 2e		 je	 SHORT $LN3@gzdopen

; 293  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 294  :     snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd); /* for debugging */

  0001e	56		 push	 esi
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
  00024	6a 13		 push	 19			; 00000013H
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 __snprintf

; 295  : #else
; 296  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 297  : #endif
; 298  :     gz = gz_open(path, fd, mode);

  0002c	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  0002f	8b d6		 mov	 edx, esi
  00031	8b cf		 mov	 ecx, edi
  00033	e8 00 00 00 00	 call	 _gz_open

; 299  :     free(path);

  00038	57		 push	 edi
  00039	8b f0		 mov	 esi, eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00041	83 c4 18	 add	 esp, 24			; 00000018H

; 300  :     return gz;

  00044	8b c6		 mov	 eax, esi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi

; 301  : }

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN3@gzdopen:
  0004c	5f		 pop	 edi

; 292  :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 301  : }

  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
_gzdopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzopen_w@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen_w@8 PROC					; COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 309  :     return gz_open(path, -2, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0000e	e8 00 00 00 00	 call	 _gz_open
  00013	83 c4 04	 add	 esp, 4

; 310  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
_gzopen_w@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzbuffer@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer@8 PROC					; COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  :     gz_statep state;
; 319  : 
; 320  :     /* get internal structure and check integrity */
; 321  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 07		 jne	 SHORT $LN2@gzbuffer
$LN7@gzbuffer:

; 322  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1

; 336  : }

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
$LN2@gzbuffer:

; 323  :     state = (gz_statep)file;
; 324  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00011	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00014	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00019	74 07		 je	 SHORT $LN3@gzbuffer
  0001b	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00020	75 e8		 jne	 SHORT $LN7@gzbuffer
$LN3@gzbuffer:

; 325  :         return -1;
; 326  : 
; 327  :     /* make sure we haven't already allocated memory */
; 328  :     if (state->size != 0)

  00022	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00026	75 e2		 jne	 SHORT $LN7@gzbuffer

; 329  :         return -1;
; 330  : 
; 331  :     /* check and set requested size */
; 332  :     if (size < 2)

  00028	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002b	ba 02 00 00 00	 mov	 edx, 2
  00030	3b c2		 cmp	 eax, edx
  00032	0f 42 c2	 cmovb	 eax, edx

; 333  :         size = 2;               /* need two bytes to check magic header */
; 334  :     state->want = size;

  00035	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 335  :     return 0;

  00038	33 c0		 xor	 eax, eax

; 336  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_gzbuffer@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzrewind@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind@4 PROC					; COMDAT

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 342  :     gz_statep state;
; 343  : 
; 344  :     /* get internal structure */
; 345  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 40		 je	 SHORT $LN4@gzrewind

; 346  :         return -1;
; 347  :     state = (gz_statep)file;
; 348  : 
; 349  :     /* check that we're reading and that there's no error */
; 350  :     if (state->mode != GZ_READ ||

  0000f	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00016	75 37		 jne	 SHORT $LN4@gzrewind
  00018	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN3@gzrewind
  0001f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00022	75 2b		 jne	 SHORT $LN4@gzrewind
$LN3@gzrewind:

; 353  : 
; 354  :     /* back up and start over */
; 355  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00024	6a 00		 push	 0
  00026	ff 76 3c	 push	 DWORD PTR [esi+60]
  00029	ff 76 38	 push	 DWORD PTR [esi+56]
  0002c	ff 76 14	 push	 DWORD PTR [esi+20]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64
  00035	23 c2		 and	 eax, edx
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	74 10		 je	 SHORT $LN4@gzrewind

; 356  :         return -1;
; 357  :     gz_reset(state);

  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 _gz_reset

; 358  :     return 0;

  00046	33 c0		 xor	 eax, eax

; 359  : }

  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN4@gzrewind:

; 351  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 352  :         return -1;

  0004f	83 c8 ff	 or	 eax, -1

; 359  : }

  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
_gzrewind@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzseek64@16
_TEXT	SEGMENT
tv405 = 8						; size = 8
_offset$ = 8						; size = 8
_gzseek64@16 PROC					; COMDAT
; _file$ = ecx
; _whence$ = edx

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 367  :     unsigned n;
; 368  :     z_off64_t ret;
; 369  :     gz_statep state;
; 370  : 
; 371  :     /* get internal structure and check integrity */
; 372  :     if (file == NULL)

  00009	85 f6		 test	 esi, esi
  0000b	75 0d		 jne	 SHORT $LN2@gzseek64
$LN26@gzseek64:

; 373  :         return -1;

  0000d	83 c8 ff	 or	 eax, -1
  00010	0b d0		 or	 edx, eax

; 436  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	59		 pop	 ecx
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN2@gzseek64:

; 374  :     state = (gz_statep)file;
; 375  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0001a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0001d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00023	74 08		 je	 SHORT $LN3@gzseek64
  00025	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0002b	75 e0		 jne	 SHORT $LN26@gzseek64
$LN3@gzseek64:

; 376  :         return -1;
; 377  : 
; 378  :     /* check that there's no error */
; 379  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  0002d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00030	85 c0		 test	 eax, eax
  00032	74 05		 je	 SHORT $LN4@gzseek64
  00034	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00037	75 d4		 jne	 SHORT $LN26@gzseek64
$LN4@gzseek64:

; 380  :         return -1;
; 381  : 
; 382  :     /* can only seek from start or relative to current position */
; 383  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  00039	85 d2		 test	 edx, edx
  0003b	74 19		 je	 SHORT $LN20@gzseek64
  0003d	83 fa 01	 cmp	 edx, 1
  00040	75 cb		 jne	 SHORT $LN26@gzseek64

; 389  :     else if (state->seek)

  00042	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0

; 390  :         offset += state->skip;

  00046	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00049	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0004c	74 14		 je	 SHORT $LN8@gzseek64
  0004e	03 7e 50	 add	 edi, DWORD PTR [esi+80]
  00051	13 5e 54	 adc	 ebx, DWORD PTR [esi+84]
  00054	eb 0c		 jmp	 SHORT $LN8@gzseek64
$LN20@gzseek64:

; 384  :         return -1;
; 385  : 
; 386  :     /* normalize offset to a SEEK_CUR specification */
; 387  :     if (whence == SEEK_SET)
; 388  :         offset -= state->x.pos;

  00056	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00059	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  0005c	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0005f	1b 5e 0c	 sbb	 ebx, DWORD PTR [esi+12]
$LN8@gzseek64:

; 391  :     state->seek = 0;

  00062	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 392  : 
; 393  :     /* if within raw area while reading, just go there */
; 394  :     if (state->mode == GZ_READ && state->how == COPY &&

  00069	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  0006f	0f 85 83 00 00
	00		 jne	 $LN9@gzseek64
  00075	83 7e 30 01	 cmp	 DWORD PTR [esi+48], 1
  00079	75 7d		 jne	 SHORT $LN9@gzseek64
  0007b	8b d7		 mov	 edx, edi
  0007d	8b c3		 mov	 eax, ebx
  0007f	03 56 08	 add	 edx, DWORD PTR [esi+8]
  00082	13 46 0c	 adc	 eax, DWORD PTR [esi+12]
  00085	89 45 0c	 mov	 DWORD PTR tv405[ebp+4], eax
  00088	78 6e		 js	 SHORT $LN9@gzseek64
  0008a	7f 04		 jg	 SHORT $LN21@gzseek64
  0008c	85 d2		 test	 edx, edx
  0008e	72 68		 jb	 SHORT $LN9@gzseek64
$LN21@gzseek64:

; 395  :             state->x.pos + offset >= 0) {
; 396  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  00090	8b cf		 mov	 ecx, edi
  00092	8b c3		 mov	 eax, ebx
  00094	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00096	6a 01		 push	 1
  00098	83 d8 00	 sbb	 eax, 0
  0009b	50		 push	 eax
  0009c	51		 push	 ecx
  0009d	ff 76 14	 push	 DWORD PTR [esi+20]
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64

; 397  :         if (ret == -1)

  000a6	23 c2		 and	 eax, edx
  000a8	83 c4 10	 add	 esp, 16			; 00000010H
  000ab	83 f8 ff	 cmp	 eax, -1
  000ae	0f 84 59 ff ff
	ff		 je	 $LN26@gzseek64

; 398  :             return -1;
; 399  :         state->x.have = 0;
; 400  :         state->eof = 0;
; 401  :         state->past = 0;
; 402  :         state->seek = 0;
; 403  :         gz_error(state, Z_OK, NULL);

  000b4	6a 00		 push	 0
  000b6	33 d2		 xor	 edx, edx
  000b8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000be	8b ce		 mov	 ecx, esi
  000c0	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000c7	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000ce	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000d5	e8 00 00 00 00	 call	 _gz_error
  000da	83 c4 04	 add	 esp, 4

; 404  :         state->strm.avail_in = 0;

  000dd	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 405  :         state->x.pos += offset;

  000e4	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 406  :         return state->x.pos;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	11 5e 0c	 adc	 DWORD PTR [esi+12], ebx
  000ed	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 436  : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	59		 pop	 ecx
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
$LN9@gzseek64:

; 407  :     }
; 408  : 
; 409  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 410  :     if (offset < 0) {

  000f8	85 db		 test	 ebx, ebx
  000fa	7f 39		 jg	 SHORT $LN14@gzseek64
  000fc	7c 04		 jl	 SHORT $LN22@gzseek64
  000fe	85 ff		 test	 edi, edi
  00100	73 33		 jae	 SHORT $LN14@gzseek64
$LN22@gzseek64:

; 411  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  00102	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00108	0f 85 ff fe ff
	ff		 jne	 $LN26@gzseek64

; 412  :             return -1;
; 413  :         offset += state->x.pos;

  0010e	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  00111	13 5e 0c	 adc	 ebx, DWORD PTR [esi+12]

; 414  :         if (offset < 0)                     /* before start of file! */

  00114	85 db		 test	 ebx, ebx
  00116	7f 0e		 jg	 SHORT $LN13@gzseek64
  00118	0f 8c ef fe ff
	ff		 jl	 $LN26@gzseek64
  0011e	85 ff		 test	 edi, edi
  00120	0f 82 e7 fe ff
	ff		 jb	 $LN26@gzseek64
$LN13@gzseek64:

; 415  :             return -1;
; 416  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  00126	56		 push	 esi
  00127	e8 00 00 00 00	 call	 _gzrewind@4
  0012c	83 f8 ff	 cmp	 eax, -1
  0012f	0f 84 d8 fe ff
	ff		 je	 $LN26@gzseek64
$LN14@gzseek64:

; 417  :             return -1;
; 418  :     }
; 419  : 
; 420  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 421  :     if (state->mode == GZ_READ) {

  00135	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0013c	75 27		 jne	 SHORT $LN15@gzseek64

; 422  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?

  0013e	8b 06		 mov	 eax, DWORD PTR [esi]
  00140	33 c9		 xor	 ecx, ecx
  00142	3b cb		 cmp	 ecx, ebx
  00144	7f 0a		 jg	 SHORT $LN18@gzseek64
  00146	7c 04		 jl	 SHORT $LN24@gzseek64
  00148	3b c7		 cmp	 eax, edi
  0014a	77 04		 ja	 SHORT $LN18@gzseek64
$LN24@gzseek64:
  0014c	8b c8		 mov	 ecx, eax
  0014e	eb 02		 jmp	 SHORT $LN19@gzseek64
$LN18@gzseek64:
  00150	8b cf		 mov	 ecx, edi
$LN19@gzseek64:

; 423  :             (unsigned)offset : state->x.have;
; 424  :         state->x.have -= n;
; 425  :         state->x.next += n;

  00152	01 4e 04	 add	 DWORD PTR [esi+4], ecx
  00155	2b c1		 sub	 eax, ecx

; 426  :         state->x.pos += n;

  00157	01 4e 08	 add	 DWORD PTR [esi+8], ecx
  0015a	89 06		 mov	 DWORD PTR [esi], eax
  0015c	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 427  :         offset -= n;

  00160	2b f9		 sub	 edi, ecx
  00162	83 db 00	 sbb	 ebx, 0
$LN15@gzseek64:

; 428  :     }
; 429  : 
; 430  :     /* request skip (if not zero) */
; 431  :     if (offset) {

  00165	8b c7		 mov	 eax, edi
  00167	0b c3		 or	 eax, ebx
  00169	74 0d		 je	 SHORT $LN16@gzseek64

; 432  :         state->seek = 1;

  0016b	c7 46 58 01 00
	00 00		 mov	 DWORD PTR [esi+88], 1

; 433  :         state->skip = offset;

  00172	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  00175	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN16@gzseek64:

; 434  :     }
; 435  :     return state->x.pos + offset;

  00178	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0017b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0017e	03 c7		 add	 eax, edi

; 436  : }

  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	13 d3		 adc	 edx, ebx
  00184	5b		 pop	 ebx
  00185	59		 pop	 ecx
  00186	5d		 pop	 ebp
  00187	c2 08 00	 ret	 8
_gzseek64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzseek@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek@12 PROC						; COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 444  :     z_off64_t ret;
; 445  : 
; 446  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000d	99		 cdq
  0000e	56		 push	 esi
  0000f	52		 push	 edx
  00010	8b 55 10	 mov	 edx, DWORD PTR _whence$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _gzseek64@16
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx

; 447  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001d	99		 cdq
  0001e	3b c8		 cmp	 ecx, eax
  00020	75 0d		 jne	 SHORT $LN3@gzseek
  00022	3b f2		 cmp	 esi, edx
  00024	75 09		 jne	 SHORT $LN3@gzseek
  00026	8b c1		 mov	 eax, ecx

; 448  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN3@gzseek:

; 447  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0002f	83 c8 ff	 or	 eax, -1

; 448  : }

  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
_gzseek@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gztell64@4
_TEXT	SEGMENT
tv73 = -8						; size = 8
_gztell64@4 PROC					; COMDAT
; _file$ = ecx

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 454  :     gz_statep state;
; 455  : 
; 456  :     /* get internal structure and check integrity */
; 457  :     if (file == NULL)

  00006	85 c9		 test	 ecx, ecx
  00008	75 09		 jne	 SHORT $LN2@gztell64
$LN7@gztell64:

; 458  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1
  0000d	0b d0		 or	 edx, eax

; 465  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@gztell64:

; 459  :     state = (gz_statep)file;
; 460  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00013	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00016	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0001b	74 07		 je	 SHORT $LN3@gztell64
  0001d	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00022	75 e6		 jne	 SHORT $LN7@gztell64
$LN3@gztell64:

; 461  :         return -1;
; 462  : 
; 463  :     /* return position */
; 464  :     return state->x.pos + (state->seek ? state->skip : 0);

  00024	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00028	56		 push	 esi
  00029	74 15		 je	 SHORT $LN5@gztell64
  0002b	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0002e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00031	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  00034	03 c2		 add	 eax, edx
  00036	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00039	13 d6		 adc	 edx, esi
  0003b	5e		 pop	 esi

; 465  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@gztell64:

; 461  :         return -1;
; 462  : 
; 463  :     /* return position */
; 464  :     return state->x.pos + (state->seek ? state->skip : 0);

  00040	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	66 0f 13 45 f8	 movlpd	 QWORD PTR tv73[ebp], xmm0
  0004b	8b 55 f8	 mov	 edx, DWORD PTR tv73[ebp]
  0004e	03 c2		 add	 eax, edx
  00050	8b 75 fc	 mov	 esi, DWORD PTR tv73[ebp+4]
  00053	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00056	13 d6		 adc	 edx, esi
  00058	5e		 pop	 esi

; 465  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_gztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell@4 PROC						; COMDAT

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 471  :     z_off64_t ret;
; 472  : 
; 473  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _gztell64@4
  0000c	8b c8		 mov	 ecx, eax
  0000e	8b f2		 mov	 esi, edx

; 474  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	99		 cdq
  00011	3b c8		 cmp	 ecx, eax
  00013	75 0b		 jne	 SHORT $LN3@gztell
  00015	3b f2		 cmp	 esi, edx
  00017	75 07		 jne	 SHORT $LN3@gztell
  00019	8b c1		 mov	 eax, ecx
  0001b	5e		 pop	 esi

; 475  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@gztell:

; 474  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 475  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_gztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzoffset64@4
_TEXT	SEGMENT
_gzoffset64@4 PROC					; COMDAT
; _file$ = ecx

; 480  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 481  :     z_off64_t offset;
; 482  :     gz_statep state;
; 483  : 
; 484  :     /* get internal structure and check integrity */
; 485  :     if (file == NULL)

  00003	85 f6		 test	 esi, esi
  00005	75 07		 jne	 SHORT $LN2@gzoffset64
$LN7@gzoffset64:

; 486  :         return -1;

  00007	83 c8 ff	 or	 eax, -1
  0000a	0b d0		 or	 edx, eax

; 497  :     return offset;
; 498  : }

  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
$LN2@gzoffset64:

; 487  :     state = (gz_statep)file;
; 488  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00016	74 07		 je	 SHORT $LN3@gzoffset64
  00018	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001d	75 e8		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 489  :         return -1;
; 490  : 
; 491  :     /* compute and return effective offset in file */
; 492  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  0001f	6a 01		 push	 1
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	ff 76 14	 push	 DWORD PTR [esi+20]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64

; 493  :     if (offset == -1)

  0002e	8b c8		 mov	 ecx, eax
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	23 ca		 and	 ecx, edx
  00035	83 f9 ff	 cmp	 ecx, -1
  00038	74 cd		 je	 SHORT $LN7@gzoffset64

; 494  :         return -1;
; 495  :     if (state->mode == GZ_READ)             /* reading */

  0003a	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00041	75 06		 jne	 SHORT $LN1@gzoffset64

; 496  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  00043	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  00046	83 da 00	 sbb	 edx, 0
$LN1@gzoffset64:

; 497  :     return offset;
; 498  : }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
_gzoffset64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzoffset@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset@4 PROC					; COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 504  :     z_off64_t ret;
; 505  : 
; 506  :     ret = gzoffset64(file);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _gzoffset64@4
  00010	8b c8		 mov	 ecx, eax
  00012	8b f2		 mov	 esi, edx

; 507  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00014	99		 cdq
  00015	3b c8		 cmp	 ecx, eax
  00017	75 0d		 jne	 SHORT $LN3@gzoffset
  00019	3b f2		 cmp	 esi, edx
  0001b	75 09		 jne	 SHORT $LN3@gzoffset
  0001d	8b c1		 mov	 eax, ecx

; 508  : }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@gzoffset:

; 507  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00026	83 c8 ff	 or	 eax, -1

; 508  : }

  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
_gzoffset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof@4 PROC						; COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 514  :     gz_statep state;
; 515  : 
; 516  :     /* get internal structure and check integrity */
; 517  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 22		 je	 SHORT $LN5@gzeof

; 518  :         return 0;
; 519  :     state = (gz_statep)file;
; 520  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00013	74 10		 je	 SHORT $LN8@gzeof
  00015	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0001b	75 0f		 jne	 SHORT $LN5@gzeof

; 521  :         return 0;
; 522  : 
; 523  :     /* return end-of-file state */
; 524  :     return state->mode == GZ_READ ? state->past : 0;

  0001d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00023	75 07		 jne	 SHORT $LN5@gzeof
$LN8@gzeof:
  00025	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 525  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN5@gzeof:

; 521  :         return 0;
; 522  : 
; 523  :     /* return end-of-file state */
; 524  :     return state->mode == GZ_READ ? state->past : 0;

  0002c	33 c0		 xor	 eax, eax

; 525  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_gzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzerror@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror@8 PROC						; COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 532  :     gz_statep state;
; 533  : 
; 534  :     /* get internal structure and check integrity */
; 535  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN2@gzerror
$LN10@gzerror:

; 536  :         return NULL;

  0000a	33 c0		 xor	 eax, eax

; 545  :                                        (state->msg == NULL ? "" : state->msg);
; 546  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN2@gzerror:

; 537  :     state = (gz_statep)file;
; 538  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00010	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00013	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00018	74 07		 je	 SHORT $LN3@gzerror
  0001a	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001f	75 e9		 jne	 SHORT $LN10@gzerror
$LN3@gzerror:

; 539  :         return NULL;
; 540  : 
; 541  :     /* return error information */
; 542  :     if (errnum != NULL)

  00021	8b 55 0c	 mov	 edx, DWORD PTR _errnum$[ebp]
  00024	85 d2		 test	 edx, edx
  00026	74 05		 je	 SHORT $LN4@gzerror

; 543  :         *errnum = state->err;

  00028	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0002b	89 02		 mov	 DWORD PTR [edx], eax
$LN4@gzerror:

; 544  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  0002d	83 79 5c fc	 cmp	 DWORD PTR [ecx+92], -4	; fffffffcH
  00031	75 09		 jne	 SHORT $LN8@gzerror
  00033	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@

; 545  :                                        (state->msg == NULL ? "" : state->msg);
; 546  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN8@gzerror:

; 544  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  0003c	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00044	85 c9		 test	 ecx, ecx
  00046	0f 45 c1	 cmovne	 eax, ecx

; 545  :                                        (state->msg == NULL ? "" : state->msg);
; 546  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_gzerror@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gzclearerr@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr@4 PROC					; COMDAT

; 551  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 552  :     gz_statep state;
; 553  : 
; 554  :     /* get internal structure and check integrity */
; 555  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 32		 je	 SHORT $LN1@gzclearerr

; 556  :         return;
; 557  :     state = (gz_statep)file;
; 558  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 0e		 je	 SHORT $LN7@gzclearerr
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 21		 jne	 SHORT $LN1@gzclearerr

; 559  :         return;
; 560  : 
; 561  :     /* clear error and end-of-file */
; 562  :     if (state->mode == GZ_READ) {

  0001b	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00020	75 0e		 jne	 SHORT $LN4@gzclearerr
$LN7@gzclearerr:

; 563  :         state->eof = 0;

  00022	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 564  :         state->past = 0;

  00029	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
$LN4@gzclearerr:

; 565  :     }
; 566  :     gz_error(state, Z_OK, NULL);

  00030	6a 00		 push	 0
  00032	33 d2		 xor	 edx, edx
  00034	e8 00 00 00 00	 call	 _gz_error
  00039	83 c4 04	 add	 esp, 4
$LN1@gzclearerr:

; 567  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
_gzclearerr@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
tv144 = 8						; size = 4
_msg$ = 8						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = edx

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx

; 580  :     /* free previously allocated message and clear */
; 581  :     if (state->msg != NULL) {

  0000a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0000d	85 c0		 test	 eax, eax
  0000f	74 17		 je	 SHORT $LN2@gz_error

; 582  :         if (state->err != Z_MEM_ERROR)

  00011	83 7e 5c fc	 cmp	 DWORD PTR [esi+92], -4	; fffffffcH
  00015	74 0a		 je	 SHORT $LN3@gz_error

; 583  :             free(state->msg);

  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001e	83 c4 04	 add	 esp, 4
$LN3@gz_error:

; 584  :         state->msg = NULL;

  00021	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN2@gz_error:

; 585  :     }
; 586  : 
; 587  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 588  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00028	85 ff		 test	 edi, edi
  0002a	74 0b		 je	 SHORT $LN4@gz_error
  0002c	83 ff fb	 cmp	 edi, -5			; fffffffbH
  0002f	74 06		 je	 SHORT $LN4@gz_error

; 589  :         state->x.have = 0;

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN4@gz_error:

; 590  : 
; 591  :     /* set error code, and if no message, then done */
; 592  :     state->err = err;
; 593  :     if (msg == NULL)

  00037	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  0003a	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  0003d	85 db		 test	 ebx, ebx
  0003f	0f 84 87 00 00
	00		 je	 $LN1@gz_error

; 594  :         return;
; 595  : 
; 596  :     /* for an out of memory error, return literal string when requested */
; 597  :     if (err == Z_MEM_ERROR)

  00045	83 ff fc	 cmp	 edi, -4			; fffffffcH
  00048	0f 84 7e 00 00
	00		 je	 $LN1@gz_error

; 598  :         return;
; 599  : 
; 600  :     /* construct error message with path */
; 601  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==

  0004e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00051	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL9@gz_error:
  00054	8a 01		 mov	 al, BYTE PTR [ecx]
  00056	41		 inc	 ecx
  00057	84 c0		 test	 al, al
  00059	75 f9		 jne	 SHORT $LL9@gz_error
  0005b	2b ca		 sub	 ecx, edx
  0005d	8b d3		 mov	 edx, ebx
  0005f	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL10@gz_error:
  00062	8a 02		 mov	 al, BYTE PTR [edx]
  00064	42		 inc	 edx
  00065	84 c0		 test	 al, al
  00067	75 f9		 jne	 SHORT $LL10@gz_error
  00069	2b d7		 sub	 edx, edi
  0006b	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0006e	03 c2		 add	 eax, edx
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00077	83 c4 04	 add	 esp, 4
  0007a	89 45 08	 mov	 DWORD PTR tv144[ebp], eax
  0007d	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00080	85 c0		 test	 eax, eax
  00082	75 0c		 jne	 SHORT $LN7@gz_error

; 602  :             NULL) {
; 603  :         state->err = Z_MEM_ERROR;

  00084	5f		 pop	 edi
  00085	c7 46 5c fc ff
	ff ff		 mov	 DWORD PTR [esi+92], -4	; fffffffcH
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 608  :              "%s%s%s", state->path, ": ", msg);
; 609  : #else
; 610  :     strcpy(state->msg, state->path);
; 611  :     strcat(state->msg, ": ");
; 612  :     strcat(state->msg, msg);
; 613  : #endif
; 614  :     return;
; 615  : }

  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN7@gz_error:

; 604  :         return;
; 605  :     }
; 606  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 607  :     snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,

  00090	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00093	8b ce		 mov	 ecx, esi
  00095	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL11@gz_error:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL11@gz_error
  0009f	2b ca		 sub	 ecx, edx
  000a1	8b d3		 mov	 edx, ebx
  000a3	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL12@gz_error:
  000a6	8a 02		 mov	 al, BYTE PTR [edx]
  000a8	42		 inc	 edx
  000a9	84 c0		 test	 al, al
  000ab	75 f9		 jne	 SHORT $LL12@gz_error
  000ad	53		 push	 ebx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
  000b3	56		 push	 esi
  000b4	2b d7		 sub	 edx, edi
  000b6	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
  000be	03 c2		 add	 eax, edx
  000c0	50		 push	 eax
  000c1	ff 75 08	 push	 DWORD PTR tv144[ebp]
  000c4	e8 00 00 00 00	 call	 __snprintf
  000c9	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@gz_error:
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx

; 608  :              "%s%s%s", state->path, ": ", msg);
; 609  : #else
; 610  :     strcpy(state->msg, state->path);
; 611  :     strcat(state->msg, ": ");
; 612  :     strcat(state->msg, msg);
; 613  : #endif
; 614  :     return;
; 615  : }

  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
END
