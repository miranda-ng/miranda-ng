; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ ; `string'
EXTRN	__imp___write:PROC
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ DB 'internal er'
	DB	'ror: deflate stream corrupt', 00H		; `string'
PUBLIC	_gzsetparams@12
PUBLIC	_gzflush@8
PUBLIC	_gzprintf
PUBLIC	_gzvprintf
PUBLIC	_gzputs@8
PUBLIC	_gzputc@8
PUBLIC	_gzwrite@12
PUBLIC	_vsnprintf
PUBLIC	_gzclose_w@4
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzclose_w@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_w@4 PROC					; COMDAT

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 542  :     int ret = Z_OK;
; 543  :     gz_statep state;
; 544  : 
; 545  :     /* get internal structure */
; 546  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	85 f6		 test	 esi, esi
  0000c	75 0b		 jne	 SHORT $LN2@gzclose_w
$LN11@gzclose_w:
  0000e	5f		 pop	 edi

; 547  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00014	5e		 pop	 esi

; 577  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@gzclose_w:

; 548  :     state = (gz_statep)file;
; 549  : 
; 550  :     /* check that we're writing */
; 551  :     if (state->mode != GZ_WRITE)

  00019	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00020	75 ec		 jne	 SHORT $LN11@gzclose_w

; 552  :         return Z_STREAM_ERROR;
; 553  : 
; 554  :     /* check for seek request */
; 555  :     if (state->seek) {

  00022	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  00025	74 1b		 je	 SHORT $LN5@gzclose_w

; 556  :         state->seek = 0;
; 557  :         if (gz_zero(state, state->skip) == -1)

  00027	ff 76 54	 push	 DWORD PTR [esi+84]
  0002a	8b ce		 mov	 ecx, esi
  0002c	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  0002f	ff 76 50	 push	 DWORD PTR [esi+80]
  00032	e8 00 00 00 00	 call	 _gz_zero
  00037	83 c4 08	 add	 esp, 8
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	75 03		 jne	 SHORT $LN5@gzclose_w

; 558  :             ret = state->err;

  0003f	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN5@gzclose_w:

; 559  :     }
; 560  : 
; 561  :     /* flush, free memory, and close file */
; 562  :     if (gz_comp(state, Z_FINISH) == -1)

  00042	ba 04 00 00 00	 mov	 edx, 4
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 _gz_comp
  0004e	83 f8 ff	 cmp	 eax, -1
  00051	75 03		 jne	 SHORT $LN6@gzclose_w

; 563  :         ret = state->err;

  00053	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN6@gzclose_w:

; 564  :     if (state->size) {

  00056	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0005a	53		 push	 ebx
  0005b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__free
  00061	74 1f		 je	 SHORT $LN7@gzclose_w

; 565  :         if (!state->direct) {

  00063	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00067	75 11		 jne	 SHORT $LN8@gzclose_w

; 566  :             (void)deflateEnd(&(state->strm));

  00069	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _deflateEnd@4

; 567  :             free(state->out);

  00072	ff 76 28	 push	 DWORD PTR [esi+40]
  00075	ff d3		 call	 ebx
  00077	83 c4 04	 add	 esp, 4
$LN8@gzclose_w:

; 568  :         }
; 569  :         free(state->in);

  0007a	ff 76 24	 push	 DWORD PTR [esi+36]
  0007d	ff d3		 call	 ebx
  0007f	83 c4 04	 add	 esp, 4
$LN7@gzclose_w:

; 570  :     }
; 571  :     gz_error(state, Z_OK, NULL);

  00082	6a 00		 push	 0
  00084	33 d2		 xor	 edx, edx
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 _gz_error

; 572  :     free(state->path);

  0008d	ff 76 18	 push	 DWORD PTR [esi+24]
  00090	ff d3		 call	 ebx

; 573  :     if (close(state->fd) == -1)

  00092	ff 76 14	 push	 DWORD PTR [esi+20]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___close
  0009b	83 c9 ff	 or	 ecx, -1
  0009e	3b c1		 cmp	 eax, ecx

; 574  :         ret = Z_ERRNO;
; 575  :     free(state);

  000a0	56		 push	 esi
  000a1	0f 44 f9	 cmove	 edi, ecx
  000a4	ff d3		 call	 ebx
  000a6	83 c4 10	 add	 esp, 16			; 00000010H

; 576  :     return ret;

  000a9	8b c7		 mov	 eax, edi
  000ab	5b		 pop	 ebx
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi

; 577  : }

  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_gzclose_w@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
_vsnprintf PROC						; COMDAT
; __Buffer$ = ecx
; __BufferCount$ = edx

; 1435 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1436 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR __Format$[ebp]
  0000b	52		 push	 edx
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	83 c9 02	 or	 ecx, 2
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1437 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1438 :         _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1439 : 
; 1440 :     return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1441 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gz_init
_TEXT	SEGMENT
_gz_init PROC						; COMDAT
; _state$ = ecx

; 17   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 18   :     int ret;
; 19   :     z_streamp strm = &(state->strm);
; 20   : 
; 21   :     /* allocate input buffer */
; 22   :     state->in = (unsigned char *)malloc(state->want);

  00004	ff 77 20	 push	 DWORD PTR [edi+32]
  00007	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00010	83 c4 04	 add	 esp, 4
  00013	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 23   :     if (state->in == NULL) {

  00016	85 c0		 test	 eax, eax
  00018	75 18		 jne	 SHORT $LN2@gz_init

; 24   :         gz_error(state, Z_MEM_ERROR, "out of memory");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  0001f	8d 50 fc	 lea	 edx, DWORD PTR [eax-4]
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 _gz_error
  00029	83 c4 04	 add	 esp, 4

; 25   :         return -1;

  0002c	83 c8 ff	 or	 eax, -1
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 62   : }

  00031	c3		 ret	 0
$LN2@gz_init:

; 26   :     }
; 27   : 
; 28   :     /* only need output buffer and deflate state if compressing */
; 29   :     if (!state->direct) {

  00032	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00036	0f 85 92 00 00
	00		 jne	 $LN5@gz_init

; 30   :         /* allocate output buffer */
; 31   :         state->out = (unsigned char *)malloc(state->want);

  0003c	ff 77 20	 push	 DWORD PTR [edi+32]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00045	83 c4 04	 add	 esp, 4
  00048	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 32   :         if (state->out == NULL) {

  0004b	85 c0		 test	 eax, eax
  0004d	75 23		 jne	 SHORT $LN4@gz_init

; 33   :             free(state->in);

  0004f	ff 77 24	 push	 DWORD PTR [edi+36]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free

; 34   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  0005d	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  00062	8b cf		 mov	 ecx, edi
  00064	e8 00 00 00 00	 call	 _gz_error
  00069	83 c4 08	 add	 esp, 8

; 35   :             return -1;

  0006c	83 c8 ff	 or	 eax, -1
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi

; 62   : }

  00071	c3		 ret	 0
$LN4@gz_init:

; 36   :         }
; 37   : 
; 38   :         /* allocate deflate memory, set up for gzip compression */
; 39   :         strm->zalloc = Z_NULL;
; 40   :         strm->zfree = Z_NULL;
; 41   :         strm->opaque = Z_NULL;
; 42   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,

  00072	6a 38		 push	 56			; 00000038H
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_05IAIEPMAK@1?42?48?$AA@
  00079	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00080	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00087	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0008e	ff 77 4c	 push	 DWORD PTR [edi+76]
  00091	6a 08		 push	 8
  00093	6a 1f		 push	 31			; 0000001fH
  00095	6a 08		 push	 8
  00097	ff 77 48	 push	 DWORD PTR [edi+72]
  0009a	56		 push	 esi
  0009b	e8 00 00 00 00	 call	 _deflateInit2_@32

; 43   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);
; 44   :         if (ret != Z_OK) {

  000a0	85 c0		 test	 eax, eax
  000a2	74 2a		 je	 SHORT $LN5@gz_init

; 45   :             free(state->out);

  000a4	ff 77 28	 push	 DWORD PTR [edi+40]
  000a7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  000ad	ff d6		 call	 esi

; 46   :             free(state->in);

  000af	ff 77 24	 push	 DWORD PTR [edi+36]
  000b2	ff d6		 call	 esi

; 47   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000b9	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  000be	8b cf		 mov	 ecx, edi
  000c0	e8 00 00 00 00	 call	 _gz_error
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   :             return -1;

  000c8	83 c8 ff	 or	 eax, -1
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi

; 62   : }

  000cd	c3		 ret	 0
$LN5@gz_init:

; 49   :         }
; 50   :     }
; 51   : 
; 52   :     /* mark state as initialized */
; 53   :     state->size = state->want;
; 54   : 
; 55   :     /* initialize write buffer if compressing */
; 56   :     if (!state->direct) {

  000ce	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  000d2	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d5	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  000d8	75 0c		 jne	 SHORT $LN6@gz_init

; 57   :         strm->avail_out = state->size;

  000da	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 58   :         strm->next_out = state->out;

  000dd	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000e0	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 59   :         state->x.next = strm->next_out;

  000e3	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@gz_init:

; 60   :     }
; 61   :     return 0;

  000e6	5f		 pop	 edi
  000e7	33 c0		 xor	 eax, eax
  000e9	5e		 pop	 esi

; 62   : }

  000ea	c3		 ret	 0
_gz_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gz_comp
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_gz_comp PROC						; COMDAT
; _state$ = ecx
; _flush$ = edx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 55 fc	 mov	 DWORD PTR _flush$1$[ebp], edx

; 74   :     int ret, got;
; 75   :     unsigned have;
; 76   :     z_streamp strm = &(state->strm);
; 77   : 
; 78   :     /* allocate memory if this is the first time through */
; 79   :     if (state->size == 0 && gz_init(state) == -1)

  0000b	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  0000f	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  00012	75 0d		 jne	 SHORT $LN5@gz_comp
  00014	e8 00 00 00 00	 call	 _gz_init
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	74 4e		 je	 SHORT $LN26@gz_comp
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
$LN5@gz_comp:

; 80   :         return -1;
; 81   : 
; 82   :     /* write directly if requested */
; 83   :     if (state->direct) {

  00021	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00025	74 4e		 je	 SHORT $LN6@gz_comp

; 84   :         got = write(state->fd, strm->next_in, strm->avail_in);

  00027	ff 76 04	 push	 DWORD PTR [esi+4]
  0002a	ff 36		 push	 DWORD PTR [esi]
  0002c	ff 77 14	 push	 DWORD PTR [edi+20]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___write
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 85   :         if (got < 0 || (unsigned)got != strm->avail_in) {

  00038	85 c0		 test	 eax, eax
  0003a	78 14		 js	 SHORT $LN8@gz_comp
  0003c	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003f	75 0f		 jne	 SHORT $LN8@gz_comp

; 88   :         }
; 89   :         strm->avail_in = 0;

  00041	5f		 pop	 edi
  00042	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 90   :         return 0;

  00049	33 c0		 xor	 eax, eax
  0004b	5e		 pop	 esi

; 130  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN8@gz_comp:

; 86   :             gz_error(state, Z_ERRNO, zstrerror());

  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00056	ff 30		 push	 DWORD PTR [eax]
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strerror
  0005e	50		 push	 eax
  0005f	83 ca ff	 or	 edx, -1
  00062	8b cf		 mov	 ecx, edi
  00064	e8 00 00 00 00	 call	 _gz_error
  00069	83 c4 08	 add	 esp, 8
$LN26@gz_comp:

; 87   :             return -1;

  0006c	5f		 pop	 edi
  0006d	83 c8 ff	 or	 eax, -1
  00070	5e		 pop	 esi

; 130  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN6@gz_comp:

; 91   :     }
; 92   : 
; 93   :     /* run deflate() on provided input until it produces no more output */
; 94   :     ret = Z_OK;

  00075	33 c0		 xor	 eax, eax
  00077	53		 push	 ebx
$LL4@gz_comp:

; 95   :     do {
; 96   :         /* write out current buffer contents if full, or if flushing, but if
; 97   :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 98   :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&

  00078	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0007c	74 0e		 je	 SHORT $LN11@gz_comp
  0007e	85 d2		 test	 edx, edx
  00080	74 45		 je	 SHORT $LN9@gz_comp
  00082	83 fa 04	 cmp	 edx, 4
  00085	75 05		 jne	 SHORT $LN11@gz_comp
  00087	83 f8 01	 cmp	 eax, 1
  0008a	75 3b		 jne	 SHORT $LN9@gz_comp
$LN11@gz_comp:

; 99   :             (flush != Z_FINISH || ret == Z_STREAM_END))) {
; 100  :             have = (unsigned)(strm->next_out - state->x.next);

  0008c	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0008f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00092	2b d8		 sub	 ebx, eax

; 101  :             if (have && ((got = write(state->fd, state->x.next, have)) < 0 ||

  00094	74 16		 je	 SHORT $LN12@gz_comp
  00096	53		 push	 ebx
  00097	50		 push	 eax
  00098	ff 77 14	 push	 DWORD PTR [edi+20]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___write
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a4	85 c0		 test	 eax, eax
  000a6	78 38		 js	 SHORT $LN13@gz_comp
  000a8	3b c3		 cmp	 eax, ebx
  000aa	75 34		 jne	 SHORT $LN13@gz_comp
$LN12@gz_comp:

; 104  :                 return -1;
; 105  :             }
; 106  :             if (strm->avail_out == 0) {

  000ac	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000b0	75 0c		 jne	 SHORT $LN14@gz_comp

; 107  :                 strm->avail_out = state->size;

  000b2	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000b5	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 108  :                 strm->next_out = state->out;

  000b8	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000bb	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN14@gz_comp:

; 109  :             }
; 110  :             state->x.next = strm->next_out;

  000be	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c1	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
  000c4	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@gz_comp:

; 111  :         }
; 112  : 
; 113  :         /* compress */
; 114  :         have = strm->avail_out;

  000c7	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 115  :         ret = deflate(strm, flush);

  000ca	52		 push	 edx
  000cb	56		 push	 esi
  000cc	e8 00 00 00 00	 call	 _deflate@8

; 116  :         if (ret == Z_STREAM_ERROR) {

  000d1	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  000d4	74 45		 je	 SHORT $LN20@gz_comp

; 120  :         }
; 121  :         have -= strm->avail_out;

  000d6	2b 5e 10	 sub	 ebx, DWORD PTR [esi+16]

; 122  :     } while (have);

  000d9	74 2b		 je	 SHORT $LN19@gz_comp
  000db	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
  000de	eb 98		 jmp	 SHORT $LL4@gz_comp
$LN13@gz_comp:

; 102  :                          (unsigned)got != have)) {
; 103  :                 gz_error(state, Z_ERRNO, zstrerror());

  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  000e6	ff 30		 push	 DWORD PTR [eax]
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strerror
  000ee	50		 push	 eax
  000ef	83 ca ff	 or	 edx, -1
  000f2	8b cf		 mov	 ecx, edi
  000f4	e8 00 00 00 00	 call	 _gz_error
  000f9	83 c4 08	 add	 esp, 8

; 118  :                       "internal error: deflate stream corrupt");
; 119  :             return -1;

  000fc	83 c8 ff	 or	 eax, -1
  000ff	5b		 pop	 ebx
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi

; 130  : }

  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
$LN19@gz_comp:

; 123  : 
; 124  :     /* if that completed a deflate stream, allow another to start */
; 125  :     if (flush == Z_FINISH)

  00106	83 7d fc 04	 cmp	 DWORD PTR _flush$1$[ebp], 4
  0010a	75 06		 jne	 SHORT $LN16@gz_comp

; 126  :         deflateReset(strm);

  0010c	56		 push	 esi
  0010d	e8 00 00 00 00	 call	 _deflateReset@4
$LN16@gz_comp:

; 127  : 
; 128  :     /* all done, no errors */
; 129  :     return 0;

  00112	5b		 pop	 ebx
  00113	5f		 pop	 edi
  00114	33 c0		 xor	 eax, eax
  00116	5e		 pop	 esi

; 130  : }

  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
$LN20@gz_comp:

; 117  :             gz_error(state, Z_STREAM_ERROR,

  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
  00120	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  00125	8b cf		 mov	 ecx, edi
  00127	e8 00 00 00 00	 call	 _gz_error
  0012c	83 c4 04	 add	 esp, 4

; 118  :                       "internal error: deflate stream corrupt");
; 119  :             return -1;

  0012f	83 c8 ff	 or	 eax, -1
  00132	5b		 pop	 ebx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi

; 130  : }

  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
_gz_comp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gz_zero
_TEXT	SEGMENT
_first$1$ = -8						; size = 4
_len$2$ = -4						; size = 4
_len$ = 8						; size = 8
_gz_zero PROC						; COMDAT
; _state$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 137  :     int first;
; 138  :     unsigned n;
; 139  :     z_streamp strm = &(state->strm);
; 140  : 
; 141  :     /* consume whatever's left in the input buffer */
; 142  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  00009	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0000d	74 13		 je	 SHORT $LN4@gz_zero
  0000f	33 d2		 xor	 edx, edx
  00011	e8 00 00 00 00	 call	 _gz_comp
  00016	83 f8 ff	 cmp	 eax, -1
  00019	75 07		 jne	 SHORT $LN4@gz_zero

; 143  :         return -1;

  0001b	0b c0		 or	 eax, eax
  0001d	5e		 pop	 esi

; 162  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN4@gz_zero:

; 144  : 
; 145  :     /* compress len zeros (len guaranteed > 0) */
; 146  :     first = 1;
; 147  :     while (len) {

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp+4]
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	53		 push	 ebx
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0002e	8b c3		 mov	 eax, ebx
  00030	0b c1		 or	 eax, ecx
  00032	89 55 f8	 mov	 DWORD PTR _first$1$[ebp], edx
  00035	57		 push	 edi
  00036	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  00039	74 61		 je	 SHORT $LN3@gz_zero
  0003b	0f 1f 44 00 00	 npad	 5
$LL2@gz_zero:

; 148  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?

  00040	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00043	33 c0		 xor	 eax, eax
  00045	3b c1		 cmp	 eax, ecx
  00047	7f 06		 jg	 SHORT $LN8@gz_zero
  00049	7c 06		 jl	 SHORT $LN9@gz_zero
  0004b	3b fb		 cmp	 edi, ebx
  0004d	76 02		 jbe	 SHORT $LN9@gz_zero
$LN8@gz_zero:
  0004f	8b fb		 mov	 edi, ebx
$LN9@gz_zero:

; 149  :             (unsigned)len : state->size;
; 150  :         if (first) {

  00051	85 d2		 test	 edx, edx
  00053	74 15		 je	 SHORT $LN5@gz_zero

; 151  :             memset(state->in, 0, n);

  00055	57		 push	 edi
  00056	6a 00		 push	 0
  00058	ff 76 24	 push	 DWORD PTR [esi+36]
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 152  :             first = 0;

  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _first$1$[ebp], 0
$LN5@gz_zero:

; 153  :         }
; 154  :         strm->avail_in = n;

  0006a	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 155  :         strm->next_in = state->in;
; 156  :         state->x.pos += n;
; 157  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  0006d	8b ce		 mov	 ecx, esi
  0006f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00072	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00075	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00078	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  0007c	33 d2		 xor	 edx, edx
  0007e	e8 00 00 00 00	 call	 _gz_comp
  00083	83 f8 ff	 cmp	 eax, -1
  00086	74 1d		 je	 SHORT $LN11@gz_zero

; 159  :         len -= n;

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _len$2$[ebp]
  0008b	2b df		 sub	 ebx, edi
  0008d	8b 55 f8	 mov	 edx, DWORD PTR _first$1$[ebp]
  00090	8b c3		 mov	 eax, ebx
  00092	83 d9 00	 sbb	 ecx, 0
  00095	0b c1		 or	 eax, ecx
  00097	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  0009a	75 a4		 jne	 SHORT $LL2@gz_zero
$LN3@gz_zero:
  0009c	5f		 pop	 edi
  0009d	5b		 pop	 ebx

; 160  :     }
; 161  :     return 0;

  0009e	33 c0		 xor	 eax, eax
  000a0	5e		 pop	 esi

; 162  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN11@gz_zero:
  000a5	5f		 pop	 edi
  000a6	5b		 pop	 ebx

; 158  :             return -1;

  000a7	83 c8 ff	 or	 eax, -1
  000aa	5e		 pop	 esi

; 162  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_gz_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzwrite@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$1$ = 12						; size = 4
_buf$ = 12						; size = 4
_put$1$ = 16						; size = 4
_len$ = 16						; size = 4
_gzwrite@12 PROC					; COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 170  :     unsigned put = len;

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  00007	56		 push	 esi

; 171  :     gz_statep state;
; 172  :     z_streamp strm;
; 173  : 
; 174  :     /* get internal structure */
; 175  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	89 5d 10	 mov	 DWORD PTR _put$1$[ebp], ebx
  0000e	85 f6		 test	 esi, esi
  00010	74 27		 je	 SHORT $LN29@gzwrite

; 176  :         return 0;
; 177  :     state = (gz_statep)file;
; 178  :     strm = &(state->strm);
; 179  : 
; 180  :     /* check that we're writing and that there's no error */
; 181  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00012	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00019	75 1e		 jne	 SHORT $LN29@gzwrite
  0001b	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  0001f	75 18		 jne	 SHORT $LN29@gzwrite

; 182  :         return 0;
; 183  : 
; 184  :     /* since an int is returned, make sure len fits in one, otherwise return
; 185  :        with an error (this avoids the flaw in the interface) */
; 186  :     if ((int)len < 0) {

  00021	85 db		 test	 ebx, ebx
  00023	79 1c		 jns	 SHORT $LN27@gzwrite

; 187  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
  0002a	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 _gz_error
  00036	83 c4 04	 add	 esp, 4
$LN29@gzwrite:

; 188  :         return 0;

  00039	5e		 pop	 esi
  0003a	33 c0		 xor	 eax, eax
  0003c	5b		 pop	 ebx

; 242  : }

  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
$LN27@gzwrite:

; 189  :     }
; 190  : 
; 191  :     /* if len is zero, avoid unnecessary operations */
; 192  :     if (len == 0)

  00041	74 f6		 je	 SHORT $LN29@gzwrite

; 193  :         return 0;
; 194  : 
; 195  :     /* allocate memory if this is the first time through */
; 196  :     if (state->size == 0 && gz_init(state) == -1)

  00043	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00047	75 0c		 jne	 SHORT $LN10@gzwrite
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 _gz_init
  00050	83 f8 ff	 cmp	 eax, -1
  00053	74 e4		 je	 SHORT $LN29@gzwrite
$LN10@gzwrite:

; 197  :         return 0;
; 198  : 
; 199  :     /* check for seek request */
; 200  :     if (state->seek) {

  00055	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00059	74 1c		 je	 SHORT $LN12@gzwrite

; 201  :         state->seek = 0;
; 202  :         if (gz_zero(state, state->skip) == -1)

  0005b	ff 76 54	 push	 DWORD PTR [esi+84]
  0005e	8b ce		 mov	 ecx, esi
  00060	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00067	ff 76 50	 push	 DWORD PTR [esi+80]
  0006a	e8 00 00 00 00	 call	 _gz_zero
  0006f	83 c4 08	 add	 esp, 8
  00072	83 f8 ff	 cmp	 eax, -1
  00075	74 c2		 je	 SHORT $LN29@gzwrite
$LN12@gzwrite:
  00077	57		 push	 edi

; 203  :             return 0;
; 204  :     }
; 205  : 
; 206  :     /* for small len, copy to input buffer, otherwise compress directly */
; 207  :     if (len < state->size) {

  00078	3b 5e 1c	 cmp	 ebx, DWORD PTR [esi+28]
  0007b	73 5d		 jae	 SHORT $LN13@gzwrite
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00080	89 45 0c	 mov	 DWORD PTR _buf$1$[ebp], eax
$LL4@gzwrite:

; 208  :         /* copy to input buffer, compress when full */
; 209  :         do {
; 210  :             unsigned have, copy;
; 211  : 
; 212  :             if (strm->avail_in == 0)

  00083	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  00086	85 d2		 test	 edx, edx
  00088	75 06		 jne	 SHORT $LN15@gzwrite

; 213  :                 strm->next_in = state->in;

  0008a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0008d	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN15@gzwrite:

; 214  :             have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00090	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00093	2b 46 24	 sub	 eax, DWORD PTR [esi+36]

; 215  :             copy = state->size - have;

  00096	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00099	03 c2		 add	 eax, edx
  0009b	2b f8		 sub	 edi, eax

; 216  :             if (copy > len)

  0009d	3b fb		 cmp	 edi, ebx
  0009f	0f 47 fb	 cmova	 edi, ebx

; 217  :                 copy = len;
; 218  :             memcpy(state->in + have, buf, copy);

  000a2	03 46 24	 add	 eax, DWORD PTR [esi+36]
  000a5	57		 push	 edi
  000a6	ff 75 0c	 push	 DWORD PTR _buf$1$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _memcpy

; 219  :             strm->avail_in += copy;

  000af	01 7e 68	 add	 DWORD PTR [esi+104], edi
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  :             state->x.pos += copy;

  000b5	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000b8	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 221  :             buf = (const char *)buf + copy;

  000bc	01 7d 0c	 add	 DWORD PTR _buf$1$[ebp], edi

; 222  :             len -= copy;

  000bf	2b df		 sub	 ebx, edi

; 223  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  000c1	74 49		 je	 SHORT $LN19@gzwrite
  000c3	33 d2		 xor	 edx, edx
  000c5	8b ce		 mov	 ecx, esi
  000c7	e8 00 00 00 00	 call	 _gz_comp
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 b2		 jne	 SHORT $LL4@gzwrite
$LN28@gzwrite:
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi

; 224  :                 return 0;

  000d3	33 c0		 xor	 eax, eax
  000d5	5b		 pop	 ebx

; 242  : }

  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
$LN13@gzwrite:

; 225  :         } while (len);
; 226  :     }
; 227  :     else {
; 228  :         /* consume whatever's left in the input buffer */
; 229  :         if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000da	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  000de	74 0e		 je	 SHORT $LN18@gzwrite
  000e0	33 d2		 xor	 edx, edx
  000e2	8b ce		 mov	 ecx, esi
  000e4	e8 00 00 00 00	 call	 _gz_comp
  000e9	83 f8 ff	 cmp	 eax, -1
  000ec	74 e3		 je	 SHORT $LN28@gzwrite
$LN18@gzwrite:

; 230  :             return 0;
; 231  : 
; 232  :         /* directly compress user buffer to file */
; 233  :         strm->avail_in = len;
; 234  :         strm->next_in = (z_const Bytef *)buf;

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]

; 235  :         state->x.pos += len;
; 236  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  000f1	8b ce		 mov	 ecx, esi
  000f3	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  000f6	89 46 64	 mov	 DWORD PTR [esi+100], eax
  000f9	01 5e 08	 add	 DWORD PTR [esi+8], ebx
  000fc	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  00100	33 d2		 xor	 edx, edx
  00102	e8 00 00 00 00	 call	 _gz_comp
  00107	83 f8 ff	 cmp	 eax, -1
  0010a	74 c5		 je	 SHORT $LN28@gzwrite
$LN19@gzwrite:

; 237  :             return 0;
; 238  :     }
; 239  : 
; 240  :     /* input was all buffered or compressed (put will fit in int) */
; 241  :     return (int)put;

  0010c	8b 45 10	 mov	 eax, DWORD PTR _put$1$[ebp]
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx

; 242  : }

  00112	5d		 pop	 ebp
  00113	c2 0c 00	 ret	 12			; 0000000cH
_gzwrite@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzputc@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_c$ = 12						; size = 4
_gzputc@8 PROC						; COMDAT

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 249  :     unsigned have;
; 250  :     unsigned char buf[1];
; 251  :     gz_statep state;
; 252  :     z_streamp strm;
; 253  : 
; 254  :     /* get internal structure */
; 255  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN2@gzputc
$LN14@gzputc:

; 256  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 290  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN2@gzputc:

; 257  :     state = (gz_statep)file;
; 258  :     strm = &(state->strm);
; 259  : 
; 260  :     /* check that we're writing and that there's no error */
; 261  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00013	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001a	75 ef		 jne	 SHORT $LN14@gzputc
  0001c	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00020	75 e9		 jne	 SHORT $LN14@gzputc

; 262  :         return -1;
; 263  : 
; 264  :     /* check for seek request */
; 265  :     if (state->seek) {

  00022	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00026	74 1c		 je	 SHORT $LN6@gzputc

; 266  :         state->seek = 0;
; 267  :         if (gz_zero(state, state->skip) == -1)

  00028	ff 76 54	 push	 DWORD PTR [esi+84]
  0002b	8b ce		 mov	 ecx, esi
  0002d	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00034	ff 76 50	 push	 DWORD PTR [esi+80]
  00037	e8 00 00 00 00	 call	 _gz_zero
  0003c	83 c4 08	 add	 esp, 8
  0003f	83 f8 ff	 cmp	 eax, -1
  00042	74 c7		 je	 SHORT $LN14@gzputc
$LN6@gzputc:

; 268  :             return -1;
; 269  :     }
; 270  : 
; 271  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 272  :        initialized) */
; 273  :     if (state->size) {

  00044	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00048	57		 push	 edi
  00049	74 36		 je	 SHORT $LN9@gzputc

; 274  :         if (strm->avail_in == 0)

  0004b	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  0004e	85 d2		 test	 edx, edx
  00050	75 06		 jne	 SHORT $LN8@gzputc

; 275  :             strm->next_in = state->in;

  00052	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00055	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN8@gzputc:

; 276  :         have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00058	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  0005b	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0005e	2b cf		 sub	 ecx, edi
  00060	03 ca		 add	 ecx, edx

; 277  :         if (have < state->size) {

  00062	3b 4e 1c	 cmp	 ecx, DWORD PTR [esi+28]
  00065	73 1a		 jae	 SHORT $LN9@gzputc

; 278  :             state->in[have] = c;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  0006a	88 04 0f	 mov	 BYTE PTR [edi+ecx], al

; 279  :             strm->avail_in++;

  0006d	ff 46 68	 inc	 DWORD PTR [esi+104]

; 280  :             state->x.pos++;

  00070	83 46 08 01	 add	 DWORD PTR [esi+8], 1
  00074	5f		 pop	 edi
  00075	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 281  :             return c & 0xff;

  00079	0f b6 c0	 movzx	 eax, al
  0007c	5e		 pop	 esi

; 290  : }

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
$LN9@gzputc:
  00081	53		 push	 ebx

; 282  :         }
; 283  :     }
; 284  : 
; 285  :     /* no room in buffer or not initialized, use gz_write() */
; 286  :     buf[0] = c;

  00082	8b 5d 0c	 mov	 ebx, DWORD PTR _c$[ebp]

; 287  :     if (gzwrite(file, buf, 1) != 1)

  00085	8d 45 0b	 lea	 eax, DWORD PTR _buf$[ebp]
  00088	6a 01		 push	 1
  0008a	50		 push	 eax
  0008b	56		 push	 esi
  0008c	88 5d 0b	 mov	 BYTE PTR _buf$[ebp], bl
  0008f	e8 00 00 00 00	 call	 _gzwrite@12
  00094	83 f8 01	 cmp	 eax, 1
  00097	74 0a		 je	 SHORT $LN10@gzputc

; 288  :         return -1;

  00099	5b		 pop	 ebx
  0009a	5f		 pop	 edi
  0009b	83 c8 ff	 or	 eax, -1
  0009e	5e		 pop	 esi

; 290  : }

  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
$LN10@gzputc:

; 289  :     return c & 0xff;

  000a3	0f b6 c3	 movzx	 eax, bl
  000a6	5b		 pop	 ebx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi

; 290  : }

  000a9	5d		 pop	 ebp
  000aa	c2 08 00	 ret	 8
_gzputc@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzputs@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_str$ = 12						; size = 4
_gzputs@8 PROC						; COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 297  :     int ret;
; 298  :     unsigned len;
; 299  : 
; 300  :     /* write string */
; 301  :     len = (unsigned)strlen(str);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	0f 1f 40 00	 npad	 4
$LL5@gzputs:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL5@gzputs
  00017	2b f2		 sub	 esi, edx

; 302  :     ret = gzwrite(file, str, len);

  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0001e	e8 00 00 00 00	 call	 _gzwrite@12

; 303  :     return ret == 0 && len != 0 ? -1 : ret;

  00023	85 c0		 test	 eax, eax
  00025	75 07		 jne	 SHORT $LN4@gzputs
  00027	85 f6		 test	 esi, esi
  00029	74 03		 je	 SHORT $LN4@gzputs
  0002b	83 c8 ff	 or	 eax, -1
$LN4@gzputs:
  0002e	5e		 pop	 esi

; 304  : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
_gzputs@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzvprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_va$ = 16						; size = 4
_gzvprintf PROC						; COMDAT

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 312  :     int size, len;
; 313  :     gz_statep state;
; 314  :     z_streamp strm;
; 315  : 
; 316  :     /* get internal structure */
; 317  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 06		 jne	 SHORT $LN2@gzvprintf

; 318  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 370  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN2@gzvprintf:

; 319  :     state = (gz_statep)file;
; 320  :     strm = &(state->strm);
; 321  : 
; 322  :     /* check that we're writing and that there's no error */
; 323  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00011	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00018	75 18		 jne	 SHORT $LN16@gzvprintf
  0001a	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  0001e	75 12		 jne	 SHORT $LN16@gzvprintf

; 324  :         return 0;
; 325  : 
; 326  :     /* make sure we have some buffer space */
; 327  :     if (state->size == 0 && gz_init(state) == -1)

  00020	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00024	75 11		 jne	 SHORT $LN5@gzvprintf
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 _gz_init
  0002d	83 f8 ff	 cmp	 eax, -1
  00030	75 05		 jne	 SHORT $LN5@gzvprintf
$LN16@gzvprintf:

; 328  :         return 0;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 370  : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN5@gzvprintf:

; 329  : 
; 330  :     /* check for seek request */
; 331  :     if (state->seek) {

  00037	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003b	74 1c		 je	 SHORT $LN7@gzvprintf

; 332  :         state->seek = 0;
; 333  :         if (gz_zero(state, state->skip) == -1)

  0003d	ff 76 54	 push	 DWORD PTR [esi+84]
  00040	8b ce		 mov	 ecx, esi
  00042	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00049	ff 76 50	 push	 DWORD PTR [esi+80]
  0004c	e8 00 00 00 00	 call	 _gz_zero
  00051	83 c4 08	 add	 esp, 8
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 d9		 je	 SHORT $LN16@gzvprintf
$LN7@gzvprintf:

; 334  :             return 0;
; 335  :     }
; 336  : 
; 337  :     /* consume whatever's left in the input buffer */
; 338  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  00059	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0005d	74 0e		 je	 SHORT $LN8@gzvprintf
  0005f	33 d2		 xor	 edx, edx
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 _gz_comp
  00068	83 f8 ff	 cmp	 eax, -1
  0006b	74 c5		 je	 SHORT $LN16@gzvprintf
$LN8@gzvprintf:

; 343  :     state->in[size - 1] = 0;

  0006d	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00070	53		 push	 ebx
  00071	8b 5e 1c	 mov	 ebx, DWORD PTR [esi+28]
  00074	57		 push	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1436 :     int const _Result = __stdio_common_vsprintf(

  00075	ff 75 10	 push	 DWORD PTR _va$[ebp]
  00078	6a 00		 push	 0
  0007a	ff 75 0c	 push	 DWORD PTR _format$[ebp]
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c

; 343  :     state->in[size - 1] = 0;

  0007d	c6 44 03 ff 00	 mov	 BYTE PTR [ebx+eax-1], 0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1436 :     int const _Result = __stdio_common_vsprintf(

  00082	53		 push	 ebx
  00083	ff 76 24	 push	 DWORD PTR [esi+36]
  00086	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	ff 70 04	 push	 DWORD PTR [eax+4]
  00090	83 c9 02	 or	 ecx, 2
  00093	51		 push	 ecx
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0009a	8b f8		 mov	 edi, eax
  0009c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1437 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1438 :         _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1439 : 
; 1440 :     return _Result < 0 ? -1 : _Result;

  0009f	83 c8 ff	 or	 eax, -1
  000a2	85 ff		 test	 edi, edi
  000a4	0f 48 f8	 cmovs	 edi, eax
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c

; 362  :     if (len <= 0 || len >= (int)size || state->in[size - 1] != 0)

  000a7	85 ff		 test	 edi, edi
  000a9	7e 26		 jle	 SHORT $LN10@gzvprintf
  000ab	3b fb		 cmp	 edi, ebx
  000ad	7d 22		 jge	 SHORT $LN10@gzvprintf
  000af	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000b2	80 7c 03 ff 00	 cmp	 BYTE PTR [ebx+eax-1], 0
  000b7	75 18		 jne	 SHORT $LN10@gzvprintf

; 364  : 
; 365  :     /* update buffer and position, defer compression until needed */
; 366  :     strm->avail_in = (unsigned)len;
; 367  :     strm->next_in = state->in;

  000b9	8b c8		 mov	 ecx, eax
  000bb	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 368  :     state->x.pos += len;

  000be	8b c7		 mov	 eax, edi
  000c0	89 4e 64	 mov	 DWORD PTR [esi+100], ecx
  000c3	99		 cdq
  000c4	01 46 08	 add	 DWORD PTR [esi+8], eax

; 369  :     return len;

  000c7	8b c7		 mov	 eax, edi
  000c9	5f		 pop	 edi
  000ca	11 56 0c	 adc	 DWORD PTR [esi+12], edx
  000cd	5b		 pop	 ebx
  000ce	5e		 pop	 esi

; 370  : }

  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
$LN10@gzvprintf:
  000d1	5f		 pop	 edi
  000d2	5b		 pop	 ebx

; 363  :         return 0;

  000d3	33 c0		 xor	 eax, eax
  000d5	5e		 pop	 esi

; 370  : }

  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_gzvprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_gzprintf PROC						; COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 374  :     va_list va;
; 375  :     int ret;
; 376  : 
; 377  :     va_start(va, format);
; 378  :     ret = gzvprintf(file, format, va);

  00003	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000d	e8 00 00 00 00	 call	 _gzvprintf
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 379  :     va_end(va);
; 380  :     return ret;
; 381  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzflush@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_flush$ = 12						; size = 4
_gzflush@8 PROC						; COMDAT

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 469  :     gz_statep state;
; 470  : 
; 471  :     /* get internal structure */
; 472  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN2@gzflush
$LN10@gzflush:

; 473  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 494  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN2@gzflush:

; 474  :     state = (gz_statep)file;
; 475  : 
; 476  :     /* check that we're writing and that there's no error */
; 477  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00013	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001a	75 40		 jne	 SHORT $LN4@gzflush
  0001c	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00020	75 3a		 jne	 SHORT $LN4@gzflush

; 479  : 
; 480  :     /* check flush parameter */
; 481  :     if (flush < 0 || flush > Z_FINISH)

  00022	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00026	77 34		 ja	 SHORT $LN4@gzflush

; 482  :         return Z_STREAM_ERROR;
; 483  : 
; 484  :     /* check for seek request */
; 485  :     if (state->seek) {

  00028	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0002c	74 1c		 je	 SHORT $LN8@gzflush

; 486  :         state->seek = 0;
; 487  :         if (gz_zero(state, state->skip) == -1)

  0002e	ff 76 54	 push	 DWORD PTR [esi+84]
  00031	8b ce		 mov	 ecx, esi
  00033	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0003a	ff 76 50	 push	 DWORD PTR [esi+80]
  0003d	e8 00 00 00 00	 call	 _gz_zero
  00042	83 c4 08	 add	 esp, 8
  00045	83 f8 ff	 cmp	 eax, -1
  00048	74 c1		 je	 SHORT $LN10@gzflush
$LN8@gzflush:

; 488  :             return -1;
; 489  :     }
; 490  : 
; 491  :     /* compress remaining data with requested flush */
; 492  :     gz_comp(state, flush);

  0004a	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 _gz_comp

; 493  :     return state->err;

  00054	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00057	5e		 pop	 esi

; 494  : }

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
$LN4@gzflush:

; 478  :         return Z_STREAM_ERROR;

  0005c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00061	5e		 pop	 esi

; 494  : }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_gzflush@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\gzwrite.c
;	COMDAT _gzsetparams@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_gzsetparams@12 PROC					; COMDAT

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 502  :     gz_statep state;
; 503  :     z_streamp strm;
; 504  : 
; 505  :     /* get internal structure */
; 506  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 0a		 jne	 SHORT $LN2@gzsetparam
$LN4@gzsetparam:

; 507  :         return Z_STREAM_ERROR;

  0000b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00010	5e		 pop	 esi

; 536  : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
$LN2@gzsetparam:

; 508  :     state = (gz_statep)file;
; 509  :     strm = &(state->strm);
; 510  : 
; 511  :     /* check that we're writing and that there's no error */
; 512  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0001f	75 ea		 jne	 SHORT $LN4@gzsetparam
  00021	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00025	75 e4		 jne	 SHORT $LN4@gzsetparam

; 513  :         return Z_STREAM_ERROR;
; 514  : 
; 515  :     /* if no change is requested, then do nothing */
; 516  :     if (level == state->level && strategy == state->strategy)

  00027	53		 push	 ebx
  00028	8b 5d 0c	 mov	 ebx, DWORD PTR _level$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7d 10	 mov	 edi, DWORD PTR _strategy$[ebp]
  0002f	3b 5e 48	 cmp	 ebx, DWORD PTR [esi+72]
  00032	75 05		 jne	 SHORT $LN5@gzsetparam
  00034	3b 7e 4c	 cmp	 edi, DWORD PTR [esi+76]
  00037	74 66		 je	 SHORT $LN15@gzsetparam
$LN5@gzsetparam:

; 517  :         return Z_OK;
; 518  : 
; 519  :     /* check for seek request */
; 520  :     if (state->seek) {

  00039	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003d	74 28		 je	 SHORT $LN7@gzsetparam

; 521  :         state->seek = 0;
; 522  :         if (gz_zero(state, state->skip) == -1)

  0003f	ff 76 54	 push	 DWORD PTR [esi+84]
  00042	8b ce		 mov	 ecx, esi
  00044	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004b	ff 76 50	 push	 DWORD PTR [esi+80]
  0004e	e8 00 00 00 00	 call	 _gz_zero
  00053	83 c4 08	 add	 esp, 8
  00056	83 f8 ff	 cmp	 eax, -1
  00059	75 09		 jne	 SHORT $LN12@gzsetparam

; 523  :             return -1;

  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
  0005d	0b c0		 or	 eax, eax
  0005f	5e		 pop	 esi

; 536  : }

  00060	5d		 pop	 ebp
  00061	c2 0c 00	 ret	 12			; 0000000cH
$LN12@gzsetparam:
  00064	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN7@gzsetparam:

; 524  :     }
; 525  : 
; 526  :     /* change compression parameters for subsequent input */
; 527  :     if (state->size) {

  00067	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0006b	74 2c		 je	 SHORT $LN8@gzsetparam

; 528  :         /* flush previous input with previous parameters before changing */
; 529  :         if (strm->avail_in && gz_comp(state, Z_PARTIAL_FLUSH) == -1)

  0006d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00071	74 1e		 je	 SHORT $LN9@gzsetparam
  00073	ba 01 00 00 00	 mov	 edx, 1
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 _gz_comp
  0007f	83 f8 ff	 cmp	 eax, -1
  00082	75 0a		 jne	 SHORT $LN11@gzsetparam

; 530  :             return state->err;

  00084	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00087	5f		 pop	 edi
  00088	5b		 pop	 ebx
  00089	5e		 pop	 esi

; 536  : }

  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
$LN11@gzsetparam:
  0008e	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN9@gzsetparam:

; 531  :         deflateParams(strm, level, strategy);

  00091	57		 push	 edi
  00092	53		 push	 ebx
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _deflateParams@12
$LN8@gzsetparam:

; 532  :     }
; 533  :     state->level = level;

  00099	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 534  :     state->strategy = strategy;

  0009c	89 7e 4c	 mov	 DWORD PTR [esi+76], edi
$LN15@gzsetparam:

; 535  :     return Z_OK;

  0009f	5f		 pop	 edi
  000a0	5b		 pop	 ebx
  000a1	33 c0		 xor	 eax, eax
  000a3	5e		 pop	 esi

; 536  : }

  000a4	5d		 pop	 ebp
  000a5	c2 0c 00	 ret	 12			; 0000000cH
_gzsetparams@12 ENDP
_TEXT	ENDS
END
