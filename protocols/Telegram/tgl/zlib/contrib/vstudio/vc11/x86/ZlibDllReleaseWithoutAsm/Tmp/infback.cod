; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\downloads\tgl-master\tgl-master\zlib\infback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@	; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ ; `string'
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ DB 'invalid dis'
	DB	'tance too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@ DB 'invalid distance code'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ DB 'invalid litera'
	DB	'l/length code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@ DB 'invalid distances set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ DB 'invalid litera'
	DB	'l/lengths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ DB 'invalid '
	DB	'code -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ DB 'invalid bit leng'
	DB	'th repeat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ DB 'invalid code leng'
	DB	'ths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ DB 'too many le'
	DB	'ngth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ DB 'invalid store'
	DB	'd block lengths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	0f 84 c0 00 00
	00		 je	 $LN3@inflateBac
  0000e	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00011	0f 85 b7 00 00
	00		 jne	 $LN3@inflateBac
  00017	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001b	0f 85 ad 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 93 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 88 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	77 7d		 ja	 SHORT $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00045	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00049	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00050	75 0e		 jne	 SHORT $LN6@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;

  00052	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc

; 49   :         strm->opaque = (voidpf)0;

  00059	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  00060	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00064	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00066	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0006d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00070	68 cc 1b 00 00	 push	 7116			; 00001bccH
  00075	6a 01		 push	 1
  00077	ff 76 28	 push	 DWORD PTR [esi+40]
  0007a	ff d0		 call	 eax
  0007c	8b d0		 mov	 edx, eax
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00081	85 d2		 test	 edx, edx
  00083	75 0a		 jne	 SHORT $LN8@inflateBac
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0008a	5b		 pop	 ebx

; 70   : }

  0008b	5d		 pop	 ebp
  0008c	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  0008f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = windowBits;
; 65   :     state->wsize = 1U << windowBits;

  00092	8b cf		 mov	 ecx, edi
  00094	89 7a 24	 mov	 DWORD PTR [edx+36], edi
  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	5f		 pop	 edi
  0009d	d3 e0		 shl	 eax, cl
  0009f	5e		 pop	 esi
  000a0	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 66   :     state->window = window;
; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000a3	33 c0		 xor	 eax, eax
  000a5	89 5a 34	 mov	 DWORD PTR [edx+52], ebx
  000a8	c7 42 14 00 80
	00 00		 mov	 DWORD PTR [edx+20], 32768 ; 00008000H
  000af	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000b6	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0
  000bd	5b		 pop	 ebx

; 70   : }

  000be	5d		 pop	 ebp
  000bf	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi

; 42   :         return Z_STREAM_ERROR;

  000c4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000c9	5b		 pop	 ebx

; 70   : }

  000ca	5d		 pop	 ebp
  000cb	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000ce	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH

; 70   : }

  000d3	5d		 pop	 ebp
  000d4	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 54 09 00
	00 00		 mov	 DWORD PTR [ecx+84], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 58 05 00
	00 00		 mov	 DWORD PTR [ecx+88], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
tv1719 = -48						; size = 4
tv1718 = -48						; size = 4
tv1717 = -48						; size = 4
$T1 = -44						; size = 4
tv1711 = -44						; size = 4
tv1709 = -44						; size = 4
tv1708 = -44						; size = 4
tv1722 = -40						; size = 4
_len$1$ = -36						; size = 4
_here$1$ = -36						; size = 4
_copy$4$ = -32						; size = 4
_last$ = -32						; size = 4
_here$ = -32						; size = 4
_put$1$ = -28						; size = 4
_left$1$ = -24						; size = 4
_bits$1$ = -20						; size = 4
_next$5$ = -16						; size = 4
_state$1$ = -12						; size = 4
_next$ = -8						; size = 4
_hold$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	83 ec 30	 sub	 esp, 48			; 00000030H
  00009	85 c0		 test	 eax, eax
  0000b	0f 84 96 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00014	89 55 f4	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 88 0d 00
	00		 je	 $LN254@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  0001f	53		 push	 ebx
  00020	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 279  :     state->mode = TYPE;

  00027	c7 02 0b 00 00
	00		 mov	 DWORD PTR [edx], 11	; 0000000bH

; 280  :     state->last = 0;

  0002d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 281  :     state->whave = 0;

  00034	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 282  :     next = strm->next_in;

  0003b	8b 18		 mov	 ebx, DWORD PTR [eax]
  0003d	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00040	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00043	56		 push	 esi
  00044	57		 push	 edi

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00045	85 db		 test	 ebx, ebx
  00047	74 05		 je	 SHORT $LN343@inflateBac
  00049	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0004c	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004e	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  00050	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00053	33 c9		 xor	 ecx, ecx
  00055	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  00058	33 ff		 xor	 edi, edi

; 287  :     left = state->wsize;

  0005a	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0005d	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00060	8b 02		 mov	 eax, DWORD PTR [edx]
  00062	83 e8 0b	 sub	 eax, 11			; 0000000bH
  00065	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  00068	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0006b	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006e	0f 87 9c 0c 00
	00		 ja	 $LN341@inflateBac
  00074	8b 5d f0	 mov	 ebx, DWORD PTR _next$5$[ebp]
  00077	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@inflateBac:
  00080	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN473@inflateBac[eax]
  00087	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN507@inflateBac[eax*4]
$LN255@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  0008e	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00092	74 18		 je	 SHORT $LN12@inflateBac

; 295  :                 BYTEBITS();

  00094	8b cf		 mov	 ecx, edi

; 296  :                 state->mode = DONE;

  00096	c7 02 1c 00 00
	00		 mov	 DWORD PTR [edx], 28	; 0000001cH
  0009c	83 e1 07	 and	 ecx, 7
  0009f	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  000a2	2b f9		 sub	 edi, ecx
  000a4	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 297  :                 break;

  000a7	e9 4d 0c 00 00	 jmp	 $LN505@inflateBac
$LN12@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000ac	83 ff 03	 cmp	 edi, 3
  000af	73 3d		 jae	 SHORT $LN10@inflateBac
$LL13@inflateBac:
  000b1	85 f6		 test	 esi, esi
  000b3	75 1a		 jne	 SHORT $LN18@inflateBac
  000b5	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  000bc	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bf	8b f0		 mov	 esi, eax
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 f6		 test	 esi, esi
  000c6	0f 84 5f 0c 00
	00		 je	 $LN369@inflateBac
  000cc	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN18@inflateBac:
  000cf	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  000d2	8b cf		 mov	 ecx, edi
  000d4	d3 e0		 shl	 eax, cl
  000d6	43		 inc	 ebx
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  000da	83 c7 08	 add	 edi, 8
  000dd	03 c8		 add	 ecx, eax
  000df	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  000e2	4e		 dec	 esi
  000e3	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  000e6	83 ff 03	 cmp	 edi, 3
  000e9	72 c6		 jb	 SHORT $LL13@inflateBac
  000eb	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 300  :             state->last = BITS(1);

  000ee	8b c1		 mov	 eax, ecx

; 301  :             DROPBITS(1);

  000f0	d1 e9		 shr	 ecx, 1
  000f2	83 e0 01	 and	 eax, 1
  000f5	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  000f8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 302  :             switch (BITS(2)) {

  000fb	8b c1		 mov	 eax, ecx
  000fd	83 e0 03	 and	 eax, 3
  00100	83 f8 03	 cmp	 eax, 3
  00103	77 39		 ja	 SHORT $LN28@inflateBac
  00105	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN508@inflateBac[eax*4]
$LN259@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;

  0010c	c7 02 0d 00 00
	00		 mov	 DWORD PTR [edx], 13	; 0000000dH

; 307  :                 break;

  00112	eb 2a		 jmp	 SHORT $LN28@inflateBac
$LN260@inflateBac:

; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00114	8b ca		 mov	 ecx, edx
  00116	e8 00 00 00 00	 call	 _fixedtables

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  0011e	c7 02 14 00 00
	00		 mov	 DWORD PTR [edx], 20	; 00000014H
  00124	eb 18		 jmp	 SHORT $LN28@inflateBac
$LN261@inflateBac:

; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;

  00126	c7 02 10 00 00
	00		 mov	 DWORD PTR [edx], 16	; 00000010H

; 318  :                 break;

  0012c	eb 10		 jmp	 SHORT $LN28@inflateBac
$LN262@inflateBac:

; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  0012e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00131	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@

; 321  :                 state->mode = BAD;

  00138	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH
$LN28@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);
; 324  :             break;

  0013e	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00141	c1 e9 02	 shr	 ecx, 2
  00144	83 ef 03	 sub	 edi, 3
  00147	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  0014a	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0014d	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00150	e9 ad 0b 00 00	 jmp	 $LN393@inflateBac
$LN31@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  00155	8b cf		 mov	 ecx, edi
  00157	83 e1 07	 and	 ecx, 7
  0015a	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  0015d	2b f9		 sub	 edi, ecx
  0015f	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 329  :             NEEDBITS(32);

  00162	83 ff 20	 cmp	 edi, 32			; 00000020H
  00165	73 42		 jae	 SHORT $LN493@inflateBac
$LL35@inflateBac:
  00167	85 f6		 test	 esi, esi
  00169	75 1a		 jne	 SHORT $LN40@inflateBac
  0016b	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0016e	50		 push	 eax
  0016f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00172	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00175	8b f0		 mov	 esi, eax
  00177	83 c4 08	 add	 esp, 8
  0017a	85 f6		 test	 esi, esi
  0017c	0f 84 a9 0b 00
	00		 je	 $LN369@inflateBac
  00182	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN40@inflateBac:
  00185	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00188	8b cf		 mov	 ecx, edi
  0018a	d3 e0		 shl	 eax, cl
  0018c	83 c7 08	 add	 edi, 8
  0018f	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  00192	43		 inc	 ebx
  00193	03 c8		 add	 ecx, eax
  00195	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00198	4e		 dec	 esi
  00199	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  0019c	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0019f	83 ff 20	 cmp	 edi, 32			; 00000020H
  001a2	72 c3		 jb	 SHORT $LL35@inflateBac
  001a4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  001a7	eb 03		 jmp	 SHORT $LN32@inflateBac
$LN493@inflateBac:
  001a9	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN32@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001ac	8b c1		 mov	 eax, ecx
  001ae	0f b7 d9	 movzx	 ebx, cx
  001b1	f7 d0		 not	 eax
  001b3	c1 e8 10	 shr	 eax, 16			; 00000010H
  001b6	3b d8		 cmp	 ebx, eax
  001b8	74 1b		 je	 SHORT $LN266@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001ba	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001bd	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@

; 332  :                 state->mode = BAD;

  001c4	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 333  :                 break;

  001ca	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  001cd	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  001d0	e9 2d 0b 00 00	 jmp	 $LN393@inflateBac
$LN266@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;
; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001d5	33 c9		 xor	 ecx, ecx
  001d7	89 5a 40	 mov	 DWORD PTR [edx+64], ebx
  001da	33 ff		 xor	 edi, edi
  001dc	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  001df	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001e2	3b d9		 cmp	 ebx, ecx
  001e4	0f 84 88 00 00
	00		 je	 $LN47@inflateBac
  001ea	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
  001ed	0f 1f 00	 npad	 3
$LL46@inflateBac:

; 342  :                 copy = state->length;

  001f0	8b 5a 40	 mov	 ebx, DWORD PTR [edx+64]

; 343  :                 PULL();

  001f3	85 f6		 test	 esi, esi
  001f5	75 1d		 jne	 SHORT $LN48@inflateBac
  001f7	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  001fa	50		 push	 eax
  001fb	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  001fe	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00201	8b f0		 mov	 esi, eax
  00203	83 c4 08	 add	 esp, 8
  00206	85 f6		 test	 esi, esi
  00208	0f 84 1d 0b 00
	00		 je	 $LN369@inflateBac
  0020e	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00211	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 344  :                 ROOM();

  00214	85 c0		 test	 eax, eax
  00216	75 25		 jne	 SHORT $LN51@inflateBac
  00218	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  0021b	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0021e	51		 push	 ecx
  0021f	50		 push	 eax
  00220	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00223	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  00226	89 4d e8	 mov	 DWORD PTR _left$1$[ebp], ecx
  00229	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx
  0022c	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0022f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00232	85 c0		 test	 eax, eax
  00234	0f 85 0b 0b 00
	00		 jne	 $LN372@inflateBac
  0023a	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN51@inflateBac:

; 345  :                 if (copy > have) copy = have;

  0023d	3b de		 cmp	 ebx, esi
  0023f	0f 47 de	 cmova	 ebx, esi

; 346  :                 if (copy > left) copy = left;

  00242	3b d8		 cmp	 ebx, eax
  00244	0f 47 d8	 cmova	 ebx, eax

; 347  :                 zmemcpy(put, next, copy);

  00247	8b 45 e4	 mov	 eax, DWORD PTR _put$1$[ebp]
  0024a	53		 push	 ebx
  0024b	ff 75 f8	 push	 DWORD PTR _next$[ebp]
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;
; 350  :                 left -= copy;
; 351  :                 put += copy;
; 352  :                 state->length -= copy;

  00254	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00257	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025a	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
  0025d	2b f3		 sub	 esi, ebx
  0025f	01 5d f8	 add	 DWORD PTR _next$[ebp], ebx
  00262	2b c3		 sub	 eax, ebx
  00264	01 5d e4	 add	 DWORD PTR _put$1$[ebp], ebx
  00267	29 5a 40	 sub	 DWORD PTR [edx+64], ebx
  0026a	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  0026d	75 81		 jne	 SHORT $LL46@inflateBac
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN47@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  00272	c7 02 0b 00 00
	00		 mov	 DWORD PTR [edx], 11	; 0000000bH

; 356  :             break;

  00278	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0027b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0027e	e9 7f 0a 00 00	 jmp	 $LN393@inflateBac
$LN56@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  00283	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00286	73 38		 jae	 SHORT $LN54@inflateBac
$LL57@inflateBac:
  00288	85 f6		 test	 esi, esi
  0028a	75 1a		 jne	 SHORT $LN62@inflateBac
  0028c	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0028f	50		 push	 eax
  00290	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00293	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00296	8b f0		 mov	 esi, eax
  00298	83 c4 08	 add	 esp, 8
  0029b	85 f6		 test	 esi, esi
  0029d	0f 84 88 0a 00
	00		 je	 $LN369@inflateBac
  002a3	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN62@inflateBac:
  002a6	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  002a9	8b cf		 mov	 ecx, edi
  002ab	d3 e0		 shl	 eax, cl
  002ad	43		 inc	 ebx
  002ae	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  002b1	83 c7 08	 add	 edi, 8
  002b4	4e		 dec	 esi
  002b5	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  002b8	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  002bb	72 cb		 jb	 SHORT $LL57@inflateBac
  002bd	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN54@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002c0	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;
; 364  :             DROPBITS(5);
; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002c3	83 ef 0e	 sub	 edi, 14			; 0000000eH
  002c6	8b c3		 mov	 eax, ebx
  002c8	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  002cb	83 e0 1f	 and	 eax, 31			; 0000001fH
  002ce	c1 eb 05	 shr	 ebx, 5
  002d1	05 01 01 00 00	 add	 eax, 257		; 00000101H
  002d6	89 42 60	 mov	 DWORD PTR [edx+96], eax
  002d9	8b c3		 mov	 eax, ebx
  002db	83 e0 1f	 and	 eax, 31			; 0000001fH
  002de	c1 eb 05	 shr	 ebx, 5
  002e1	40		 inc	 eax
  002e2	89 42 64	 mov	 DWORD PTR [edx+100], eax
  002e5	8b c3		 mov	 eax, ebx
  002e7	83 e0 0f	 and	 eax, 15			; 0000000fH
  002ea	c1 eb 04	 shr	 ebx, 4
  002ed	83 c0 04	 add	 eax, 4
  002f0	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  002f3	81 7a 60 1e 01
	00 00		 cmp	 DWORD PTR [edx+96], 286	; 0000011eH
  002fa	89 42 5c	 mov	 DWORD PTR [edx+92], eax
  002fd	0f 87 02 05 00
	00		 ja	 $LN277@inflateBac
  00303	83 7a 64 1e	 cmp	 DWORD PTR [edx+100], 30	; 0000001eH
  00307	0f 87 f8 04 00
	00		 ja	 $LN277@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  0030d	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], 0

; 378  :             while (state->have < state->ncode) {

  00314	85 c0		 test	 eax, eax
  00316	76 6b		 jbe	 SHORT $LN352@inflateBac
$LL74@inflateBac:

; 379  :                 NEEDBITS(3);

  00318	83 ff 03	 cmp	 edi, 3
  0031b	73 3a		 jae	 SHORT $LN76@inflateBac
  0031d	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LL79@inflateBac:
  00320	85 f6		 test	 esi, esi
  00322	75 1a		 jne	 SHORT $LN84@inflateBac
  00324	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00327	50		 push	 eax
  00328	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0032b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0032e	8b f0		 mov	 esi, eax
  00330	83 c4 08	 add	 esp, 8
  00333	85 f6		 test	 esi, esi
  00335	0f 84 f0 09 00
	00		 je	 $LN369@inflateBac
  0033b	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  0033e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00341	8b cf		 mov	 ecx, edi
  00343	d3 e0		 shl	 eax, cl
  00345	42		 inc	 edx
  00346	83 c7 08	 add	 edi, 8
  00349	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  0034c	4e		 dec	 esi
  0034d	03 d8		 add	 ebx, eax
  0034f	83 ff 03	 cmp	 edi, 3
  00352	72 cc		 jb	 SHORT $LL79@inflateBac
  00354	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00357	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0035a	8b cb		 mov	 ecx, ebx
  0035c	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  0035f	c1 eb 03	 shr	 ebx, 3
  00362	83 ef 03	 sub	 edi, 3
  00365	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00368	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0036b	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00373	66 89 4c 42 70	 mov	 WORD PTR [edx+eax*2+112], cx
  00378	ff 42 68	 inc	 DWORD PTR [edx+104]
  0037b	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0037e	3b 42 5c	 cmp	 eax, DWORD PTR [edx+92]
  00381	72 95		 jb	 SHORT $LL74@inflateBac
$LN352@inflateBac:

; 382  :             }
; 383  :             while (state->have < 19)

  00383	83 7a 68 13	 cmp	 DWORD PTR [edx+104], 19	; 00000013H
  00387	73 22		 jae	 SHORT $LN91@inflateBac
  00389	0f 1f 80 00 00
	00 00		 npad	 7
$LL90@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  00390	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00393	33 c9		 xor	 ecx, ecx
  00395	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  0039d	66 89 4c 42 70	 mov	 WORD PTR [edx+eax*2+112], cx
  003a2	ff 42 68	 inc	 DWORD PTR [edx+104]
  003a5	83 7a 68 13	 cmp	 DWORD PTR [edx+104], 19	; 00000013H
  003a9	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 385  :             state->next = state->codes;

  003ab	8d 82 30 05 00
	00		 lea	 eax, DWORD PTR [edx+1328]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003b1	c7 42 54 07 00
	00 00		 mov	 DWORD PTR [edx+84], 7
  003b8	8d 4a 6c	 lea	 ecx, DWORD PTR [edx+108]
  003bb	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003be	8d 9a f0 02 00
	00		 lea	 ebx, DWORD PTR [edx+752]
  003c4	89 01		 mov	 DWORD PTR [ecx], eax
  003c6	8d 42 54	 lea	 eax, DWORD PTR [edx+84]
  003c9	83 c2 70	 add	 edx, 112		; 00000070H
  003cc	53		 push	 ebx
  003cd	50		 push	 eax
  003ce	51		 push	 ecx
  003cf	6a 13		 push	 19			; 00000013H
  003d1	33 c9		 xor	 ecx, ecx
  003d3	89 45 d8	 mov	 DWORD PTR tv1722[ebp], eax
  003d6	89 55 d0	 mov	 DWORD PTR tv1719[ebp], edx
  003d9	e8 00 00 00 00	 call	 _inflate_table

; 392  :                 state->mode = BAD;

  003de	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  003e1	83 c4 10	 add	 esp, 16			; 00000010H
  003e4	85 c0		 test	 eax, eax
  003e6	74 15		 je	 SHORT $LN280@inflateBac

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {
; 391  :                 strm->msg = (char *)"invalid code lengths set";

  003e8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  003eb	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@

; 392  :                 state->mode = BAD;

  003f2	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 393  :                 break;

  003f8	e9 fc 08 00 00	 jmp	 $LN505@inflateBac
$LN280@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  003fd	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00400	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], 0
  00407	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0040a	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0040d	03 42 60	 add	 eax, DWORD PTR [edx+96]
  00410	0f 84 7f 02 00
	00		 je	 $LN93@inflateBac
$LL92@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00416	8b 45 d8	 mov	 eax, DWORD PTR tv1722[ebp]
  00419	ba 01 00 00 00	 mov	 edx, 1
  0041e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00420	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00423	d3 e2		 shl	 edx, cl
  00425	4a		 dec	 edx
  00426	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00429	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  0042c	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  0042f	8b c8		 mov	 ecx, eax
  00431	c1 e9 08	 shr	 ecx, 8
  00434	0f b6 c9	 movzx	 ecx, cl
  00437	89 45 dc	 mov	 DWORD PTR _here$1$[ebp], eax
  0043a	89 45 e0	 mov	 DWORD PTR _here$[ebp], eax
  0043d	3b cf		 cmp	 ecx, edi
  0043f	76 5e		 jbe	 SHORT $LN375@inflateBac
$LL94@inflateBac:

; 403  :                     PULLBYTE();

  00441	85 f6		 test	 esi, esi
  00443	75 1a		 jne	 SHORT $LN100@inflateBac
  00445	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00448	50		 push	 eax
  00449	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0044c	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0044f	8b f0		 mov	 esi, eax
  00451	83 c4 08	 add	 esp, 8
  00454	85 f6		 test	 esi, esi
  00456	0f 84 cf 08 00
	00		 je	 $LN369@inflateBac
  0045c	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  0045f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00462	8b cf		 mov	 ecx, edi
  00464	d3 e0		 shl	 eax, cl
  00466	43		 inc	 ebx
  00467	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  0046a	ba 01 00 00 00	 mov	 edx, 1
  0046f	8b 45 d8	 mov	 eax, DWORD PTR tv1722[ebp]
  00472	83 c7 08	 add	 edi, 8
  00475	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00478	4e		 dec	 esi
  00479	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0047c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047e	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00481	d3 e2		 shl	 edx, cl
  00483	4a		 dec	 edx
  00484	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00487	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  0048a	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0048d	8b c8		 mov	 ecx, eax
  0048f	c1 e9 08	 shr	 ecx, 8
  00492	0f b6 c9	 movzx	 ecx, cl
  00495	89 45 dc	 mov	 DWORD PTR _here$1$[ebp], eax
  00498	89 45 e0	 mov	 DWORD PTR _here$[ebp], eax
  0049b	3b cf		 cmp	 ecx, edi
  0049d	77 a2		 ja	 SHORT $LL94@inflateBac
$LN375@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  0049f	8b c8		 mov	 ecx, eax
  004a1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004a4	89 4d d4	 mov	 DWORD PTR tv1711[ebp], ecx
  004a7	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004ab	73 24		 jae	 SHORT $LN501@inflateBac

; 406  :                     DROPBITS(here.bits);
; 407  :                     state->lens[state->have++] = here.val;

  004ad	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  004b0	c1 e8 08	 shr	 eax, 8
  004b3	0f b6 c8	 movzx	 ecx, al
  004b6	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  004b9	2b f9		 sub	 edi, ecx
  004bb	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  004be	8b 4d d4	 mov	 ecx, DWORD PTR tv1711[ebp]
  004c1	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  004c4	66 89 4c 42 70	 mov	 WORD PTR [edx+eax*2+112], cx
  004c9	ff 42 68	 inc	 DWORD PTR [edx+104]

; 408  :                 }

  004cc	e9 af 01 00 00	 jmp	 $LN502@inflateBac
$LN501@inflateBac:
  004d1	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  004d4	0f 85 95 00 00
	00		 jne	 $LN286@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  004da	8b c8		 mov	 ecx, eax
  004dc	c1 e9 08	 shr	 ecx, 8
  004df	0f b6 c9	 movzx	 ecx, cl
  004e2	83 c1 02	 add	 ecx, 2
  004e5	89 4d d4	 mov	 DWORD PTR $T1[ebp], ecx
  004e8	3b f9		 cmp	 edi, ecx
  004ea	73 44		 jae	 SHORT $LN106@inflateBac
  004ec	0f 1f 40 00	 npad	 4
$LL109@inflateBac:
  004f0	85 f6		 test	 esi, esi
  004f2	75 1d		 jne	 SHORT $LN114@inflateBac
  004f4	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  004f7	50		 push	 eax
  004f8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  004fb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  004fe	8b f0		 mov	 esi, eax
  00500	83 c4 08	 add	 esp, 8
  00503	85 f6		 test	 esi, esi
  00505	0f 84 20 08 00
	00		 je	 $LN369@inflateBac
  0050b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0050e	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN114@inflateBac:
  00511	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00514	8b cf		 mov	 ecx, edi
  00516	d3 e0		 shl	 eax, cl
  00518	43		 inc	 ebx
  00519	03 d0		 add	 edx, eax
  0051b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0051e	83 c7 08	 add	 edi, 8
  00521	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  00524	4e		 dec	 esi
  00525	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00528	3b 7d d4	 cmp	 edi, DWORD PTR $T1[ebp]
  0052b	72 c3		 jb	 SHORT $LL109@inflateBac
  0052d	8b 45 dc	 mov	 eax, DWORD PTR _here$1$[ebp]
$LN106@inflateBac:

; 412  :                         DROPBITS(here.bits);

  00530	0f b6 cc	 movzx	 ecx, ah
  00533	d3 ea		 shr	 edx, cl
  00535	2b f9		 sub	 edi, ecx
  00537	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx

; 413  :                         if (state->have == 0) {

  0053a	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0053d	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00540	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00543	85 c0		 test	 eax, eax
  00545	0f 84 72 01 00
	00		 je	 $LN380@inflateBac

; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);

  0054b	0f b7 44 42 6e	 movzx	 eax, WORD PTR [edx+eax*2+110]
  00550	89 45 dc	 mov	 DWORD PTR _len$1$[ebp], eax

; 419  :                         copy = 3 + BITS(2);

  00553	8b 45 fc	 mov	 eax, DWORD PTR _hold$1$[ebp]
  00556	8b c8		 mov	 ecx, eax
  00558	83 e1 03	 and	 ecx, 3

; 420  :                         DROPBITS(2);

  0055b	c1 e8 02	 shr	 eax, 2
  0055e	83 c1 03	 add	 ecx, 3
  00561	89 45 fc	 mov	 DWORD PTR _hold$1$[ebp], eax
  00564	89 4d e0	 mov	 DWORD PTR _copy$4$[ebp], ecx
  00567	83 ef 02	 sub	 edi, 2

; 421  :                     }

  0056a	e9 df 00 00 00	 jmp	 $LN503@inflateBac
$LN286@inflateBac:

; 422  :                     else if (here.val == 17) {

  0056f	66 83 7d e2 11	 cmp	 WORD PTR _here$[ebp+2], 17 ; 00000011H

; 423  :                         NEEDBITS(here.bits + 3);

  00574	0f b6 cc	 movzx	 ecx, ah
  00577	75 63		 jne	 SHORT $LN142@inflateBac
  00579	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0057c	89 4d d4	 mov	 DWORD PTR tv1709[ebp], ecx
  0057f	3b f8		 cmp	 edi, eax
  00581	73 42		 jae	 SHORT $LN123@inflateBac
$LL126@inflateBac:
  00583	85 f6		 test	 esi, esi
  00585	75 1d		 jne	 SHORT $LN131@inflateBac
  00587	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0058a	50		 push	 eax
  0058b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0058e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00591	8b f0		 mov	 esi, eax
  00593	83 c4 08	 add	 esp, 8
  00596	85 f6		 test	 esi, esi
  00598	0f 84 8d 07 00
	00		 je	 $LN369@inflateBac
  0059e	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  005a1	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN131@inflateBac:
  005a4	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  005a7	8b cf		 mov	 ecx, edi
  005a9	d3 e0		 shl	 eax, cl
  005ab	43		 inc	 ebx
  005ac	8b 4d d4	 mov	 ecx, DWORD PTR tv1709[ebp]
  005af	03 d0		 add	 edx, eax
  005b1	83 c7 08	 add	 edi, 8
  005b4	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  005b7	4e		 dec	 esi
  005b8	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  005bb	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  005be	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  005c1	3b f8		 cmp	 edi, eax
  005c3	72 be		 jb	 SHORT $LL126@inflateBac
$LN123@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005c5	d3 ea		 shr	 edx, cl

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  005c7	8b c2		 mov	 eax, edx
  005c9	83 e0 07	 and	 eax, 7
  005cc	83 c0 03	 add	 eax, 3

; 427  :                         DROPBITS(3);

  005cf	c1 ea 03	 shr	 edx, 3
  005d2	89 45 e0	 mov	 DWORD PTR _copy$4$[ebp], eax
  005d5	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 428  :                     }

  005da	eb 61		 jmp	 SHORT $LN504@inflateBac
$LN142@inflateBac:

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  005dc	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  005df	89 4d d4	 mov	 DWORD PTR tv1708[ebp], ecx
  005e2	3b f8		 cmp	 edi, eax
  005e4	73 42		 jae	 SHORT $LN140@inflateBac
$LL143@inflateBac:
  005e6	85 f6		 test	 esi, esi
  005e8	75 1d		 jne	 SHORT $LN148@inflateBac
  005ea	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  005ed	50		 push	 eax
  005ee	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005f1	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005f4	8b f0		 mov	 esi, eax
  005f6	83 c4 08	 add	 esp, 8
  005f9	85 f6		 test	 esi, esi
  005fb	0f 84 2a 07 00
	00		 je	 $LN369@inflateBac
  00601	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00604	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN148@inflateBac:
  00607	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0060a	8b cf		 mov	 ecx, edi
  0060c	d3 e0		 shl	 eax, cl
  0060e	43		 inc	 ebx
  0060f	8b 4d d4	 mov	 ecx, DWORD PTR tv1708[ebp]
  00612	03 d0		 add	 edx, eax
  00614	83 c7 08	 add	 edi, 8
  00617	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  0061a	4e		 dec	 esi
  0061b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0061e	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00621	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  00624	3b f8		 cmp	 edi, eax
  00626	72 be		 jb	 SHORT $LL143@inflateBac
$LN140@inflateBac:

; 431  :                         DROPBITS(here.bits);

  00628	d3 ea		 shr	 edx, cl

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  0062a	8b c2		 mov	 eax, edx
  0062c	83 e0 7f	 and	 eax, 127		; 0000007fH
  0062f	83 c0 0b	 add	 eax, 11			; 0000000bH

; 434  :                         DROPBITS(7);

  00632	c1 ea 07	 shr	 edx, 7
  00635	89 45 e0	 mov	 DWORD PTR _copy$4$[ebp], eax
  00638	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN504@inflateBac:
  0063d	2b c1		 sub	 eax, ecx
  0063f	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  00642	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00645	03 f8		 add	 edi, eax
  00647	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _len$1$[ebp], 0
$LN503@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  0064e	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  00651	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00654	03 4a 60	 add	 ecx, DWORD PTR [edx+96]
  00657	03 45 e0	 add	 eax, DWORD PTR _copy$4$[ebp]
  0065a	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0065d	3b c1		 cmp	 eax, ecx
  0065f	77 5c		 ja	 SHORT $LN380@inflateBac

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)

  00661	8b 4d e0	 mov	 ecx, DWORD PTR _copy$4$[ebp]
  00664	85 c9		 test	 ecx, ecx
  00666	74 1e		 je	 SHORT $LN406@inflateBac
  00668	8b 5d dc	 mov	 ebx, DWORD PTR _len$1$[ebp]
  0066b	0f 1f 44 00 00	 npad	 5
$LL157@inflateBac:

; 442  :                         state->lens[state->have++] = (unsigned short)len;

  00670	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00673	66 89 5c 42 70	 mov	 WORD PTR [edx+eax*2+112], bx
  00678	ff 42 68	 inc	 DWORD PTR [edx+104]
  0067b	83 e9 01	 sub	 ecx, 1
  0067e	75 f0		 jne	 SHORT $LL157@inflateBac
$LN502@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)

  00680	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00683	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN406@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00686	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00689	03 42 60	 add	 eax, DWORD PTR [edx+96]
  0068c	39 42 68	 cmp	 DWORD PTR [edx+104], eax
  0068f	0f 82 81 fd ff
	ff		 jb	 $LL92@inflateBac
$LN93@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  00695	83 3a 1d	 cmp	 DWORD PTR [edx], 29	; 0000001dH
  00698	0f 84 61 06 00
	00		 je	 $LN492@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  0069e	66 83 ba 70 02
	00 00 00	 cmp	 WORD PTR [edx+624], 0
  006a6	75 2a		 jne	 SHORT $LN299@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006a8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006ab	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@

; 452  :                 state->mode = BAD;

  006b2	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 453  :                 break;

  006b8	e9 3c 06 00 00	 jmp	 $LN505@inflateBac
$LN380@inflateBac:

; 414  :                             strm->msg = (char *)"invalid bit length repeat";

  006bd	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006c0	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 415  :                             state->mode = BAD;

  006c7	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 416  :                             break;

  006cd	e9 27 06 00 00	 jmp	 $LN505@inflateBac
$LN299@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;

  006d2	8d 82 30 05 00
	00		 lea	 eax, DWORD PTR [edx+1328]

; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;

  006d8	c7 42 54 09 00
	00 00		 mov	 DWORD PTR [edx+84], 9
  006df	8d 5a 6c	 lea	 ebx, DWORD PTR [edx+108]
  006e2	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  006e5	8d 8a f0 02 00
	00		 lea	 ecx, DWORD PTR [edx+752]
  006eb	89 03		 mov	 DWORD PTR [ebx], eax
  006ed	51		 push	 ecx
  006ee	8d 42 54	 lea	 eax, DWORD PTR [edx+84]
  006f1	b9 01 00 00 00	 mov	 ecx, 1
  006f6	50		 push	 eax
  006f7	53		 push	 ebx
  006f8	ff 72 60	 push	 DWORD PTR [edx+96]
  006fb	8b 55 d0	 mov	 edx, DWORD PTR tv1719[ebp]
  006fe	e8 00 00 00 00	 call	 _inflate_table
  00703	83 c4 10	 add	 esp, 16			; 00000010H

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  00706	85 c0		 test	 eax, eax
  00708	74 18		 je	 SHORT $LN300@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  0070a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 466  :                 state->mode = BAD;

  0070d	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00710	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
  00717	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 467  :                 break;

  0071d	e9 d7 05 00 00	 jmp	 $LN505@inflateBac
$LN300@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  00722	8b 4d f4	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00725	8b 03		 mov	 eax, DWORD PTR [ebx]

; 470  :             state->distbits = 6;

  00727	c7 41 58 06 00
	00 00		 mov	 DWORD PTR [ecx+88], 6

; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  0072e	8d 91 f0 02 00
	00		 lea	 edx, DWORD PTR [ecx+752]
  00734	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00737	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
  0073a	52		 push	 edx
  0073b	50		 push	 eax
  0073c	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  0073f	53		 push	 ebx
  00740	ff 71 64	 push	 DWORD PTR [ecx+100]
  00743	83 c1 70	 add	 ecx, 112		; 00000070H
  00746	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00749	b9 02 00 00 00	 mov	 ecx, 2
  0074e	e8 00 00 00 00	 call	 _inflate_table

; 475  :                 state->mode = BAD;

  00753	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00756	83 c4 10	 add	 esp, 16			; 00000010H

; 476  :                 break;

  00759	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  0075c	85 c0		 test	 eax, eax
  0075e	74 1b		 je	 SHORT $LN301@inflateBac

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {
; 474  :                 strm->msg = (char *)"invalid distances set";

  00760	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00763	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@

; 475  :                 state->mode = BAD;

  0076a	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 476  :                 break;

  00770	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00773	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00776	e9 87 05 00 00	 jmp	 $LN393@inflateBac
$LN301@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  0077b	c7 02 14 00 00
	00		 mov	 DWORD PTR [edx], 20	; 00000014H
  00781	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00784	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN302@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  00787	83 fe 06	 cmp	 esi, 6
  0078a	0f 82 8a 00 00
	00		 jb	 $LN303@inflateBac
  00790	81 7d e8 02 01
	00 00		 cmp	 DWORD PTR _left$1$[ebp], 258 ; 00000102H
  00797	0f 82 7d 00 00
	00		 jb	 $LN303@inflateBac

; 484  :                 RESTORE();

  0079d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007a0	8b 45 e4	 mov	 eax, DWORD PTR _put$1$[ebp]
  007a3	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007a6	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
  007a9	89 42 10	 mov	 DWORD PTR [edx+16], eax
  007ac	8b c2		 mov	 eax, edx
  007ae	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007b1	89 18		 mov	 DWORD PTR [eax], ebx
  007b3	8b d8		 mov	 ebx, eax
  007b5	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  007b8	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 485  :                 if (state->whave < state->wsize)

  007bb	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  007be	89 7a 3c	 mov	 DWORD PTR [edx+60], edi
  007c1	39 4a 2c	 cmp	 DWORD PTR [edx+44], ecx
  007c4	73 08		 jae	 SHORT $LN304@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007c6	8b c1		 mov	 eax, ecx
  007c8	2b 45 e8	 sub	 eax, DWORD PTR _left$1$[ebp]
  007cb	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN304@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007ce	8b d1		 mov	 edx, ecx
  007d0	8b cb		 mov	 ecx, ebx
  007d2	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  007d7	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  007da	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007dd	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  007e0	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  007e3	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  007e5	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  007e8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  007eb	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  007ee	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  007f1	8b 7a 3c	 mov	 edi, DWORD PTR [edx+60]
  007f4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  007f7	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  007fa	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  007fd	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 489  :                 break;

  00800	e9 fd 04 00 00	 jmp	 $LN393@inflateBac
$LN277@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  00805	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00808	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@

; 370  :                 state->mode = BAD;

  0080f	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 371  :                 break;

  00815	e9 df 04 00 00	 jmp	 $LN505@inflateBac
$LN303@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  0081a	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0081d	ba 01 00 00 00	 mov	 edx, 1
  00822	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00825	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00828	d3 e2		 shl	 edx, cl
  0082a	4a		 dec	 edx
  0082b	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  0082e	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  00831	8b c8		 mov	 ecx, eax
  00833	c1 e9 08	 shr	 ecx, 8
  00836	0f b6 c9	 movzx	 ecx, cl
  00839	3b cf		 cmp	 ecx, edi
  0083b	76 5c		 jbe	 SHORT $LN382@inflateBac
  0083d	0f 1f 00	 npad	 3
$LL165@inflateBac:

; 496  :                 PULLBYTE();

  00840	85 f6		 test	 esi, esi
  00842	75 1a		 jne	 SHORT $LN171@inflateBac
  00844	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00847	50		 push	 eax
  00848	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0084b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0084e	8b f0		 mov	 esi, eax
  00850	83 c4 08	 add	 esp, 8
  00853	85 f6		 test	 esi, esi
  00855	0f 84 d0 04 00
	00		 je	 $LN369@inflateBac
  0085b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN171@inflateBac:
  0085e	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00861	8b cf		 mov	 ecx, edi
  00863	d3 e0		 shl	 eax, cl
  00865	43		 inc	 ebx
  00866	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00869	ba 01 00 00 00	 mov	 edx, 1
  0086e	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00871	83 c7 08	 add	 edi, 8
  00874	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00877	4e		 dec	 esi
  00878	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0087b	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0087e	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00881	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00884	d3 e2		 shl	 edx, cl
  00886	4a		 dec	 edx
  00887	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  0088a	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0088d	8b c8		 mov	 ecx, eax
  0088f	c1 e9 08	 shr	 ecx, 8
  00892	0f b6 c9	 movzx	 ecx, cl
  00895	3b cf		 cmp	 ecx, edi
  00897	77 a7		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  00899	84 c0		 test	 al, al
  0089b	0f 84 d7 00 00
	00		 je	 $LN490@inflateBac
  008a1	a8 f0		 test	 al, 240			; 000000f0H
  008a3	0f 85 cf 00 00
	00		 jne	 $LN490@inflateBac

; 499  :                 last = here;
; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  008a9	8b c8		 mov	 ecx, eax
  008ab	bb 01 00 00 00	 mov	 ebx, 1
  008b0	c1 e9 08	 shr	 ecx, 8
  008b3	8b d0		 mov	 edx, eax
  008b5	0f b6 f9	 movzx	 edi, cl
  008b8	89 4d d0	 mov	 DWORD PTR tv1718[ebp], ecx
  008bb	0f b6 c8	 movzx	 ecx, al
  008be	03 cf		 add	 ecx, edi
  008c0	c1 e8 10	 shr	 eax, 16			; 00000010H
  008c3	d3 e3		 shl	 ebx, cl
  008c5	8b cf		 mov	 ecx, edi
  008c7	4b		 dec	 ebx
  008c8	89 55 e0	 mov	 DWORD PTR _last$[ebp], edx
  008cb	23 5d fc	 and	 ebx, DWORD PTR _hold$1$[ebp]
  008ce	d3 eb		 shr	 ebx, cl
  008d0	03 d8		 add	 ebx, eax
  008d2	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  008d5	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  008d8	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008db	8b c8		 mov	 ecx, eax
  008dd	c1 e9 08	 shr	 ecx, 8
  008e0	0f b6 f9	 movzx	 edi, cl
  008e3	8b 4d d0	 mov	 ecx, DWORD PTR tv1718[ebp]
  008e6	0f b6 c9	 movzx	 ecx, cl
  008e9	03 f9		 add	 edi, ecx
  008eb	3b 7d ec	 cmp	 edi, DWORD PTR _bits$1$[ebp]
  008ee	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  008f1	0f 86 75 00 00
	00		 jbe	 $LN185@inflateBac
$LL174@inflateBac:

; 504  :                     PULLBYTE();

  008f7	85 f6		 test	 esi, esi
  008f9	75 1f		 jne	 SHORT $LN486@inflateBac
  008fb	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  008fe	50		 push	 eax
  008ff	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00902	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00905	8b f0		 mov	 esi, eax
  00907	83 c4 08	 add	 esp, 8
  0090a	85 f6		 test	 esi, esi
  0090c	0f 84 19 04 00
	00		 je	 $LN369@inflateBac
  00912	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00915	8b 55 e0	 mov	 edx, DWORD PTR _last$[ebp]
  00918	eb 03		 jmp	 SHORT $LN180@inflateBac
$LN486@inflateBac:
  0091a	8b 5d f0	 mov	 ebx, DWORD PTR _next$5$[ebp]
$LN180@inflateBac:
  0091d	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00920	8b cf		 mov	 ecx, edi
  00922	d3 e0		 shl	 eax, cl
  00924	83 c7 08	 add	 edi, 8
  00927	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  0092a	43		 inc	 ebx
  0092b	0f b7 45 e2	 movzx	 eax, WORD PTR _last$[ebp+2]
  0092f	4e		 dec	 esi
  00930	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00933	bf 01 00 00 00	 mov	 edi, 1
  00938	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  0093b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0093e	0f b6 de	 movzx	 ebx, dh
  00941	0f b6 ca	 movzx	 ecx, dl
  00944	03 cb		 add	 ecx, ebx
  00946	d3 e7		 shl	 edi, cl
  00948	8b cb		 mov	 ecx, ebx
  0094a	4f		 dec	 edi
  0094b	23 7d fc	 and	 edi, DWORD PTR _hold$1$[ebp]
  0094e	d3 ef		 shr	 edi, cl
  00950	03 f8		 add	 edi, eax
  00952	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00955	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00958	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0095b	8b c8		 mov	 ecx, eax
  0095d	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00960	c1 e9 08	 shr	 ecx, 8
  00963	0f b6 c9	 movzx	 ecx, cl
  00966	03 cb		 add	 ecx, ebx
  00968	3b cf		 cmp	 ecx, edi
  0096a	77 8b		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  0096c	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
  0096f	0f b6 ce	 movzx	 ecx, dh
  00972	d3 eb		 shr	 ebx, cl
  00974	2b f9		 sub	 edi, ecx
  00976	eb 03		 jmp	 SHORT $LN184@inflateBac
$LN490@inflateBac:
  00978	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
$LN184@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);
; 509  :             state->length = (unsigned)here.val;

  0097b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0097e	8b c8		 mov	 ecx, eax
  00980	c1 e9 08	 shr	 ecx, 8
  00983	0f b6 c9	 movzx	 ecx, cl
  00986	d3 eb		 shr	 ebx, cl
  00988	2b f9		 sub	 edi, ecx
  0098a	8b c8		 mov	 ecx, eax
  0098c	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  0098f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00992	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00995	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  00998	84 c0		 test	 al, al
  0099a	75 44		 jne	 SHORT $LN312@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  0099c	83 7d e8 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  009a0	75 24		 jne	 SHORT $LN497@inflateBac
  009a2	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  009a5	8b 5a 34	 mov	 ebx, DWORD PTR [edx+52]
  009a8	50		 push	 eax
  009a9	53		 push	 ebx
  009aa	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  009ad	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  009b0	89 42 2c	 mov	 DWORD PTR [edx+44], eax
  009b3	ff 55 14	 call	 DWORD PTR _out$[ebp]
  009b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  009b9	85 c0		 test	 eax, eax
  009bb	0f 85 84 03 00
	00		 jne	 $LN372@inflateBac
  009c1	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  009c4	eb 03		 jmp	 SHORT $LN189@inflateBac
$LN497@inflateBac:
  009c6	8b 5d e4	 mov	 ebx, DWORD PTR _put$1$[ebp]
$LN189@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  009c9	8a 42 40	 mov	 al, BYTE PTR [edx+64]
  009cc	88 03		 mov	 BYTE PTR [ebx], al
  009ce	43		 inc	 ebx

; 518  :                 left--;

  009cf	ff 4d e8	 dec	 DWORD PTR _left$1$[ebp]
  009d2	89 5d e4	 mov	 DWORD PTR _put$1$[ebp], ebx

; 519  :                 state->mode = LEN;

  009d5	c7 02 14 00 00
	00		 mov	 DWORD PTR [edx], 20	; 00000014H

; 520  :                 break;

  009db	e9 19 03 00 00	 jmp	 $LN505@inflateBac
$LN312@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009e0	a8 20		 test	 al, 32			; 00000020H
  009e2	74 0b		 je	 SHORT $LN315@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  009e4	c7 02 0b 00 00
	00		 mov	 DWORD PTR [edx], 11	; 0000000bH

; 527  :                 break;

  009ea	e9 0a 03 00 00	 jmp	 $LN505@inflateBac
$LN315@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  009ef	a8 40		 test	 al, 64			; 00000040H
  009f1	74 15		 je	 SHORT $LN316@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  009f3	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  009f6	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@

; 533  :                 state->mode = BAD;

  009fd	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 534  :                 break;

  00a03	e9 f1 02 00 00	 jmp	 $LN505@inflateBac
$LN316@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  00a08	0f b6 c0	 movzx	 eax, al
  00a0b	83 e0 0f	 and	 eax, 15			; 0000000fH
  00a0e	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 539  :             if (state->extra != 0) {

  00a11	74 61		 je	 SHORT $LN204@inflateBac

; 540  :                 NEEDBITS(state->extra);

  00a13	3b f8		 cmp	 edi, eax
  00a15	73 43		 jae	 SHORT $LN192@inflateBac
  00a17	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00a1a	66 0f 1f 44 00
	00		 npad	 6
$LL195@inflateBac:
  00a20	85 f6		 test	 esi, esi
  00a22	75 1d		 jne	 SHORT $LN200@inflateBac
  00a24	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00a27	50		 push	 eax
  00a28	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a2b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a2e	8b f0		 mov	 esi, eax
  00a30	83 c4 08	 add	 esp, 8
  00a33	85 f6		 test	 esi, esi
  00a35	0f 84 f0 02 00
	00		 je	 $LN369@inflateBac
  00a3b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a3e	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a41	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a44	8b cf		 mov	 ecx, edi
  00a46	d3 e0		 shl	 eax, cl
  00a48	83 c7 08	 add	 edi, 8
  00a4b	03 d8		 add	 ebx, eax
  00a4d	4e		 dec	 esi
  00a4e	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00a51	40		 inc	 eax
  00a52	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax
  00a55	3b 7a 48	 cmp	 edi, DWORD PTR [edx+72]
  00a58	72 c6		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a5a	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00a5d	b8 01 00 00 00	 mov	 eax, 1
  00a62	d3 e0		 shl	 eax, cl
  00a64	48		 dec	 eax
  00a65	23 c3		 and	 eax, ebx

; 542  :                 DROPBITS(state->extra);

  00a67	d3 eb		 shr	 ebx, cl
  00a69	01 42 40	 add	 DWORD PTR [edx+64], eax
  00a6c	2b f9		 sub	 edi, ecx
  00a6e	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00a71	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
$LN204@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a74	8b 5d f4	 mov	 ebx, DWORD PTR _state$1$[ebp]
  00a77	ba 01 00 00 00	 mov	 edx, 1
  00a7c	8b 4b 58	 mov	 ecx, DWORD PTR [ebx+88]
  00a7f	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00a82	d3 e2		 shl	 edx, cl
  00a84	4a		 dec	 edx
  00a85	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00a88	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00a8b	8b c8		 mov	 ecx, eax
  00a8d	c1 e9 08	 shr	 ecx, 8
  00a90	0f b6 c9	 movzx	 ecx, cl
  00a93	3b cf		 cmp	 ecx, edi
  00a95	76 53		 jbe	 SHORT $LN479@inflateBac
$LL206@inflateBac:

; 550  :                 PULLBYTE();

  00a97	85 f6		 test	 esi, esi
  00a99	75 17		 jne	 SHORT $LN212@inflateBac
  00a9b	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00a9e	50		 push	 eax
  00a9f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00aa2	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00aa5	8b f0		 mov	 esi, eax
  00aa7	83 c4 08	 add	 esp, 8
  00aaa	85 f6		 test	 esi, esi
  00aac	0f 84 79 02 00
	00		 je	 $LN369@inflateBac
$LN212@inflateBac:
  00ab2	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00ab5	8b cf		 mov	 ecx, edi
  00ab7	83 c7 08	 add	 edi, 8
  00aba	4e		 dec	 esi
  00abb	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00abe	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00ac1	42		 inc	 edx
  00ac2	d3 e0		 shl	 eax, cl
  00ac4	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00ac7	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00aca	ba 01 00 00 00	 mov	 edx, 1
  00acf	8b 4b 58	 mov	 ecx, DWORD PTR [ebx+88]
  00ad2	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00ad5	d3 e2		 shl	 edx, cl
  00ad7	4a		 dec	 edx
  00ad8	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00adb	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00ade	8b c8		 mov	 ecx, eax
  00ae0	c1 e9 08	 shr	 ecx, 8
  00ae3	0f b6 c9	 movzx	 ecx, cl
  00ae6	3b cf		 cmp	 ecx, edi
  00ae8	77 ad		 ja	 SHORT $LL206@inflateBac
$LN479@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00aea	a8 f0		 test	 al, 240			; 000000f0H
  00aec	0f 85 c7 00 00
	00		 jne	 $LN491@inflateBac

; 553  :                 last = here;
; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00af2	8b c8		 mov	 ecx, eax
  00af4	bb 01 00 00 00	 mov	 ebx, 1
  00af9	c1 e9 08	 shr	 ecx, 8
  00afc	8b d0		 mov	 edx, eax
  00afe	0f b6 f9	 movzx	 edi, cl
  00b01	89 4d d0	 mov	 DWORD PTR tv1717[ebp], ecx
  00b04	0f b6 c8	 movzx	 ecx, al
  00b07	03 cf		 add	 ecx, edi
  00b09	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b0c	d3 e3		 shl	 ebx, cl
  00b0e	8b cf		 mov	 ecx, edi
  00b10	4b		 dec	 ebx
  00b11	89 55 e0	 mov	 DWORD PTR _last$[ebp], edx
  00b14	23 5d fc	 and	 ebx, DWORD PTR _hold$1$[ebp]
  00b17	d3 eb		 shr	 ebx, cl
  00b19	03 d8		 add	 ebx, eax
  00b1b	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b1e	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00b21	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00b24	8b c8		 mov	 ecx, eax
  00b26	c1 e9 08	 shr	 ecx, 8
  00b29	0f b6 f9	 movzx	 edi, cl
  00b2c	8b 4d d0	 mov	 ecx, DWORD PTR tv1717[ebp]
  00b2f	0f b6 c9	 movzx	 ecx, cl
  00b32	03 f9		 add	 edi, ecx
  00b34	3b 7d ec	 cmp	 edi, DWORD PTR _bits$1$[ebp]
  00b37	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00b3a	76 71		 jbe	 SHORT $LN226@inflateBac
  00b3c	0f 1f 40 00	 npad	 4
$LL215@inflateBac:

; 558  :                     PULLBYTE();

  00b40	85 f6		 test	 esi, esi
  00b42	75 1a		 jne	 SHORT $LN221@inflateBac
  00b44	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00b47	50		 push	 eax
  00b48	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b4b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b4e	8b f0		 mov	 esi, eax
  00b50	83 c4 08	 add	 esp, 8
  00b53	85 f6		 test	 esi, esi
  00b55	0f 84 d0 01 00
	00		 je	 $LN369@inflateBac
  00b5b	8b 55 e0	 mov	 edx, DWORD PTR _last$[ebp]
$LN221@inflateBac:
  00b5e	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00b61	8b cf		 mov	 ecx, edi
  00b63	83 c7 08	 add	 edi, 8
  00b66	4e		 dec	 esi
  00b67	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00b6a	bf 01 00 00 00	 mov	 edi, 1
  00b6f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00b72	43		 inc	 ebx
  00b73	d3 e0		 shl	 eax, cl
  00b75	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00b78	0f b7 45 e2	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b7c	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00b7f	0f b6 de	 movzx	 ebx, dh
  00b82	0f b6 ca	 movzx	 ecx, dl
  00b85	03 cb		 add	 ecx, ebx
  00b87	d3 e7		 shl	 edi, cl
  00b89	8b cb		 mov	 ecx, ebx
  00b8b	4f		 dec	 edi
  00b8c	23 7d fc	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b8f	d3 ef		 shr	 edi, cl
  00b91	03 f8		 add	 edi, eax
  00b93	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b96	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00b99	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00b9c	8b c8		 mov	 ecx, eax
  00b9e	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00ba1	c1 e9 08	 shr	 ecx, 8
  00ba4	0f b6 c9	 movzx	 ecx, cl
  00ba7	03 cb		 add	 ecx, ebx
  00ba9	3b cf		 cmp	 ecx, edi
  00bab	77 93		 ja	 SHORT $LL215@inflateBac
$LN226@inflateBac:

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00bad	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
  00bb0	0f b6 ce	 movzx	 ecx, dh
  00bb3	d3 eb		 shr	 ebx, cl
  00bb5	2b f9		 sub	 edi, ecx
  00bb7	eb 03		 jmp	 SHORT $LN225@inflateBac
$LN491@inflateBac:
  00bb9	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
$LN225@inflateBac:

; 565  :                 state->mode = BAD;

  00bbc	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00bbf	8b c8		 mov	 ecx, eax
  00bc1	c1 e9 08	 shr	 ecx, 8
  00bc4	0f b6 c9	 movzx	 ecx, cl
  00bc7	d3 eb		 shr	 ebx, cl
  00bc9	2b f9		 sub	 edi, ecx
  00bcb	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00bce	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00bd1	a8 40		 test	 al, 64			; 00000040H
  00bd3	74 15		 je	 SHORT $LN327@inflateBac

; 561  :             }
; 562  :             DROPBITS(here.bits);
; 563  :             if (here.op & 64) {
; 564  :                 strm->msg = (char *)"invalid distance code";

  00bd5	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bd8	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@

; 565  :                 state->mode = BAD;

  00bdf	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 566  :                 break;

  00be5	e9 0f 01 00 00	 jmp	 $LN505@inflateBac
$LN327@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00bea	8b c8		 mov	 ecx, eax

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00bec	0f b6 c0	 movzx	 eax, al
  00bef	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00bf2	83 e0 0f	 and	 eax, 15			; 0000000fH
  00bf5	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  00bf8	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 572  :             if (state->extra != 0) {

  00bfb	74 5b		 je	 SHORT $LN242@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00bfd	3b f8		 cmp	 edi, eax
  00bff	73 3d		 jae	 SHORT $LN230@inflateBac
  00c01	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00c04	85 f6		 test	 esi, esi
  00c06	75 1d		 jne	 SHORT $LN238@inflateBac
  00c08	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00c0b	50		 push	 eax
  00c0c	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00c0f	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00c12	8b f0		 mov	 esi, eax
  00c14	83 c4 08	 add	 esp, 8
  00c17	85 f6		 test	 esi, esi
  00c19	0f 84 0c 01 00
	00		 je	 $LN369@inflateBac
  00c1f	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c22	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00c25	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00c28	8b cf		 mov	 ecx, edi
  00c2a	d3 e0		 shl	 eax, cl
  00c2c	83 c7 08	 add	 edi, 8
  00c2f	03 d8		 add	 ebx, eax
  00c31	4e		 dec	 esi
  00c32	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00c35	40		 inc	 eax
  00c36	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax
  00c39	3b 7a 48	 cmp	 edi, DWORD PTR [edx+72]
  00c3c	72 c6		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00c3e	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00c41	b8 01 00 00 00	 mov	 eax, 1
  00c46	d3 e0		 shl	 eax, cl
  00c48	48		 dec	 eax
  00c49	23 c3		 and	 eax, ebx

; 575  :                 DROPBITS(state->extra);

  00c4b	d3 eb		 shr	 ebx, cl
  00c4d	01 42 44	 add	 DWORD PTR [edx+68], eax
  00c50	2b f9		 sub	 edi, ecx
  00c52	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00c55	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
$LN242@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00c58	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00c5b	39 4a 2c	 cmp	 DWORD PTR [edx+44], ecx
  00c5e	8b 5d e8	 mov	 ebx, DWORD PTR _left$1$[ebp]
  00c61	1b c0		 sbb	 eax, eax
  00c63	23 c3		 and	 eax, ebx
  00c65	2b c8		 sub	 ecx, eax
  00c67	39 4a 44	 cmp	 DWORD PTR [edx+68], ecx
  00c6a	76 15		 jbe	 SHORT $LL246@inflateBac

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c6c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c6f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@

; 580  :                 state->mode = BAD;

  00c76	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 581  :                 break;

  00c7c	e9 78 00 00 00	 jmp	 $LN505@inflateBac
$LL246@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00c81	85 db		 test	 ebx, ebx
  00c83	75 27		 jne	 SHORT $LN498@inflateBac
  00c85	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00c88	8b 5a 34	 mov	 ebx, DWORD PTR [edx+52]
  00c8b	50		 push	 eax
  00c8c	53		 push	 ebx
  00c8d	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00c90	89 5d e4	 mov	 DWORD PTR _put$1$[ebp], ebx
  00c93	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  00c96	89 42 2c	 mov	 DWORD PTR [edx+44], eax
  00c99	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00c9c	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c9f	85 c0		 test	 eax, eax
  00ca1	0f 85 9e 00 00
	00		 jne	 $LN372@inflateBac
  00ca7	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00caa	eb 03		 jmp	 SHORT $LN247@inflateBac
$LN498@inflateBac:
  00cac	8b 5d e4	 mov	 ebx, DWORD PTR _put$1$[ebp]
$LN247@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00caf	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00cb2	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  00cb5	2b c1		 sub	 eax, ecx

; 589  :                 if (copy < left) {

  00cb7	3b 45 e8	 cmp	 eax, DWORD PTR _left$1$[ebp]
  00cba	73 09		 jae	 SHORT $LN334@inflateBac

; 590  :                     from = put + copy;
; 591  :                     copy = left - copy;

  00cbc	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00cbf	03 d8		 add	 ebx, eax
  00cc1	2b c8		 sub	 ecx, eax

; 592  :                 }

  00cc3	eb 05		 jmp	 SHORT $LN335@inflateBac
$LN334@inflateBac:

; 593  :                 else {
; 594  :                     from = put - state->offset;

  00cc5	2b d9		 sub	 ebx, ecx

; 595  :                     copy = left;

  00cc7	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN335@inflateBac:

; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00cca	3b 4a 40	 cmp	 ecx, DWORD PTR [edx+64]
  00ccd	0f 47 4a 40	 cmova	 ecx, DWORD PTR [edx+64]

; 598  :                 state->length -= copy;

  00cd1	29 4a 40	 sub	 DWORD PTR [edx+64], ecx

; 599  :                 left -= copy;

  00cd4	29 4d e8	 sub	 DWORD PTR _left$1$[ebp], ecx

; 602  :                 } while (--copy);

  00cd7	8b 55 e4	 mov	 edx, DWORD PTR _put$1$[ebp]
  00cda	2b da		 sub	 ebx, edx
  00cdc	0f 1f 40 00	 npad	 4
$LL252@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00ce0	8a 04 13	 mov	 al, BYTE PTR [ebx+edx]
  00ce3	88 02		 mov	 BYTE PTR [edx], al
  00ce5	42		 inc	 edx

; 602  :                 } while (--copy);

  00ce6	83 e9 01	 sub	 ecx, 1
  00ce9	75 f5		 jne	 SHORT $LL252@inflateBac

; 603  :             } while (state->length != 0);

  00ceb	8b 5d e8	 mov	 ebx, DWORD PTR _left$1$[ebp]
  00cee	89 55 e4	 mov	 DWORD PTR _put$1$[ebp], edx
  00cf1	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cf4	39 4a 40	 cmp	 DWORD PTR [edx+64], ecx
  00cf7	75 88		 jne	 SHORT $LL246@inflateBac
$LN505@inflateBac:
  00cf9	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00cfc	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN492@inflateBac:
  00cff	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN393@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00d02	8b 02		 mov	 eax, DWORD PTR [edx]
  00d04	83 e8 0b	 sub	 eax, 11			; 0000000bH
  00d07	83 f8 12	 cmp	 eax, 18			; 00000012H
  00d0a	0f 86 70 f3 ff
	ff		 jbe	 $LL2@inflateBac
$LN341@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00d10	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN485@inflateBac:
  00d15	8b 45 f0	 mov	 eax, DWORD PTR _next$5$[ebp]
$inf_leave$509:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d18	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d1b	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d1d	8b c7		 mov	 eax, edi
  00d1f	5f		 pop	 edi
  00d20	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d23	5e		 pop	 esi
  00d24	5b		 pop	 ebx

; 629  : }

  00d25	8b e5		 mov	 esp, ebp
  00d27	5d		 pop	 ebp
  00d28	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d2b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d2e	33 c0		 xor	 eax, eax
  00d30	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d35	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d37	8b c7		 mov	 eax, edi
  00d39	5f		 pop	 edi
  00d3a	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d3d	5e		 pop	 esi
  00d3e	5b		 pop	 ebx

; 629  : }

  00d3f	8b e5		 mov	 esp, ebp
  00d41	5d		 pop	 ebp
  00d42	c2 14 00	 ret	 20			; 00000014H
$LN372@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d45	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d48	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d4d	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00d50	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d52	8b c7		 mov	 eax, edi
  00d54	5f		 pop	 edi
  00d55	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d58	5e		 pop	 esi
  00d59	5b		 pop	 ebx

; 629  : }

  00d5a	8b e5		 mov	 esp, ebp
  00d5c	5d		 pop	 ebp
  00d5d	c2 14 00	 ret	 20			; 00000014H
$LN337@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d60	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00d63	bf 01 00 00 00	 mov	 edi, 1
  00d68	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d6b	3b c8		 cmp	 ecx, eax
  00d6d	73 a6		 jae	 SHORT $LN485@inflateBac

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d6f	2b c1		 sub	 eax, ecx
  00d71	50		 push	 eax
  00d72	ff 72 34	 push	 DWORD PTR [edx+52]
  00d75	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d78	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d7b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d7e	85 c0		 test	 eax, eax

; 611  :                     ret = Z_BUF_ERROR;
; 612  :             }
; 613  :             goto inf_leave;

  00d80	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00d83	74 93		 je	 SHORT $inf_leave$509

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d85	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d88	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d8d	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d8f	8b c7		 mov	 eax, edi
  00d91	5f		 pop	 edi
  00d92	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d95	5e		 pop	 esi
  00d96	5b		 pop	 ebx

; 629  : }

  00d97	8b e5		 mov	 esp, ebp
  00d99	5d		 pop	 ebp
  00d9a	c2 14 00	 ret	 20			; 00000014H
$LN340@inflateBac:

; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00d9d	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 617  :             goto inf_leave;

  00da2	e9 6e ff ff ff	 jmp	 $LN485@inflateBac
$LN254@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00da7	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 629  : }

  00dac	8b e5		 mov	 esp, ebp
  00dae	5d		 pop	 ebp
  00daf	c2 14 00	 ret	 20			; 00000014H
  00db2	66 90		 npad	 2
$LN507@inflateBac:
  00db4	00 00 00 00	 DD	 $LN255@inflateBac
  00db8	00 00 00 00	 DD	 $LN31@inflateBac
  00dbc	00 00 00 00	 DD	 $LN56@inflateBac
  00dc0	00 00 00 00	 DD	 $LN302@inflateBac
  00dc4	00 00 00 00	 DD	 $LN337@inflateBac
  00dc8	00 00 00 00	 DD	 $LN340@inflateBac
  00dcc	00 00 00 00	 DD	 $LN341@inflateBac
$LN473@inflateBac:
  00dd0	00		 DB	 0
  00dd1	06		 DB	 6
  00dd2	01		 DB	 1
  00dd3	06		 DB	 6
  00dd4	06		 DB	 6
  00dd5	02		 DB	 2
  00dd6	06		 DB	 6
  00dd7	06		 DB	 6
  00dd8	06		 DB	 6
  00dd9	03		 DB	 3
  00dda	06		 DB	 6
  00ddb	06		 DB	 6
  00ddc	06		 DB	 6
  00ddd	06		 DB	 6
  00dde	06		 DB	 6
  00ddf	06		 DB	 6
  00de0	06		 DB	 6
  00de1	04		 DB	 4
  00de2	05		 DB	 5
  00de3	90		 npad	 1
$LN508@inflateBac:
  00de4	00 00 00 00	 DD	 $LN259@inflateBac
  00de8	00 00 00 00	 DD	 $LN260@inflateBac
  00dec	00 00 00 00	 DD	 $LN261@inflateBac
  00df0	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\downloads\tgl-master\tgl-master\zlib\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	50		 push	 eax
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d1		 call	 ecx
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
